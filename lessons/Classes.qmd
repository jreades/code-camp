---
format: html
filters:
- panelize
- pyodide
title: Inheritance and Classes
---

The concept of **inheritance** is something we've held off from mentioning until now, but it's definitely worth understanding if you are serious about learning how to code. In effect, it's common to find Python classes that _import_ a 'base class' and then _extend_ it with additional functionality.

## The 'Tree of Life'

Here's a simple way to think about inheritance: think of the 'evolutionary trees' you might have seen charting the evolution of organisms over time. At the bottom of the tree is the single-celled animal, and at the other end are humans, whales, wildebeest, etc. We all _inherit_ some basic functionality from that original, simple cell. 

In between us and that primitive, however, are a whole series of branches: different bits of the tree evolved in different directions and developed different 'functionality'. Some of us have bones. Some have  cartilege. Some are vegetarian, and some are carnivorous. And so on. 

When you get to the primates we all share certain common 'features' (binocular vision, grasping hands, etc.), but we are _still_ more similar to gorillas than we are to macaques. So gorillas and humans _extend_ the primitive 'primate functionality' with some bonus features (bigger brains, greater strength, etc.) that are useful, while macaques extend it with a slightly different set of features (tails, etc.).

![Tree of Life](http://palaeos.com/systematics/tree/images/treeolif.jpg)

## The 'Tree of Classes'

Inheritance in code works in a similar way: *all* Python classes inherit their most basic functionality from a single primitive 'object' class that itself does very little except to provide a template for what an object should look like. As you move along the inheritance tree you will find more and more complex objects with increasingly advanced features. 

I can't find an image of Python base class inheritance, but I've found an equally useful example of how _anything_ can be modelled using this 'family tree' approach... consider the following:

![Vehicle Inheritance](http://www.mkonar.org/dogus/wiki/lib/exe/fetch.php/python/vehicle.png)

If we were trying to implement a vehicle registration scheme in Python, we would want to start with the most basic category of all: _vehicle_. The vehicle class itself might not do much, but it gives us a template for _all_ vehicles (e.g. it must be registered, it must have a unique license number, etc.). We then _extend_ the functionality of this 'base class' with three intermediate classes: two-wheeled vehicles, cars, and trucks. These, in turn, lead to eight actual vehicle types. These might have _additional_ functionality: a bus might need have a passenger capacity associated with it, while a convertible might need to be hard- or soft-top. All of this could be expressed in Python as:

```python
class vehicle(object): # Inherit from base class
    def __init__(self):
        ... do something ...

class car(vehicle): # Inherit from vehicle
    def __init__(self):
        ... do other stuff ...

class sedan(car): # Inherit from car
    def __init__(self):
        ... do more stuff ...
```

This way, when we create a new `sedan`, it automatically 'knows' about vehicles and cars, and can make use of functions like `set_unique_id(<identification>)` even if that function is _only_ specified in the base vehicle class! The thing to remember is that programmers are _lazy_: if they can avoid reinventing the wheel, they will. Object-Oriented Programming using inheritance is a good example of _constructive_ laziness: it saves us having to constantly copy and paste code (for registering a new vehicle or reading in a CSV file) from one class to the next since we can just import it and _extend_ it! 

### Advantages of Inheritance \#1

This also means that we are less likely to make mistakes: if we want to update our vehicle registration scheme then we don't need to update lots of functions all over the place, we just update the base class and _all_ inheriting classes automatically gain the update because they are making use of the base class' function. 

### Advantages of Inheritance \#2

Inheritance also means that you can always use an instance of a 'more evolved' class in place of one of its ancestors: simplifying things a _bit_, a sedan can automatically do anything that a car can do and, by extension, anything that a vehicle can do. 

### Designing for Inheritance

Finally, looking back at our example above: what about unicycles? Or tracked vehicles like a tank? This is where _design_ comes into the picture: when we're planning out a family tree for our work we need to be careful about what goes where. And there isn't always a single right answer: perhaps we should distinguish between pedal-powered and motor-powered (in which case unicycles, bicycles and tricycles all belong in the same family)? Or perhaps we need to distinguish between wheeled and tracked (in which case we're missing a pair of classes [wheeled, tracked] between 'vehicle' and 'two-wheel, car, truck')? These choices are tremendously important but often very hard to get right.

OK, that's enough programming theory, let's see this in action...

## Classes

### A Basic Shape

Here is a simple demonstration of how classes work and why they're useful in programming. Let's see how we might create and work with a 'shape' class in Python:

```{python}
from math import pi

class shape(object): # Inherit from base class 
    def __init__(self): 
        return 
    
    def volume(self):
        raise Exception("Unimplmented method error.")
    
    def diameter(self):
        raise Exception("Unimplmented method error.")
        
    def type(self):
        return(self.shape_type)
```

Notice how the `def` statements are themselves indented here? What we are seeing is that a `class` is a *bundle* of functions. Our `shape` class inherits from the `object` class (which gives it some basic Python skills) and then *adds* functions for the `volume`, `diameter`, and `type`. There's also a special function called `__init__` which is the one Python will call when it wants to create a *new shape*.

But notice also that there are some odd things about those methods (`volume`, `diameter`, and `type`)? `volume` and `diameter` both throw an error (aka. raise an exception) and `type` seems to return a value that is never set! What's going on???

```{pyodide-python}
class shape(object): 
    def __init__(self): 
        return 
    
    def volume(self):
        raise Exception("Unimplmented method error.")
    
    def diameter(self):
        raise Exception("Unimplmented method error.")
        
    def type(self):
        return(self.shape_type)

s = shape()
print(f"I am an object of class '{type(s).__name__}'.\n\n")
s.volume()
```

The last thing to notice is that the class methods (those functions again) all have a default parameter of `self` -- this is a bit confusing, but it's just a bit of 'magic' so that the method can access the class of which it's a part.

### More Advanced Shapes

Let's step it up a bit and create a few more basic shapes by extending our `shape` base class:

```{pyodide-python}
class cube(shape): # Inherit from shape 
    def __init__(self, e):
        self.shape_type = 'Cube'
        self.edge = e
        return
    
    def volume(self):
        return self.edge**3
    
    def diameter(self):
        return (self.edge**2 + self.edge**2)**(1/2)

class sphere(shape): # Inherit from shape 
    def __init__(self, r):
        self.shape_type = 'Sphere'
        self.radius = r
        return
    
    def volume(self):
        return (4/3) * pi * self.radius**3
    
    def diameter(self):
        return self.radius*2
```

```{python}
#| echo: false

class cube(shape): # Inherit from shape 
    def __init__(self, e):
        self.shape_type = 'Cube'
        self.edge = e
        return
    
    def volume(self):
        return self.edge**3
    
    def diameter(self):
        return (self.edge**2 + self.edge**2)**(1/2)

class sphere(shape): # Inherit from shape 
    def __init__(self, r):
        self.shape_type = 'Sphere'
        self.radius = r
        return
    
    def volume(self):
        return (4/3) * pi * self.radius**3
    
    def diameter(self):
        return self.radius*2
```

So now we've got sphere and cube classes that no longer raise exceptions when we try to call the `diameter` or `volume` methods but return real values. Notice that we also can't get away with creating shapes without actual measurements: the `init` funciton now requires an 'edge' or 'radius' value.

::: {.panel-tabset}

#### Question

See if you can create a sphere of radius 10, and a cube of edge-length 10, thhen print out the diameter and volume of each.

```{pyodide-python}
s = sphere(10)
print(s.type())
print("\tVolume is: {0:5.2f}".format(s.volume()))
print("\tDiameter is: {0:5.2f}".format(s.diameter()))
print("")

c = cube(10)
print(c.type())
print("\tVolume is: {0:5.2f}".format(c.volume()))
print("\tDiameter is: {0:5.2f}".format(c.diameter()))
print("")
```

#### Answer

```{python}
s = sphere(10)
print(s.type())
print("\tVolume is: {0:5.2f}".format(s.volume()))
print("\tDiameter is: {0:5.2f}".format(s.diameter()))
print("")

c = cube(10)
print(c.type())
print("\tVolume is: {0:5.2f}".format(c.volume()))
print("\tDiameter is: {0:5.2f}".format(c.diameter()))
print("")
```

::: 

**Have a really good think about how this kind of behaviour is useful!**

### Test Your Understanding 

This is really hard stuff and you should *not* panic if you are struggling to work out what is going on. However, you *will* find it useful to grapple with this as best you can for as long as you can stand, because this kind of thing is fundamental to good coding and, as importantly, good debugging. So... based on the above examples of classes and methods, I have two challenges for you to implement in the code below:

1. Try implementing a *regular* pyramid class with a square base!
2. Try adding an `area` method that returns the surface area of each shape and then add that information to the output below.

```{pyodide-python}
from math import pi

class shape(object): # Inherit from base class 
    def __init__(self): 
        return 
    
    def volume(self):
        raise Exception("Unimplmented method error.")
    
    def diameter(self):
        raise Exception("Unimplmented method error.")
    
    def area(self):
        raise Exception("Unimplmented method error.")

    def type(self):
        return(self.shape_type)
    
class cube(shape): # Inherit from shape 
    def __init__(self, e):
        self.shape_type = 'Cube'
        self.edge = e
        return
    
    def volume(self):
        return self.edge**3
    
    def diameter(self):
        return (self.edge**2 + self.edge**2)**(1/2)
    
    def area...

class sphere(shape): # Inherit from shape 
    def __init__(self, r):
        self.shape_type = 'Sphere'
        self.radius = r
        return
    
    def volume(self):
        return (4/3) * pi * self.radius**3
    
    def diameter(self):
        return self.radius*2
    
    def area...

class pyramid(shape): # Inherit from shape
    
    has_mummies = True # This is for *all* regular pyramids
    
    def __init__(self, e):
        self.shape_type = 'Regular Pyramid'
        self.edge       = e
        return
    
    def volume...

    def diameter...

    def area...
```

How would you test these changes?

### Credits!

#### Contributors:
The following individuals have contributed to these teaching materials: 
- [James Millington](https://github.com/jamesdamillington)
- [Jon Reades](https://github.com/jreades)

#### License
The content and structure of this teaching project itself is licensed under the [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license](https://creativecommons.org/licenses/by-nc-sa/4.0/), and the contributing source code is licensed under [The MIT License](https://opensource.org/licenses/mit-license.php).

#### Acknowledgements:
Supported by the [Royal Geographical Society](https://www.rgs.org/HomePage.htm) (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.

#### Potential Dependencies:
This lesson may depend on the following libraries: None