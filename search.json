[
  {
    "objectID": "setup/no_install.html",
    "href": "setup/no_install.html",
    "title": "Running Python Remotely",
    "section": "",
    "text": "When we say running Python ‘remotely’, we mean running a version of Python and executing code somewhere besides your computer. There are many other ways to run Python, and that includes ‘locally’ on your computer. But this way is a great ‘try before you buy’ option, and in our Foundations of Spatial Data Science module you’ll see another way to run Python..\nAnyway, the following options will allow you to run Python code without installing anything at all on your computer. You will be running code ‘in the cloud’ and so will need an internet-connected device to write and run code. Also, note that in the cloud your code may not be saved if you log out or don’t run any code for a long period of time.",
    "crumbs": [
      "Python in the Cloud"
    ]
  },
  {
    "objectID": "setup/no_install.html#google-colab",
    "href": "setup/no_install.html#google-colab",
    "title": "Running Python Remotely",
    "section": "Google Colab",
    "text": "Google Colab\nGoogle’s Colaboratory will require a Google login, but offers a few benefits: you can save your code or search for and add other ‘notebooks’ (the way you will run code in Colab). As long as you don’t mind having a Google account, it’s probably the best way to get started.",
    "crumbs": [
      "Python in the Cloud"
    ]
  },
  {
    "objectID": "setup/no_install.html#binder",
    "href": "setup/no_install.html#binder",
    "title": "Running Python Remotely",
    "section": "Binder",
    "text": "Binder\nMyBinder works in a similar way to Colab, but no login is required and you can’t save your work except by downloading it. So you’ll also lose your notebooks when you log out/don’t run any code for a while.\n\n\n\n\n\n\nRecommendation\n\n\n\nWe’d recommend Google Colab on the basis that you can save your work.\n\n\n\nAction\nSince there’s nothing to install, here’s a short video showing the process for running code in Google Colab. We’ve assumed that you already have a Google account, if not you’ll need to set one up first:",
    "crumbs": [
      "Python in the Cloud"
    ]
  },
  {
    "objectID": "setup/index.html",
    "href": "setup/index.html",
    "title": "Getting Started",
    "section": "",
    "text": "We’ve tried to keep Code Camp as simple as possible so that you can get started as quickly as possible. We will present you with some options (and some recommendations), but it’s up to you to choose the option that feels most natural to you.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "setup/index.html#prerequisites",
    "href": "setup/index.html#prerequisites",
    "title": "Getting Started",
    "section": "Prerequisites",
    "text": "Prerequisites\nBeyond finding a way to run Python code (see below), there are no requirements or prerequisites for Code Camp. However, you might find it useful to complete the basic computer health check; that page also includes some recommendations if you are considering buying a new computer any time soon.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "setup/index.html#running-python",
    "href": "setup/index.html#running-python",
    "title": "Getting Started",
    "section": "Running Python",
    "text": "Running Python\nYou are welcome to run Code Camp code on your own computer (see: install options), but you should also look at the no install options that will allow you to learn (and run) Python anywhere and any time.",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "setup/env.html",
    "href": "setup/env.html",
    "title": "Programming Environment",
    "section": "",
    "text": "Programming Environment"
  },
  {
    "objectID": "lessons/Writing_Code.html",
    "href": "lessons/Writing_Code.html",
    "title": "A Matter of Style",
    "section": "",
    "text": "In this lesson we’ll cover a number of things that don’t fit anywhere else but which are essential to getting you on your way as a beginner programmer.",
    "crumbs": [
      "Writing Code"
    ]
  },
  {
    "objectID": "lessons/Writing_Code.html#style",
    "href": "lessons/Writing_Code.html#style",
    "title": "A Matter of Style",
    "section": "Style",
    "text": "Style\nAs with any other type of creative writing – make no mistake, writing code is a creative activity! – different people have different styles. Extending the language metaphor, different programming languages have different styles as well and you can often tell what programming language someone learned first (or best) by the way they write their code in any programming language. While it’s nice to work in the style that is considered ‘best’ in each language, what is more important is that you are consistent in how you write: that way, another person reading your code can get used to the way that you write and make better sense of what you’re trying to say.\n\nVariable Names\nSo here are some common styles for variable names:\n\n\n\n\n\n\n\n\nVariable Name\nLanguage\nRationale\n\n\n\n\nmy_variable\nPython, Perl\nUnderscores (“_”) make it easy to read ‘words’ in a variable name\n\n\nMyVariable\nJava\nMixed Caps makes for shorter variable names that are easier to type\n\n\nmy.variable\nR\nR allows full-stops in variable names, no other language does\n\n\n\n\n\nComments\nCommenting code that they’ve written is something that programmers normally hate doing, because it’s not doing work after all… until you have to try to understand what you’ve done and why two days or two months later. You’d be surprised how quickly your memory of why you did something one way, and not another, will fade and, with it, the risks that you were trying to avoid.\n\n\n\n\n\n\nTrue Story\n\n\n\nAt least one (maybe more?) of your teachers briefly took out the company web site on at least two occassions because of poor commenting practice: there was some sloppy-looking code whose function was profoundly unclear so your teacher thought “What was I thinking? I don’t need this!” … 20 seconds later: “Why is the web site down? Ooooooooooooooooooooh!” This is the kind of mistake not make more than once or twice, though very nearly every experienced programmer probably has done it.\n\n\nSo it doesn’t matter how clear your variable names are (e.g. url_to_get or do_not_do_this) you will eventually forget what is going on. Comments help you to avoid this, and they also allow you to write more concise, efficient code because your variable and function names don’t have to do all the heavy lifting of explanation as well!\nHow to comment well:\n\nThere are as many ways of commenting well as there are ways of writing code well – the point is to be clear and consistent.\nYou might think of adding a short comment on the end of a line of code if that line is doing something complex and not immediately obvious:\n\nimport random\nrandom.seed(123456789) # For reproducibility\n\nYou might think of adding a one-line or multi-line comment at the start of a block of code that is achieving something specific:\n\n# Create a new data frame to \n# hold the percentage values\n# and initialise it with only\n# the 'mnemonic' (i.e. GeoCode)\nd_pct = pd.concat(\n    [d[t]['mnemonic']], \n    axis=1, \n    keys=['mnemonic'])\n\nYou might think of using some formatting for a long section of code that forms a key stage of your analysis:\n\n##############################\n# This next section deals with\n# extracting data from the \n# London Data Store and tidying\n# up the values so that they work\n# with pandas.\n##############################\n\nFinally, you can also use multi-line strings as a kind of comment format:\n\n\"\"\"\n=========================================================\nExtract pd2-level data from the price paid medians data\n=========================================================\n\"\"\"\nMany programmers will mix all of these different styles together, but they will do so in a consistent way: the more complex the formatting and layout of the comment, the larger the block of code to which the comment applies.\n\n\nWhy Style Matters\nAs we said at the start, style matters because it makes your code intelligible to you, and to others. For professional programmers that is incredibly important because almost no one works on their own any more: applications are too complex for one programmer to get very far. So programmers need others to be able to read and interpret the code that they’ve written.\nAs well, you might be asked to (or want to) go back to make changes to some code that you wrote some time ago – if you’ve not commented your code or used a consistent style you’re much more likely to break things. You might have heard of the Facebook motto “Move fast and break things” – that doesn’t refer to Facebook’s web application, it refers to paradigms.\n\n\n\nJobs I’ve Been Fired From",
    "crumbs": [
      "Writing Code"
    ]
  },
  {
    "objectID": "lessons/Writing_Code.html#more-about-style",
    "href": "lessons/Writing_Code.html#more-about-style",
    "title": "A Matter of Style",
    "section": "More About Style",
    "text": "More About Style\nUnusually for a programming language, Python has a kind of style-guide called PEP 8. It even has its own web site! This is tied back to the fundamental insight that ‘code is read much more than it is written’. Which might seem counterintuitive, but we promise you that it’s true. PEP8 covers everything from how to indent your code to how to import libraries.\nThere’s also The Hitchiker’s Guide to Python which is modelled on Douglas Adams’ Hitchiker’s Guide to the Galaxy in tone and form. To be fair, it covers a lot more than just coding style.\nMore subtly, Python actually supports four fundamentally different coding paradigms (like being able to write comedies, tragedies, and dramas in general): imperative, functional, procedural, and object-oriented. We won’t get into that in Code Camp, but it’s helpful to know that these are available as you’ll definitely encounter them further into your journey.\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Writing Code"
    ]
  },
  {
    "objectID": "lessons/Thinking_Like_a_Computer.html",
    "href": "lessons/Thinking_Like_a_Computer.html",
    "title": "Thinking Like a Computer",
    "section": "",
    "text": "In order to understand how to program a computer, it helps to learn how to think like a computer. At least a little bit. A lot of what we do in programming strips back the veneer of point-and-click friendliness of OSX or Windows so that we can interact with the computer in ways that require much less human input. The world will seem a bit less friendly in the short term, but you will gain the ability to work much more quickly and powerfully with the computer through code."
  },
  {
    "objectID": "lessons/Thinking_Like_a_Computer.html#what-is-a-computer",
    "href": "lessons/Thinking_Like_a_Computer.html#what-is-a-computer",
    "title": "Thinking Like a Computer",
    "section": "What is a computer?",
    "text": "What is a computer?\nAt it’s most basic, a computer is a programmable device for performing calculations.\nThis is a kind of computer.\n\nAs is this.\n\nThere are a huge number of videos on YouTube and resources accessible from Google that delve into more detail than we possibly can here about what is happening inside your computer.\n\nWhat’s Going on Inside Your Computer?\nIf you’ve never really got to grips with what is happening inside a computer, then this TedED video would be a good way to get started because it helps to explain the basics of things like I/O and what actually happens when you click with the mouse on a button. In fact, you will see that we’ve used code to import the YouTube video in a way that requires me to do very little work and this is one of the strengths of programming: that someone else created the code to embed a YouTube video into a script (which is what this web page is) and all I need to do is know how to ask that code to find the video on the YouTube web site. Everything else happens automatically.\n\n\n\nHow a Computer Adds Numbers\nThis next video is a little more technical and we don’t really expect you to remember it, but it touches on a lot of really important concepts: binary numbers, Boolean logic, and how these basic building blocks are assembled into much more complex processes like adding numbers or, ultimately, manipulating data.\n\nThe really important thing to get from this last video is that computers are chaining together long sets of simple operations which always basically work out to 1 or 0, which is the same as True or False. This is Boolean logic and it is integral to computation and to data processing, but you should always keep in mind that a huge set of calculations are going on in your computer in an order specified by a set of rules: do ‘A’, then do ‘B’, then… When these rules become sufficiently complex (they become like long recipes!) they are called algorithms. And when they get so complicated that they are not easy to write down as a set of logical outputs, it’s often easier to express in a more human-readable form… which is why we have programming languages.\nBut remember: finding the average of a set of numbers involves an algorithm (which, in a digital comupter, is based on lots of logical operations involving 1s and 0s). And calculating the probability that the lecturer won’t show up to the first lecture also involves an algorithm, it’s just that it’s a much more complicated one unless you take matters into your own hands and arrange for an accident…"
  },
  {
    "objectID": "lessons/Thinking_Like_a_Computer.html#paths",
    "href": "lessons/Thinking_Like_a_Computer.html#paths",
    "title": "Thinking Like a Computer",
    "section": "Paths",
    "text": "Paths\nHave you ever thought about how and where files are stored on your computer? Probably not, unless you were very, very bored. Unfortunately, when you start programming you do need to learn a bit more about this – enough, at least, to tell Python where to find the file that you want it to read… though you can do much more than that!\nA few starting principles:\n\nDirectories (a.k.a. folders) and files all have a unique location somewhere on your hard drive.\nA directory (or folder) can contain directories and files. A simple file cannot contain a directory. Only special types of file such as a Zip archive can contain a folder.\nThe directory that sits at the bottom of the hierarchy (i.e. the one directory that is not in another directory) is known as the root directory.\nThe directory in which your settings and documents are saved (i.e. the stuff associated with your username) is known as the home directory.\nA file must be stored in a directory (there are no root files).\n\n\nPaths in the Finder\nWe’ll get to a video in a second, but on a Mac you can ‘view’ the path in the Finder simply by clicking on any finder window and typing Alt + Command + P (or selecting View &gt; Path from the menu bar). This will show the current path in a strip along the bottom of the finder window. Pay attention to the Path view in the movie below.\n\n\n\nPaths in a Terminal\nNow, sooner or later you are going to have to learn how to use the Terminal (a.k.a. Shell) because it will make certain tedious tasks go much, much faster. It is also by far the best way to install Python libraries or other ‘libraries’ that you need to develop your code. Learning to the use the Terminal is also going to help a lot in learning to fix subtle problems with your program (e.g. checking that you are reading the right data).\nSo here’s the same process of navigating from a directory called KCL Modules down to the 2017-18 Geocomputation Teaching directory as you just saw above, but using the Terminal:\n\nYou’ll notice that there were several seemingly cryptic commands – we’ll examine them in more detail below, but the important ones to note in this video are:\n\nls lists the contents of the current directory\ncd changes directory\n\nWe always say that programmers are lazy and this is a good example of that: why write list when we can write ls or change directory when we can write cd? You obviously need to learn what those bits of laziness mean, but they can help a lot in speeding up your code!\n\n\nNavigating Using the Terminal\nYou need to think of the terminal ‘prompt’ as having a ‘location in’ your computer: this works the same as clicking around through the Finder (or Windows Explorer) in that you have to move ‘down’ into sub-folders or ‘up’ into parent directories to see what’s available at that ‘level’ of the drive.\nSo in the movie you’ve just watched: 1. I started the movie while in a directory called KCL Teaching that (you see at the end) sits under /Users/my.blurred.username/Documents/. 2. I listed the files and directories in KCL Teaching using ls. 3. I then changed directory (using cd) into the directory called KCL Modules (and note that, because there’s a space in the directory name I had to write this as KCL\\ Modules… that’s because the Terminal couldn’t otherwise tell if we meant to move to a directory called KCL and then run a command called Modules; it’s a long story). 4. I then changed directory again into a directory called Undergraduate – if you’re keeping track this now means that we’re ‘in’ /Users/my.blurred.username/Documents/KCL\\ Teaching/KCL\\ Modules/Undergraduate/ 5. We carry on navigating down the hierarchy until we reach the 2017-18 teaching folder, at which point I print the working directory to show you where we’ve ended up and that it’s the same location as we reached using the Finder in the other video.\nFor people who are used to just saving a document pretty much anywhere on their computer (or iPad or iPhone) and having it accessible via Spotlight/Search functions this can take a lot of getting used to, but remember that in learning to program we’re gradually stripping away the bells and whistles that sit between you and what the computer’s actually doing.\n\n\nChaining\nIn and of itself the advantages of the Terminal might not be obvious, but we can also chain commands together to do several things in one go. You do not need to run the example below because it’s for illustrative purposes:\ncurl https://raw.githubusercontent.com/kingsgeocomp/geocomputation/master/CitiesWithWikipediaData.csv | head &gt; Header.csv\nNote: If you do want to run the code above then you will probably need to do some prep-work: * On a Mac you will need to run (from the Terminal!) the following command: xcode-select --install. This installs the curl utility along with a bunch of other useful applications. * On Windows you will probably need to run something like conda install posix but unless you want to donate a Windows machine I can’t test this. * Once that’s done you should type all of the above (or copy+paste) on to one new line and you should see the first line of this file printed to the Terminal.\nThis command might seem really cryptic but we can break this problem down into steps (as I did when trying to remember how to do it!):\n\ncurl – this is a tool (hopefully installed on your computer!) that allows you to download a file from the internet using only the Terminal.\nhead – this utility works with the top part of a file (tail starts working with the end of a file)\nWe ‘glue’ the output of curl together with head using | (known as a ‘pipe’) – this tells the computer to pass the output of curl to the input of head (i.e. we are chaining the commands together).\nhead alone returns the first ten lines of the file (but if we used head -5, for example, we would get the first five lines of the file - you can read more about the head command here).\nWe then direct the output of head to a file called Header.csv using the redirection command &gt;.\n\nSo this one line of code allows you to download a file, extract the first line of the file (so that we can see what the variables are!), and then write it to a file on the local computer. Assuming that you didn’t see any errors, you should now have a file called Header.csv in your home directory containing the first 10 lines of the file! Go check this in your home directory.\nThe point of this is that we are gaining in power at the cost of ‘ease of use’. Doing this same task without using code would require: navigating to the web page, clicking the link to download the file, opening the file in a text editor or Excel, selecting and copying the first line, and then opening a new file, pasting in the copied data, and saving the file with a name and location! Easier the first time round, but much more work in the long run!\n\n\nDelayed Gratification\nAs you will experience, learning to program involves a lot of delayed gratification: you will need to invest quite a bit of time in learning to crawl before you can walk, and even more time in learning to walk before you can run. A well-designed programming language like Python can make it a little bit easier to learn each step, but it still won’t make it easy.\nWe’ve said this before and we’ll say it again (and again, and again) that you must think of this as learning a language: at first very little will make sense and you won’t be able to say much more than ‘hello, my name is X’, but if you practice and really think about what you’re doing it will get easier and easier, and faster and faster, to program.\nLearning to navigate around your hard drive using the Terminal is a good case in point: why learn to do this when you could just dump all of your data into one directory and then never need to think about it again? Or navigate around by clicking on folders and files using the mouse?\nTwo reasons:\n\nBecause you will need to think logically and in an organised way about how you manage data when you start doing data analysis: you will almost never receive raw data that doesn’t require some work; so if you save your raw data and your processed data in the same directory how can you be sure you’ve loaded the right file? It’s much easier to have two folders – raw or source, and clean or output – and use Python to read in raw data from one directory and then write the processed data out to a different directory than it would be using Excel’s File &gt; Save As. That’s because the path is just text and you can easily work with it that way!\nBecause once you’ve learned how to use the path on your own computer, you can use the same techniques to navigate a web server or computer on the other side of the planet using URLs (which are just paths with some special ‘sauce’ that tell Python that the file isn’t on your computer).\n\nHere’s an example that does the same thing (and then some) as the Terminal code above, but using Python code instead:\nimport csv\nimport requests as r\n\nurl = 'http://bit.ly/2iIK9bA'\ndata = r.get(url)\ncontent = data.content.decode('utf-8').splitlines()\ncr = csv.reader(content)\n\nfor row in cr:\n    if row[3] != 'Population':\n        print(row[1] + \" has a population of \" + \"{:,}\".format(int(row[3])))\nJust to highlight what we’ve just done:\n\nWe retrieved a CSV file from somewhere on this planet using requests,\nWe ‘parsed’ it so that each row became something from which we could extract variables thanks to the magic of the csv library that we import,\nWe skip the first row because it’s a ‘header’ row and doesn’t contain data,\nWe print out the 2nd and 4th columns of the CSV file.\n\nYou can see what the source looked like here. And you’ll note that the URL looks exactly like the path that we saw when we used the Terminal to navigate between directories.\nSo if you grasp the concept in one context, you can apply it in others. That is scalability!\n\n\nSpecial Paths\nFinally, there are a few ‘special’ paths that you need to know about when using the Terminal or Python:\n\n/ is the root directory (so cd / would take you to the ‘root’ of the hard drive)\n~ is the home directory (this is a shortcut: it’s the same as typing cd /Users/myusername/)\n. means the current directory (this is avoid ambiguity: cd ./myusername/Documents would assume that in the current directory there is a sub-directory called Documents under myusername)\n.. means the next directory up (this is so that you don’t have to type out cd /Users/myusername/Settings just to go from Documents ‘over’ to Settings; instead, you can use cd ../Settings/.\n\nIn terms of terminology: any path that starts with a / is an absolute path because we are starting from the root directory; any path that starts with either .. or . is a relative path because it is starting from the current directory and is relative to where the Terminal or program ‘is’ now.\n\n\nWindows vs Everyone Else\nFor historical reasons, Windows has long been just a bit different from Unix/Linux/Mac in how paths are specified: on Windows it has long been the case that the path separator was \\, not / (: also isn’t allowed in file name on a Mac for historical reasons)!\nSo the following Unix/Mac path: /Users/myusername/Documents/\nOn a Windows machine would usually be: \\Users\\myusername\\Documents\\\nIf you remember that on a Unix/Mac we use \\ to manage things like spaces in a directory name then you can see how it gets pretty confusing and complicated pretty quickly when you start to program… But in Python we can cope with both of these situations and others using the os library (short for ‘operating system’); see the examples below!\nRemember: to turn code you need click in the code block below and then either type Ctrl+Enter or hit the ‘Run’ button on the menu bar above.\nimport os\n# Create a path by joining together the input arguments\nprint(os.path.join('Users','myusername','Documents'))\nprint(\" \")\n# Create an absolute path (starts with '/') and file names that contain spaces (we don't need to worry about spaces)\nprint(os.path.join('/','Users','myusername','Documents','My Work','Code Camp'))\nprint(\" \")\n# Create a relative path (starts with '..') and file names that contain spaces (we don't need to worry about spaces)\nprint(os.path.join('..','Documents','My Work','Code Camp'))\nprint(\" \")\n# 'Expand' the current user's home directory (~) into an absolute path\nprint(os.path.expanduser(\"~\"))\nprint(\" \")\n# 'Expand' the current directory path (.) into an absolute path\nprint(os.path.abspath('.'))\nprint(\" \")\nThat’s quite a lot of new content to get your head around, so you might want to spend some time exploring your own computer using the Terminal (Shell/Power Shell on Windows) to get the hang of how paths work. All you’ll need are: cd, ls, and pwd (or their Windows equivalents and here for more) to get started!"
  },
  {
    "objectID": "lessons/Thinking_Like_a_Computer.html#power-terminal-features",
    "href": "lessons/Thinking_Like_a_Computer.html#power-terminal-features",
    "title": "Thinking Like a Computer",
    "section": "Power Terminal Features",
    "text": "Power Terminal Features\nYou might recall that we previously said that all programmers are lazy, and understanding this laziness is the key to thinking that most Terminal (and Python) commands look like the result of monkeys hitting keys at random to being able to write code without constantly having to check Google. Let’s revisit some of the commeands we’ve just seen:\n\n\n\n\n\n\n\n\nCommand\nShort For…\nWhat It Does\n\n\n\n\nls\nlist\nList the contents of the directory I’m about to give you (‘ls ~’ lists the contents of your home directory; ‘ls ..’ lists the contents of the parent directory; etc.)\n\n\ncd\nchange directory\nMove to the path I’m about to give you (‘cd ~’ moves you to your home directory; ‘cd ..’ moves you to the parent directory; etc.)\n\n\npwd\nprint working directory\nShow the path of the current current directory (i.e. where am I now?)\n\n\nhead\nGet the head of a file\nPrint the first few lines of the specified file (e.g. head somefile.csv)\n\n\ntail\nGet the tail of a file\nPrint the last few lines of the specified file (e.g. tail -n 2 somefile.csv)\n\n\nclear\nClear the Terminal\nWhen the Terminal looks really busy with junk you don’t need just type clear\n\n\nexit\nExit the Terminal\nTo close an open Terminal window\n\n\nmv\nMove a directory or file\nLike dragging things in the Finder window (e.g. mv somefile.csv ../another_dir/ to move the file somefile.csv over to a directory named another_dir that is accessible from the parent directory of this one)\n\n\ncp\nCopy a directory or file\nLike dragging things in the Finder window (e.g. cp somefile.csv ../another_dir/ to make a copy of the file somefile.csv in a directory named another_dir that is accessible from the parent directory of this one)\n\n\n\nYou can see how all of these commands are basically abbreviations/mnemonics that make it easy for programmers to be lazy, but productive: less time typing == more time thinking/doing.\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None"
  },
  {
    "objectID": "lessons/The_Basics.html",
    "href": "lessons/The_Basics.html",
    "title": "The Basics",
    "section": "",
    "text": "In this first proper programming lesson we are going to use the Python interpreter to perform simple operations, like numeric calculations that you would normally do on a calculator and slightly more advanced operations on words. The interpreter is what reads your code and converts that into the binary instructions that the computer can understand – think of it as translator between you and the low-level components (operating system, file system, network, display, etc.) of your machine. The interpreter operates in the background and runs when you click the ‘Run’ button in your working envirnment (in future we’ll see how we can use the Python interpreter with scripts of many lines of code).\nAs we progress through the excercises we’ll encounter a range of new programming concepts. At this stage don’t worry too much about memorizing all of them; it is through repeated use and practice that they will eventually come naturally. Instead, here we want you to try to develop a sense of what is going on and keep the concepts in mind when reading the examples… but the really important thing is to try to apply them while doing the excercises.",
    "crumbs": [
      "The Basics"
    ]
  },
  {
    "objectID": "lessons/The_Basics.html#numbers",
    "href": "lessons/The_Basics.html#numbers",
    "title": "The Basics",
    "section": "Numbers",
    "text": "Numbers\nYou already saw a really simple example of calculating the mean in the first lesson, but let’s recall that you can easily use Python to like a calculator. Run the code already present in the code cells and make sure you understand the output. To do this, just click on the clipboard icon to copy the code and paste it in your working environment (either locally or online)\n\nBasic Arithmetic\n\nAddition and Subtraction\n3 - 2 + 10\n\n\nMultiplication and Division\n2 * 5\n10 / 5\n\n\nA challenge for you!\nDo you think the results of these two operations will be identical? If not, why? Decide what you think the answer is before running the code!\n# Operation 1:\nprint(4 * (2 - 8) + 2)\n# Operation 2:\nprint(4 * 2 - 8 + 2)\nThe results are different due to the order in which Python runs the operations. Anyway, remember the importance of parentheses in determining ‘precedence’ – which operations get done first.\nYou’ll see that the code above encompases each formula in print() command on each line; this simply allows us to print out the results of both calculations when the code runs. We’ll come back to this later.\n(3 * 2) - 10\nis not the same as:\n3 * (2 - 10)\n\n\n\nExponents\n\nPowers\nIf you use two asterisks instead of one then you’ll be performing an exponentiation:\n2 ** 4\nThat’s the same as:\n2 * 2 * 2 * 2\nSo 2**4 is how we get 2-to-the-power-of-4 (the same as multiplying 2 together 4 times). Hopefully this all kind of rings a bell even if you’ve not studied any maths in a while.\n\n\nRoots\nSo 2**4 is 2-to-the-power-of-4, but how do we get the square root (or fourth root) of a number? Right now, with what we’ve taught you so far, the best way is to remember that a square root is the same as an exponent of one-half. The fourth root is an exponent of one-quarter. Etc.\nprint(2**8)           # 2-to-the-8\nprint(256**(1.0/8.0)) # 256-to-the-one-eighth\n\n\nFloating Point numbers\nWarning: the following two equations are not always the same!\nprint(1/8)\nprint(1.0/8.0)\nMany programming languages (Python used to be one of them) treat whole numbers (1, 8) differently from floating point numbers (1.0, 8.000000000001). In those cases, we get the answer 0 to the first equation because when we use whole numbers in our calculations we got whole numbers back. So 1/8 is obviously not 0, but that’s the nearest whole number to 0.125! This is what we mean about computers doing exactly what you tell them: sometimes you want 1/8 to equal 0, other times 0.125, and the computer doesn’t know which answer you need unless you are very clear about what you want!\n\n\nModulo\nWhile we’re on the topic of division, how do you get the ‘remainder’ of 9/2 – the bit left over from the division? To get this there is a different symbol called the modulo operator which is a marked by a % sign. According in fact to the Python Documentation\n\nThe % (modulo) operator yields the remainder from the division of the first argument by the second.\n\nUsing the modulo operator will thus return the remainder:\nprint(9/2)\nprint(9%2)  \nJust to make this clear: 2 goes into 9 exactly 4 times and then you have 1 left over. So: (4 * 2) + 1 = 9.\nFor division which yields no remainder the operation will return a value of 0.\n8%2\n\n\nA challenge for you!\nWhat do you think will be the result of this operation? Work out your answer before running the code.\nprint( (2*3) ** 2 )\nThe answer is 36 as Python would do the multiplication inside the parenthesis first.\nNow what do you think this will give you? Again, work out your answer before running the code.\nprint( (2*3) ** 2 / (12 % 5) )\nIn the code below replace the question marks ??? with the appropriate code to produce a remainder of 6. You may need a calculator to help you. Run the code to check your answer (you can change your answer and run the code multiple times to get the right answer).\n(2+4) ** 2 % (120 / ???)\n\n\n\nOperator Precedence\nThe operators +, -, *, **, /, %, etc., and the parentheses are all evaluated (i.e. calculated) according to a set of rules that establish precedence, which is just a fancy way of saying: which calculations do we do first? There’s a full list here but since that also lists a lot of operators we’ve not yet encountered it’s easiest to summarise this in a table as follows:\n\\[\\begin{array}{cl} \\hline\nOperator & Description \\\\ \\hline\n(\\ldots) & Parentheses \\\\\n** & Exponentiation \\\\\n+x, -x & Positive, Negative \\\\\n*, /, \\% & Multiplication, Division, Remainder \\\\\n+, - & Addition, Subtraction \\\\ \\hline\n\\end{array}\\]\nSo parentheses trump everything else, then exponents (so 2**5.0/2 is not the same as 2**(5.0/2)), then positive/negative, and then multiplication/division before we finally get to addition and subtraction.\n\n\nDivision by Zero\nAlso pay attention when dividing by zero. Python won’t be able to compute any value and will return an error (which is sometimes also called an exception):\n(30 + 2 ) / 0\n\nA challenge for you!\nReplace the questions marks ??? in the following exercise with the appropriate code to purposufully cause a ZeroDivisionError exception (again, feel free to use a calculator and you can run the code multiple times).\n(1345 - 20 )  / ((- 3) ** 2  -  ???)\nNote: the error message is Python’s way of telling you what went wrong in the operation. We’ll get to these in more detail in a later lesson, but you’ll notice that Python always tries to tell you what it thinks went wrong and this is the starting point for all debugging. When something goes wrong in a program this error is like the first clue that puts you on the trail of the wrongdoer: sometimes one clue will lead to another, and another, and another… sometimes one clue is all you need.\nBut regardless, if you ignore these clues and just put up your hand and say “It doesn’t work!” then we’re not going to be very impressed. We expect you to be able to explain the problem to us before we will help you with it. More on this later.\n\n\n\nMore about Ints and Floats\nSo we’ve seen some examples above of maths with integers (i.e. “whole” numbers) and maths with floats (i.e. “decimal” numbers). Both can be positive and negative (e.g. -1 or -254.32672). Programmers, being lazy, often call integers ints because it’s faster and requires less typing.\nAny operation involving a mix of floats and integers will always yeld a float. For example, compare the output for the code below, but note how the resulting data type varies with the operation.\nprint(7 * 4)\nprint(7 * 4.0)\nprint(20 / 5)\nprint(20.0 / 5)\nprint(22 / 7)\nprint(22.0 / 7)\nprint( int(22.0/7) )\nNotice that last ticky bit: we’ll get to what int(...) means later, but if you remember that programmers are lazy then you might realise that it must be short for integer.\nprint(6 + 3)\nprint(6.0 + 3)\nThe reason for this is that Python is implicitly converting (sometimes called casting) the numbers between the two different data types. This conversion doesn’t happen with more complex bits of Python code, but for simple numbers Python tries to be helpful and save you the time and effort.\nNote: the integer-to-float conversion might seem a bit of a pedantic distinction, but imagine if you were programming a banking application: you would definitely pay attention to all those decimals!\n\n\nSome final maths questions…\nLet’s start with calculating the area of a triangle. Here’s the equation for the area of a triangle: \\[A = \\frac{l_{base} * l_{height}}{2}\\]\nSo lets work out for a triangle that has sides of length 10 and 20! If you type the maths correctly into the empty block below you should get the answer: 100\n(10 * 20)/2\nNow let’s work out the length of the hypotenuse of a right-angle triangle with the same side lengths as above: \\[l = \\sqrt{x^2 + y^2}\\]\nYou might remember this as the Pythagorean Theorem, and you should get an answer of about 22.4.\nLet’s move on to two last harder ones. Write a line of code to work out the area of a circle of radius 6. Here’s the formula: \\[A = \\pi r^2\\] and you should get something around 113.1 as the area. Use 3.1412 for the constant pi.\nNow work out the approximate radius of a sphere whose volume is 85. To do this, you’ll need to work backwards from the formula to calculate a volume… this might seem a little rough at first, but remembering how to rearrange a formula is really helpful for computational thinking!\nSo what do you have to do to this formula: \\[V = \\frac{4}{3} \\pi r^3\\]\nHere’s a hint to get you started: \\[ r^3 = \\frac{3}{4 \\pi} V \\]\nAlso: remember that you’re going to need to work with decimal numbers, not whole numbers and write your code accordingly! You should get a final answer of about 2.7.\nNote: there are a lot of different ways that you could write this formula as code and still get the right answer. Getting the right answer is 50% of the job. The remaining 50% is about doing it in a way that is elegant and easy to read… as get further into the term we’ll point out how elegance and legibility (also: commenting) matter.",
    "crumbs": [
      "The Basics"
    ]
  },
  {
    "objectID": "lessons/The_Basics.html#text",
    "href": "lessons/The_Basics.html#text",
    "title": "The Basics",
    "section": "Text",
    "text": "Text\nOK, so that’s the basics of numbers. What about text?\n\nHow long is a piece of string?\nIn most programming languages, text and words are called strings, which is really a fancy word to say a sequence of characters enclosed in single- or double-quotes (’ or “). This might seem like stating the bleedin’ obvious but this is a really, really important idea…\n\n\"235op\\!u\\$nlkgfd8 wp8ty fgdoy8p waklj ag9up0\"\n\nis a string. So is:\n\n\"If music be the food of love, play on; Give me excess of it, that, surfeiting, The appetite may sicken, and so die.\" (Twelfth Night, Act 1, Scene 1, 1–3)\n\nThe thing is that computers can’t automatically distinguish between Shakespeare and the work of a monkey hitting keys at random. As long as they are both marked out by single- or double-quotes then as far as the computer is concerned they are strings. So even to ask the computer how many words there in the first 3 lines of Twelfth Night means we have to ‘teach’ the computer what a word is by giving it rules to recognise the start or end of one, and even how to recognise the start and end of a line so that it can find the first three of them!\nprint(\"I'm a string of text!\")\nprint('Me too! *&($£(£_@~{}|?&lt;&gt;$)')\nNote: As before, we’ll be using the print() command on many lines of code; that is just a way to tell the Python interpreter to output somthing for us to see.\n\n\nSingle- or Double-Quotes?\nAlthough you can technically use either type of quote (' or \"), it is generally better to use double-quotes as a way to prevent errors if a single-quote is contained in your string:\nprint(\"I'm contained within double quotes. I'll be fine.\")\nprint('I'm sourrounded by single-quotes and I contain a single-quote so there may be trouble ahead...')\nNotice the helpful error message after running the code above? We’ll come back to how to read errors like these in more detail in the next lesson, but again Python is giving us hints about where we might have made a mistake.\n\n\nEscape Club\nWhat do you do if your string contains double-quotes and single-quotes? That’s where the ‘backslash’ (\\, a kind of ‘reverse division’ symbol) comes in handy. The backslash is how we ‘escape’ characters so that we can do ‘special’ things with them when they should normally do something else.\nIn the example below, the backslash in front of the apostrophe in I'm says “Don’t treat this as ‘normal’ single-quote that means the end of the string, treat it as a literal single-quote in the middle of a longer string marked out by single-quotes.\nprint('I\\'m using the backslash.')\nprint('I\\'m also using the backslash \\'\\\\\\' to escape the error normally caused by having single-quotes.')\nLet’s look at this a little more closely:\n\nThe first line is easy: the backslash in front of the single-quote in “I’m” allows us to use single-quotes to mark the start and end of the string. This is a silly example since we could also have written \"I'm using the backslash\" but you get the point.\nThe second line gets a little more complicated: you’ll see that we’ve now escaped three single-quotes (there are three occurences of \"\\'\"). But what’s happening with \"\\\\\"? Well, we need an extra backslash in front of the backslash so that the computer knows to print a literal backslash (we are ‘escaping’ the normal function of a backslash to escape the character immediately after it) instead of reading it as escaping the one in front of the single-quote.\n\nThat’s pretty weird, but just to show you what’s happening here it is without that extra backslash:\nprint('I\\'m also using the backslash \\'\\\\' to escape the error normally caused by having single-quotes.')\nIf you run the code above, you’ll see another error! Also notice that in the two lines of code, in the first the whole line is in one colour (meaning the computer can see that it’s all one string), but in the broken example right before this the text changes colour once we get to “to escape the error…” (meaning that the computer doesn’t see it all as one string).\nThe escape symbol crops up in a lot of other circumstances. For example, what if we wanted to tell Python that a string contains a newline (i.e. that the string is split across one or more lines, like our Shakespeare quote above should be)?\nRemember that programmers are always lazy when given half a chance and so they figured out that the easiest way to mark a newline was \\n. They used ‘n’ because it is fairly easy to remember that that means ‘newline’, and the backslash ‘escapes’ us from the simple world where an ‘n’ is the letter ‘n’ into the computer’s world where ‘n’ is ‘n’, but \\n is a newline:\nprint(\"If music be the food of love, play on;\\n Give me excess of it, that, surfeiting ,\\n The appetite may sicken, and so die.\")\nSee how that wraps the text on the \\n? Also note that the computer is printing exactly what we told it to do: I kept a space between the \\n and the start of the next line. If you squint, then you can see that lines 2 and 3 are indented by the width of one space character. There’s also an extra space after ‘surfeiting’ before the comma.\n\nWhy details matters\nWe say this a lot later too, but you might as well start learning this fact now: spaces in a string matter. To a computer \" A string\" and \"A string\" are not the same. Notice that there is a single space in front of the first ‘A’. As human beings we tend to just skip over that space (especially if it’s hard to see), but to a computer one string starts with ‘A’ and the other with ’ ’, so they are completely different.\nFurther, numbers and strings are not the interachangeable: \"2016\" is not the same as 2016. The first is a string that happens to contain the characters 2, 0, 1, and 6. The second is an integer number one larger than 2015.\nprint(\"2016\")\nprint(2016)\nAs you can see from running the code above, it’s a bit annoying that they look the same when we print them. But if you run the next lines of code (after thinking about what they might do), you’ll see how Python tries to be helpful with its errors:\n2015 + 1\n\"2015\" + 1\nSee how the first line of code prints 2016, but the second line of code (which tries to add together a string \"2015\" and the number 1) gives you an error about a problem with str (i.e. string) and int (i.e. integer) ‘concatentation’. More on concatenation in a minute.\n\n\nAdvanced laziness\nObviously, having a lot of \\n markers would be hard to read and a potential problem if you wanted to copy and paste the text into a different application. If you have a long block of text then you can avoid the whole issue by putting your text inside triple-quotes:\nprint(\"\"\"Hi there,\nthis time, \nI won't need those annoying newline characters.\nI also don't have problems with \"quotes\" or 'quotes'! \"\"\")\n\n\n\nAdding with strings (concatenation)\nAs with numbers, there are many things that you can do with strings. The simplest, however, is like addition (which is why it uses a +): when you add strings together you get a new, longer string that contains the characters of the original strings. This is usually called concatenation:\nprint(\"String1\" + \"String2\")\nprint(\"Hey, looks like\" + \" I'm \" + \"adding \"+ \"6\" +\" strings\" + \" together\")\nSo just like you would do to add two numbers together, we can add “String1” and “String2” together to get “String1String2”. But notice that the + operator doesn’t insert whitespace (i.e. a ’ ’ character) or anything else. It just sticks the two strings together exactly as they are.\nAnd just like we can add together a whole set of numbers, we can add together a whole set of strings as in the second line beginning “Hey, looks like…”\n\nA challenge for you!\nReplace the questions marks “???” in the following exercise with the appropriate code to make it work\nprint(\"This is code \" ??? \" camp's lesson is \"  ??? \" number \" + \"2.\")\n\n\n\nMultiplication\nIf you use the multiplication operator (*) on a string then you will multiply the string by the value of the multiplier.\nprint(\"I like Python a lot\" + \"!\" * 3)\nprint(\"Foo \" * 25)\n\nA challenge for you!\nWhat do you think will be the output of this code? (Work out your answer before running the code)\n20 * '5'\nNow, why do you think the next example below doesn’t work? (Read the error output if you’re not sure what’s going on.)\nprint(\"5\" * \"2\")",
    "crumbs": [
      "The Basics"
    ]
  },
  {
    "objectID": "lessons/The_Basics.html#variables",
    "href": "lessons/The_Basics.html#variables",
    "title": "The Basics",
    "section": "Variables",
    "text": "Variables\n\nSo far, everything we’ve done was about performing some kind of calculation on an integer, float, or string, and then showing the result. Given that a lot of programming doesn’t involve solving everything in one line of code, how do you save an answer so that you can (re)use it later? Let’s start with the first true programming concept: the variable.\nIf you have studied other programming languages before then the concept of the variable will be so familiar to you that it’s hard to remember even having to learn it! Some people think of a variable as “a box” that contains values that we want to store and retrieve in the future. For the novice, however, we think it might be more useful (though less technically correct) to think of a variable as the label of the box: the label is how we remember what we put in the box and where we put it.\n\nLet me try to explain: the computer stores ‘information’ in lots of places (in memory, on the hard drive, etc.), but it doesn’t use an addressing system that you or I would be able to understand. Memory addresses look something like 140302757291280 or '0x7f9ac8026510'. Those numbers tell the computer “Go look in this place for what to do when the mouse is clicked” or “Go look up in that place what to do when someone asks you to add together 1 and 5”. Variable names are like the human-readable postal addresses on the outside of the box that the computer uses to deliver/return contents (what we put inside the box).\nHere’s an example:\nresult = -2 * 10\nHmmmm, nothing printed out this time…\nThat’s because this time we gave Python a box with the label “result” into which to put the result of multiplying -2 and 10.\nresult = -2 * 10\nprint(\"I'm wasting space...\")\nprint(result)\nprint(type(result))\nYou can change the type of result to a float:\nresult = -2 * 10\n# Rewrite the existing variable\nresult = float(result) \nprint(result)\nprint(type(result))\nCheck it out! We assigned the outcome of -2 * 10 to a variable called result; then we did something else (printed out a string); and then we printed out the value of the variable and the computer remembered!\n\nCopying variables\nAnd variables can be copied using the = operator in the same way that the result of the maths operation above could be assigned to a new variable called result.\nmyFirstVariable = 1 * 5\nprint(myFirstVariable)\nmySecondVariable = myFirstVariable\nprint(mySecondVariable)\nCool, both variables have the same value! We assigned the result of 1 * 5 to a variable named myFirstVariable and then we assigned this value to a second variable called mySecondVariable.\nBut why is this called assignment (or, in plain English, copying)? Well what happens when I change thevalue stored in myFirstVariable? Will the second change as well?\nmyFirstVariable = 2\nprint(myFirstVariable)\nprint(mySecondVariable)\nWhoa! mySecondVariable didn’t change and still remembers what we assigned to in the first time. Basically, we took the myFirstVariable label and attached it to a different box.\nAs the Python Programming Wikibook explains, when you assign a variable you are associating a variable (a label) to an object (a box) which is stored somewhere in the memory. So when you assign a new value to a variables you are not overwriting the old values but simply “moving” the label from one box to another. By analogy, we peeled the myFirstVariable off of the box containing the value 5 and attached it to a box containing the value 2. But mySecondVariable was completely unaffected; it’s still attached to the box containing 5.\nThat’s why in Python variables have a name, a data-type and a value.\n\n\n\nName\nData Type\nValue\n\n\n\n\nmyFirstVariable\ninteger\n1\n\n\n\n\n\nA challenge for you!\nChange the code below by replacing the question marks ??? to make it work (i.e. not produce an error). So we want to:\n\nDefine a variable called “namee” and assign it a value, then\nDefine a variable called “cheers” that combines the value of “name” with the text “is awesome”\nPrint out cheers with the “print” command\n\n\nExerciseSolution\n\n\n??? = \"Peter\"\ncheers ??? name ??? \" is awesome!\"\nprint(cheers)\n\n\nname = \"Peter\"\ncheers = name + \" is awesome!\"\nprint(cheers)\n\n\n\n\n\nNaming variables\nHow do you choose a variable name (i.e. address label) in Python?\nHere’s a short list of the rules:\n\nnames may contain letters and/or numbers (e.g. myVar2)\nnames cannot begin with a number (e.g. 2myVar)\nnames may contain an underscore (“_”) (e.g. my_var_2)\nnames can be of any length (e.g. m2 or mySecondVariableIsReallyLong)\nyou cannot use Python keywords (e.g. print) or, rather, you can but you will start to get really strange problems in your code because you just changes what that variable/function does.\n\nSo this block of code below will run:\nfamous_geographer = \"Mercator\"\nprint(famous_geographer)\nBut this block of code will not:\n1st_geographic_projection =  \"\"\" Mercator's most famous Geographic Projection \nis a cylindrical map projection \nthat retains the ability\nto ability to represent lines of constant course (loxodromes)\"\"\"\n\nprint(1st_geographic_projection)\nNotice how the code has been coloured the text so that the ‘1’ in what we wanted to make the variable name stands out? Again, that’s Python trying to help us figure out what is going wrong, but it requires that you look closely at the output of the error message.\n\n\nA final warning\nRemember that we said the string \" Some text\" and the string \"Some text\" are different because the space at the start of the string changes everything? The same sort of strict checking is true for variable names: in short, Python is case-sensitive!\nThis means that this_var and This_var are two different variables and can refer to two different boxes:\nthis_var = \"Mercator\"\nThis_var = \"Galileo\"\n\nprint(this_var)\nprint(This_var)\nAs for many issues related to Python’s style, it is good practice to always refer to the offical PEP 8 – Style Guide for Python Code\nFor more examples of Python variables check out also OpenTechSchool’s intro to Python",
    "crumbs": [
      "The Basics"
    ]
  },
  {
    "objectID": "lessons/The_Basics.html#coding-excercises",
    "href": "lessons/The_Basics.html#coding-excercises",
    "title": "The Basics",
    "section": "Coding Excercises",
    "text": "Coding Excercises\nNow that we’ve had a taste of the fantastic Python programming world, let’s solidify our newly acquired skills with a final round of excercises.\n\nCode from scratch\n\nExercise 1\nLook at the following example (and its output):\nold_satellite = 'Sputnik 1'\nold_satellite_description = \" was the first artificial Earth satellite, launched from the Soviet Union on the 4th of October, 1957.\"\nprint(\"Здравствуйте! My name is \" + old_satellite)\nprint(old_satellite + old_satellite_description)\nSimilar to the example above, in the code cell below:\n\nExercisesSolution 1-ASolution 1-B\n\n\n'''\nExercise 1-A:\n* define a variable named `new_satellite` with value `landsat`\n* try to print its name\n\nExercise 1-B:\n* then try to concatenate its name with another variable description of your choice, \n* and print them.\n'''\n\n\nnew_satellite = 'Landsat'\nprint(new_satellite)\n\n\nprint(\"The new satellite is \" + new_satellite + \" and the old satellite is \" + old_satellite)\n\n\n\n\n\n\nSupported code\nReplace the questions marks ??? in the following exercise with the appropriate code to make it work\n\nExercise 2\nLandsat is a bit generic, the correct name is Landsat 8. How would you put together these two different Data Types? Remember what we’ve seen about casting? Edit the code below to make it work.\n\nExerciseSolution\n\n\npr???nt(\"Hello there \" + ???(new_satellite) )\n\n\nprint(\"Hello there \" + new_satellite + \" 8\" )\n\n\n\n\n\nExcercise 3\nAccording to its Wikipedia page Sputnik 1 was a 58 cm diameter polished metal sphere. If a cm = 0.393700787 inches what was its diameter in inches? Edit the code below to make it work.\n\nExerciseSolution\n\n\ndiameter_cm = 58\ncm2inches = 0.393700787\ndiameter_inches = diameter_cm ??? cm2inches\nprint(diameter_inches)\n\n\ndiameter_cm = 58\ncm2inches = 0.393700787\ndiameter_inches = diameter_cm * cm2inches\nprint(diameter_inches)\n\n\n\n\n\nExercise 4\nWat was its volume (in cubic cm)? # NOTE: the first line below we are “importing” the math module and assigning to a variable PI the value of pi (3.14…). Edit the code to make it work.\n\nExerciseSolution\n\n\nimport math\nPI = math.pi\n\nradius_cm = diameter_cm/2\nvolume =  (4/3) ??? PI ??? (radius_cm  ??? 3 )\nprint(volume)\n\n\nimport math\nPI = math.pi\n\nradius_cm = diameter_cm/2\nvolume =  (4/3) * PI * (radius_cm  ** 3 )\nprint(volume)\n\n\n\n\n\n\nBroken code\nHmmmm… something’s broken in the following line of code; can you spot the error(s)? Hint: remember what we said about different data types…\n\nExerciseSolution\n\n\nprint(new_satellite + \"has a Near Infrared (NI), \\\nwhich band captures light in the wavelength from \"+\n      770 +\n      \" to \" +\n      900 +\n      \" nanometers.\" )\n\n\n# The error message indicates a type error, as we can only concatenate string\n# The code should work by including \"\" to the numbers\n\nprint(new_satellite + \" has a Near Infrared (NI), \\\nwhich band captures light in the wavelength from \"+\n      \"770\" +\n      \" to \" +\n      \"900\" +\n      \" nanometers.\" )\n\n\n\n\n\nApplied Geo-example\nIn this excercise you’ll dip a toe in the wonderful world of web maps!\nWe are going to create a geographic marker (a pin on the map!) on top of OpenStreetMap (OSM) to visualise UCL CASA location.\nTo do so we’ll have to create a string representing a web URL (that’s the address you type in your browser when your surf the web) pointing to OSM website.\nNow, as you can see there are two variables containing CASA’s Longitute/Latitude coordinate position. You will need to use them within the variable CASA_position. Unfortunately they are in the wrong data type! Also, there might be something missing in the code.\nHINT: To convert (cast) a float to a string use the str() function (we haven’t talked about functions yet, but see if you can work it out). You’ll also need to think about how to concatenate strings?\nReplace the ??? in the code below to make it work.\n\nExerciseSolution\n\n\n# UCL CASA coordinates\n# What format are they in? Does it seem appropriate?\nlongitude = -0.13604732328636063\nlatitude = 51.52199740741031\n\n#cast the floats to strings\n??? = str(longitude)\nlat = str(???)\n\n# CASA marker\nCASA_position = \"https://www.openstreetmap.org/?mlat=\"+lat+\"8&mlon=\"+lon+\"#map=15/\"+lat+\"/\"+lon\n          \nprint(CASA_position)\n\n\n# UCL CASA coordinates\n# What format are they in? Does it seem appropriate?\nlongitude = -0.13604732328636063\nlatitude = 51.52199740741031\n\n#cast the floats to strings\nlon = str(longitude)\nlat = str(latitude)\n\n# CASA marker\nCASA_position = \"https://www.openstreetmap.org/?mlat=\"+lat+\"8&mlon=\"+lon+\"#map=15/\"+lat+\"/\"+lon\n          \nprint(CASA_position)\n\n\n\nClick on the output (or copy and paste it into your browser) and behold! You’ll be flying to CASA.\n\n\nFurther references:\nFor the most curious among you.\nOn this lesson’s topic: - StackOverflow: In Python, why can a function modify some arguments as perceived by the caller, but not others? - StackOverflow: Is it possible only to declare a variable without assigning any value in Python? - YouTube Video 1 - YouTube Video 2 (slightly longer)\nGeneral list or resources - Awesome list of resources - Python Docs - HitchHiker’s guide to Python - Learn Python the Hard Way - CodeAcademy\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "The Basics"
    ]
  },
  {
    "objectID": "lessons/Recap_1.html",
    "href": "lessons/Recap_1.html",
    "title": "First Checkpoint",
    "section": "",
    "text": "After a whirlwind introduction to Python you’ve made it to the first checkpoint. This isn’t about us checking up on you, but rather about you having a chance to check your own understanding of the foundational concepts covered so far. It is really easy to click through the coding examples, look at the answer quickly ‘just to check’, and then come away with the impression that you’ve understood what you are doing: “Yeah, yeah, I made a little mistake there but it’s fine because I was close enough…”\nWe know that’s the case because we’ve done it before you.\nThe challenge with coding is that, as the code becomes more complex, so do the issues. And if you haven’t learned to be careful with the basics and to fix them yourself then fixing the more subtle ‘mistakes’ will be that much harder. And you don’t want this to be any harder than it alreay is!\nHere’s where the ‘learning a language’ analogy breaks down a bit: because a fluent Spanish or Chinese speaker will often be able to make sense of what you’re trying to say as a learner, whereas the computer will just throw up its (metaphorical) hands through an exception. So learning the basics to the point where you can quickly find the simple errors really is important.",
    "crumbs": [
      "Recap 1"
    ]
  },
  {
    "objectID": "lessons/Recap_1.html#you-will-make-mistakes",
    "href": "lessons/Recap_1.html#you-will-make-mistakes",
    "title": "First Checkpoint",
    "section": "You Will Make Mistakes",
    "text": "You Will Make Mistakes\nSo everyone makes mistakes. We do it all the time because. Computers are essentially stupid and do exactly what we tell them, so even tiny mistakes (aVariable vs avariable, for example) can cause a piece of code or a program to fail to run.\n\n\n\n\n\n\nNote\n\n\n\nFun fact: the origin of the term bug was an actual bug (a moth) caught up in the mechanical relay of an early computer.\n\n\nBugs today are rarely of the insectile variety, and we now distinguish between three general types of error: 1. Syntax errors are when the ‘grammar’ rules of Python (known as the syntax) have been violated, making it impossible for the code to be parsed (i.e. understood by Python); 2. Logic errors have good syntax but there is an error in the order of statements or how they relate to one another; 3. Semantic errors make programs do something other than what the programmer intended. Actually, not all programmers would distinguish between #2 and #3, but we’ll make a case for these being different beasts below.\nHere’s a nice little video on this topic…\n\nWhen you first learn to code, syntax errors are the most common type of error because you are still learning the ‘rules’ of the language: indentation, the difference between = and ==, the need for a colon (:) on the end of some types of code… Python is fairly good at telling you what has caused a syntax error when it’s trivial and happens on a single line of code, but it will get quite a bit harder as your code becomes more complex!\nThe other types of errors are ones that you learn to spot over time through experience and developing skills. Learning to spot logic errors is one of those wonderful transferrable skills that you can also use in everyday life: by learning to think through challenges at a higher level and then address them iteratively you are likely to become both a more careful thinker (i.e. how should I go about solving this issue?), and a more flexible and resilient thinker (i.e. ok, so that didn’t work out as I expected, what should do I do now?).\n\nA good example of a logic error might be, ‘take a drink from your water bottle, put it in your backpack, walk to the library, and then put the top back on the bottle.’ Severance (2014, p.14)\n\nMany sites don’t even discuss the concept of a semantic error or treat it as the equivalent of a logical error, but we think it’s useful to set a bar beyond ‘basic’ logic errors: these arise from interactions between parts of a program, or between a programming language and the underlying computer/operating system. So the code can (and usually does) run successfully but the output is a long way from what you expected, or the failures that you’re seeing don’t make sense. We’d suggest that spotting semantic errors is a sign that you are well on your way to thinking computationally. In short, you understand why your code is triggering strange and unexpected behaviour even though it looks like it should do exactly what you intended.",
    "crumbs": [
      "Recap 1"
    ]
  },
  {
    "objectID": "lessons/Recap_1.html#foundations",
    "href": "lessons/Recap_1.html#foundations",
    "title": "First Checkpoint",
    "section": "1. Foundations",
    "text": "1. Foundations\n\n1.1 Variables and Assignment\nWithout running the code below, calculate what the values of x, y and z would be after all lines of code in the code block have been executed.\nx = 12\ny = 10\n\nz = x + y\nx = x + y\ny = z + y\nOnce you have calculated what you think x, y and z are, add print statements to the code above and run it to check. Make sure you understand the results you find.\n\n\n1.2 Operator Precedence\nWithout running the code below, calculate what the values of x, y and z would be after all lines of code in the code block have been executed.\nx = 1 + 2 * 3 / 4\ny = (1 + 2) * (3 / 4)\nz = 1 + 2 * (3 / 4)\n\nprint(x)\nprint(y)\nprint(z)\nOnce you have calculated what you think x, y and z are, add print statements to the code above and run it to check.\n\n\n1.3 Thinking Abstractly\nHint: to solve the following problems assume pi = 3.141592653589793\nGiven a sphere of diameter 12cm, calculate its volume (use Google to find the formula for this):\n\nExerciseSolution\n\n\n# Calculate the volume of a sphere of diameter 12cm\n\n\npi = 3.141592653589793\nr = 12 / 2\nvol = (4/3) * pi * (r**3)\nprint(vol)\n\n\n\nGiven a sphere of volume 14,137cm3 calculate its radius to the closest whole number (this will involve rearranging the formula and you may need to good how to find a cube root with python):\n\nExerciseSolution\n\n\n# Calculate the radius of a shpere of volume 14,137cm3\n# Approximate it to the closest whole number\n\n\nvol=14137\nr3 = vol / ((4/3) * pi)\nr = r3**(1/3)\nprint(round(r))",
    "crumbs": [
      "Recap 1"
    ]
  },
  {
    "objectID": "lessons/Recap_1.html#logic-part-1",
    "href": "lessons/Recap_1.html#logic-part-1",
    "title": "First Checkpoint",
    "section": "2. Logic (Part 1)",
    "text": "2. Logic (Part 1)\n\n2.1 Working with Conditions\nThis is not a loop question, we just want you to change the value of hours so that for each of the cases below (hours is set to 10, 2, 0 in turn) you get the right output.\nUsing the code below as a starting point, add two lines of code so that your output is as follows:\n\nCode prints Hours are greater than zero when hours=10\nCode prints Hours are greater than zero and Hours are less than 10 when hours=2\nCode prints Hours are less than 10 when hours=0\n\n\nExerciseSolution\n\n\nhours=10\n\nif hours &gt; 0:\n    print(\" \")\n\n\nhours=2\n\nif hours &gt; 0:\n    print(\"Hours are greater than zero\")\nif hours &lt; 10:\n    print(\"Hours are less than 10\")\n\n\n\n\n\n2.2 Flow Control\nWrite a code to execute the flow chart shown in the image below. You will need to assign values to a and b on lines 1 and 2 before using the flow chart to complete the code such that it produces the following:\n\nWhen a = 2 and b = 2 four lines of output will be written\nWhen a = 1 and b = 2 one line of output will be written\n\n\n\n\nFlow Chart of Logic\n\n\n\nExerciseSolution\n\n\n# Execute the flow chart shown in the image\n\n\na = 1\nb = 2\n\nx = a\nif x == b:\n    print(\"inside 1\")\n    print(\"inside 2\")\n    print(\"inside 3\")\nprint(\"after condition\")",
    "crumbs": [
      "Recap 1"
    ]
  },
  {
    "objectID": "lessons/Recap_1.html#logic-part-2",
    "href": "lessons/Recap_1.html#logic-part-2",
    "title": "First Checkpoint",
    "section": "3. Logic (Part 2)",
    "text": "3. Logic (Part 2)\n\n3.1 It’s All Quite Logical\nRead the code in the code cell below.\nx = 1\nif x &gt; 0 and x &lt; 5:\n    print(\"Joe\")\n    \nif x &gt; 0 or x &lt; 5:\n    print(\"Aled\")\n    \nif not(x &gt; 0):\n    print(\"Sarah\")\nAssume that the code executes for a given value of x and answer the following questions. Only test the code AFTER you have worked out the answers and typed them below.\n\nExerciseSolution\n\n\n'''\n1.  What names are name(s) are printed when `x = 5`?\n\n2.  What value(s) can `x` be when the names `Joe` and `Aled` are printed?\n\n3.  What name(s) are printed when `x = -1`?\n\n4.  Is there any value for which all three names will be printed?\n'''\n\n\n'''\n1. Aled\n\n2. 1, 2, 3, 4\n\n3. Aled, Sarah\n\n4. No\n'''\n\n\n\n\n\n3.2 Logic (Cont’d)\nStudy the flow chart below.\n\n\n\nLogic Flow Chart\n\n\nIn the cell below, use the for loop already set up to execute the alternative execution shown by the flow chart for values of x between 0 and 9. Check your code works. Also check you understand why the Modulo % allows us to find odd vs even numbers.\n\nExerciseSolution\n\n\nfor x in range(0,9):\n    # ... do something ...\n\n\nfor x in range(0,9):\n    print(x)\n    if(x%2 == 0):\n        print(\"x is even\")\n    else:\n        print(\"x is odd\")\n    print(x)\n\n\n\n\n\n3.3 Nested Conditions\nConditional statements can be nested within one another. That is, once one conditional statement has been evaluated others may subsequently be evaluated (or not) depending on the result of the initial conditional statement. The code below shows an example of this.\nif x != y:                                 #line 1\n    print(\"x is not equal to y\")\n    \n    if(x &gt; y):                             #line 4\n        print(\"x is greater than y\")\n        \n    else:                                  #line 7\n        print(\"x is less than y\")\n\nelse:\n    print(\"insert conclusion here\")\nNote how the indentation makes it easier to work out which ‘level’ the code is operating on. In the code above, lines 4 and 7 are at the same indentation meaning that both will be skipped if the initial condition (on line 1) is False.\nTo check you understand how the code above works: 1. Change insert conclusion here in the code above to a string that helps to explain the condition of x and y 2. Before running the code for x = 2 and y = 3, type below what line(s) will be output\nOutput for x = 2 and y = 3 is:\n\nExerciseSolution\n\n\n'''\n1. Change insert conclusion here in the code above to a string that helps to explain the condition of x and y\n\n2. Before running the code for x = 2 and y = 3, type below what line(s) will be output\n'''\n\n\nx = 2\ny = 3\nif x != y:                                 #line 1\n    print(\"x is not equal to y\")\n    \n    if(x &gt; y):                             #line 4\n        print(\"x is greater than y\")\n        \n    else:                                  #line 7\n        print(\"x is less than y\")\n\nelse:\n    print(\"x is equal to y\")",
    "crumbs": [
      "Recap 1"
    ]
  },
  {
    "objectID": "lessons/Recap_1.html#flow",
    "href": "lessons/Recap_1.html#flow",
    "title": "First Checkpoint",
    "section": "4. Flow",
    "text": "4. Flow\n\n4.1. Alterative Execution\nIn the code cell below, enter code that reports whether person A is older than person B or not. Whole numbers should be used as ages in years and these ages should be specified on the first two lines of code. Either “Person A is older than Person B” or “Person A is not older than Person B” should be reported to the user.\n\nExerciseSolution\n\n\n'''\nEnter code that reports whether person A is older than person B or not.\n'''\n\n\nageA = 20\nageB = 19\n\nif ageA &gt; ageB:\n    print(\"Person A is older than Person B\")\nelse:\n    print(\"Person A is not older than Person B\")\n\n\n\n\n\n4.2. Conditional Execution\nCopy your final code from the previous exercise into the code block below. Now build on this code to check if Person A is older than Person B, but also whether they are the same age. One of following three responses should be reported to the user:\n\n“Person A is older than Person B”\n“Person B is older than Person A”\n“Person A and Person B are the same age”\n\n\nExerciseSolution\n\n\n'''\nBuild on the previous code to check if Person A is older than Person B, but also whether they are the same age.\n'''\n\n\nageA = 20\nageB = 20\n\nif ageA &gt; ageB:\n    print(\"Person A is older than Person B\")\nelif ageA &lt; ageB:\n    print(\"Person B is older than Person A\")\nelse:\n    print(\"Person A and Person B are the same age\")\n\n\n\n\n\n4.3. Nested Execution\nCopy your final code from the previous exercise into the code block below. Build on this code with a nested execution structure to report if Person A is much younger, a little younger, the same age, a little older or much older than Person B. Write your code with a nested structure so that first it evaluates whether one person is older than the other, and then, if so, whether there is a large difference in age or a small difference in age. You should create a variable to specify what the number of years is that indicates a ‘large difference’ in age. One of the following five responses should be reported to the user:\n\n“Person A is much younger than Person B” [if age difference &gt; ‘large difference’]\n“Person A is a little younger than Person B” [if age difference &lt;= ‘large difference’]\n“Person A is the same age as Person B”\n“Person A is a little older than Person B” [if age difference &lt;= ‘large difference’]\n“Person A is a much older than Person B” [if age difference &gt; ‘large difference’]\n\n\nExerciseSolution\n\n\n'''\nBuild on the previous code with a nested execution structure to report if Person A is much younger, a little younger, the same age, a little older or much older than Person B.\n'''\n\n\nageA = 25\nageB = 30\nlargeD = 20\n\ndiff = ageA - ageB\n\nif diff &lt;= (largeD * -1):\n    print(\"Person A is much younger than Person B\")\nelif diff &lt; 0 and diff &gt; (largeD * -1):\n    print(\"Person A is a little younger than Person B\")\nelif diff == 0:\n    print(\"Person A is the same age as Person B\")\nelif diff &gt;= (largeD * 1):\n    print(\"Person A is much older than Person B\")\nelif diff &gt; 0 and diff &lt; (largeD * 1):  \n    print(\"Person A is a little older than Person B\")\n\n\n\n\n\n4.4 Managing Errors\nPython provides tools to ‘handle exceptions’ (i.e. manage errors). For example, read more at you can use combinations of try, except, else and finally keywords.\nRead the link above (and maybe Google yourself for some other examples) and use the information gained to handle an exception in which the user an age as a string rather than a integer (e.g. print “Invalid Input” if diff cannot be calculated):\n\nExerciseSolution\n\n\n'''\nUse the previous code and handle an exception in which the user an age as a string rather than a integer\n'''\n\n\nageA = \"five\"\nageB = 30\nlargeD = 20\n\ntry:\n    diff = ageA - ageB\nexcept:\n    print(\"Invalid Input\")\nelse: \n    if diff &lt;= (largeD * -1):\n        print(\"Person A is much younger than Person B\")\n    elif diff &lt; 0 and diff &gt; (largeD * -1):\n        print(\"Person A is a little younger than Person B\")\n    elif diff == 0:\n        print(\"Person A is the same age as Person B\")\n    elif diff &gt;= (largeD * 1):\n        print(\"Person A is much older than Person B\")\n    elif diff &gt; 0 and diff &lt; (largeD * 1):  \n        print(\"Person A is a little older than Person B\")\n    \n#read more at https://docs.python.org/3/tutorial/errors.html#handling-exceptions\n\n\n\n\n\n4.5 More Errors\nAnother way to trap errors is by ‘raising exceptions’. This requires using the raise keyword.\nRead the link above (and maybe Google yourself for some other examples) and use the information gained to raise an exception if the user provides a negative age (outputing “Invalid Age” in the error mmessage):\n\nExerciseSolution\n\n\n'''\nUse the previous code and raise an exception if the user provides a negative age (outputing “Invalid Age” in the error mmessage)\n'''\n\n\nageA = -1\nageB = 30\nlargeD = 20\n\ndiff = ageA - ageB\n\nif ageA &lt; 0 or ageB &lt; 0:\n    raise Exception(\"Invalid Age\") \nelse:    \n    if diff &lt;= (largeD * -1):\n        print(\"Person A is much younger than Person B\")\n    elif diff &lt; 0 and diff &gt; (largeD * -1):\n        print(\"Person A is a little younger than Person B\")\n    elif diff == 0:\n        print(\"Person A is the same age as Person B\")\n    elif diff &gt;= (largeD * 1):\n        print(\"Person A is much older than Person B\")\n    elif diff &gt; 0 and diff &lt; (largeD * 1):  \n        print(\"Person A is a little older than Person B\")\n        \n#read more at https://docs.python.org/3/tutorial/errors.html#raising-exceptions\n\n\n\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Recap 1"
    ]
  },
  {
    "objectID": "lessons/Loops.html",
    "href": "lessons/Loops.html",
    "title": "Loops and Iteration",
    "section": "",
    "text": "In this lesson we cover the concept of iteration, which is basically the idea of repeating the same set of instructions until a certain condition is met. This sequence of instructions is also called a loop.\nThis is an extremely important and powerful concept, as it allows us to finally automate tasks! Remember that a fundamental feature of programmers is that they are lazy (refresh Larry Wall’s “Three Virtues” that we saw in the first lesson!). The more you can delegate to the machine and avoid repeating boring and repetitive tasks yourself, the better!\nOf course, as the fantastic Randall Munroe likes to remind us, reality sometimes challenges this idea…",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#while-loops",
    "href": "lessons/Loops.html#while-loops",
    "title": "Loops and Iteration",
    "section": "WHILE Loops",
    "text": "WHILE Loops\nRemember if statements? When the Python interpreter finds an if statement in your code, it checks if the specified condition evalutes to True. If the condition is True then run the remainder of the indented code block following the if. The ‘true’ block of code is only run once.\nUsing the while statement, the ‘true’ block is run for as long as the condition evalutes to True. So if the statment continues to evaluation to True then the block of code is run again and again and again and again… and again until some stopping condition is reached (usually the while condition becomes False for ‘some reason’).\nThis allows us to finally do some interesting stuff in code:\ncounter = 1 # Starting condition: counter is at 1\n\nprint(\"The while loop is ready to begin.\")\n\nwhile counter &lt;= 10: # Test the condition\n    print(\"The counter is at: \" + str(counter))\n    counter += 1 # Increment the counter\n    \nprint(\"The while loop has ended.\")\nIf that looks confusing, don’t worry! It’s perfectly normal as that’s your first example of iteration.\nLet’s take a deeper look: - First, we defined a variable counter and we initialised it with a value of 1. - Then we used the while statement to check if the value of counter was less than or equal to 10. - Since that condition evaluated to True, we printed the value of counter and then added 1 to the counter. - The indendented block of code was then run again and again by Python until the while statement returned a False (this happened because the value of counter went all the way to 11). - After that Python simply continued to execute the code outside the while block (i.e. the last line of non-indented code)\nThe fundamental idea is thus: while this condition holds, repeat the instructions in the indented code block.\nMany beginner programmers get confused by the fact that the value of counter is increasing without the code advancing to the point where in prints out ‘The while loop has ended’. Remeber: we are starting the instruction from the beginning of the while block. So the first time that we hit it, counter has value of 1 because this is what we set it to outside of the while loop.\nBut the second time the while conditional is evaluted, counter has been incremented to 2 because the last line of the while block is counter += 1! So we increased its value while inside the while block. At the beginning of the third iteration it will have a value of 3, while at its end it will be incremented to 4. And so on…\nCAVEAT: pay attention to how you write your while loops! They can potentially run forever (for as long as the condition they are evaluating is True) maxing out your machine’s memory. For example:\n# DON'T RUN THIS!\n# or if you do, save everything first\n# and then be prepared to stop the code execution manually \n# (usually by pressing CTRL+D or Cmd+D)\n# in the terminale/console\nwhile True:\n    print(\"Forever Loop! Yeeee!\")\n\nA challenge for you!\nComplete the code below to run a while loop that prints only odd numbers under 10.\n\nExerciseSolution\n\n\notherCounter = 1\n\nwhile ??? &lt;= ???:\n    print(\"This is an odd number: \" + str(???))\n    otherCounter += 2\n\n\notherCounter = 1\n\nwhile otherCounter &lt;= 10:\n    print(\"This is an odd number: \" + str(otherCounter))\n    otherCounter += 2\n\n\n\nYou can also run while loops decrementally until they meet a certain condition (run the code block to see how):\nmyThirdCounter = 10\n\nwhile myThirdCounter &gt;= 0:\n    print(\"Decrementing counter: \" + str(myThirdCounter))\n    myThirdCounter -= 1",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#break-and-continue",
    "href": "lessons/Loops.html#break-and-continue",
    "title": "Loops and Iteration",
    "section": "Break and Continue",
    "text": "Break and Continue\nTo prematurely interrupt the execution of a while loop (before the while condition become false) you can use the break statement\nmyFourthCounter = 1\n\nwhile myFourthCounter &lt; 10:\n    \n    print(str(myFourthCounter))\n    myFourthCounter += 1\n    \n    if myFourthCounter == 5:\n        print(\"Time to escape this madness!\")\n        break\n\nNesting Conditions\nThat last example shows that you can ‘nest’ an if (if myFourthCounter) inside of a while loop – this approach allows us to add much more complex logic to our code than we could before. Here’s an example, but see if you can figure out what it will print out (and how) before you run the code block!\ni=0\nwhile True:\n    i += 1\n\n    if i % 2 != 0:\n        print( str(i) + \" is odd.\")\n        if i == 9:\n            print(\"\\t i is 9\")\n        else:\n            print(\"\\t i is not 9\")\n    else:\n        print( str(i) + \" is even.\")\n        if i % 4 == 0:\n            print(\"\\t i is divisible by 4.\")\n        elif i == 8:\n            print(\"\\t i is 8\")\n\n    if i == 21:\n        break\nIn terms of explanation:\n\nPython is going to keep running the code (while True) until it is told to stop by a break (which happens at i == 21). In fact, if you remove the break then you will crash jupyter because the computer will print out every even number to infinity (which the computer can’t handle because it runs out of memory).\n‘Inside’ the while loop there is a main if/else block: if i % 2 != 0:     ... do something with odd numbers... else:     ... do something else with even numbers...\n‘Inside’ the odd numbers section we now have a second if/else block: if i == 9:     ... do something if the odd number is 9... else:     ... do something else if the odd number is not 9...\nAnd it’s a similar story in the even numbers section: if i % 4 == 0:     ... do something if the even number is divisible by 4... elif i == 8     ... do something else if the even number is 8... We’ll not give you the answer to how to print out WOOT in place of 7 below, but at this point you all the clues you need. It’s the concept that is the hard part and following what’s going on when you start to nest conditions inside of conditions. We can talk this through more if anyone needs more help getting to grips with this!",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#i-and-j-in-loops",
    "href": "lessons/Loops.html#i-and-j-in-loops",
    "title": "Loops and Iteration",
    "section": "i and j in Loops",
    "text": "i and j in Loops\nIf you want to skip to the next iteration then you can continue the exection of a while loop using the continue statement. In the following example we are going to skip all even numbers and print WOOT! if we hit a lucky 7 (or any number divisible by 7). We’ll break out of the loop after hitting the 21st iteration.\nOne other thing to notice is that we’ve switched from looooong counter names like myFourthCounter to i. A common programming trick (which is well-known and so actually increases the legibility of your code to others) is to use i and j for counters in loops (you can add k if you ever need a third level loop).\n# So use i and j as counters because \n# this is a stylistic convention and \n# helps you to to write more concise code\n# (and be constructively lazy).\n\ni = 0\n\nwhile True:\n    \n    i += 1\n    \n    if i % 2 != 0:\n        print(i)\n    else:\n        continue\n    \n    if i % 7 == 0:\n        print(\"WOOT!\")\n    \n    if i == 25:\n        break\n    \nprint(\"Done!\")\nHow would you change the code above so that it printed only the odd number or ‘WOOT!’, but not both? In other words, change the code so that it prints:\n1 3 5 WOOT! 9 11 13 15 17 19 WOOT!\n\nExerciseSolution\n\n\n'''\nChange the code above so that it printed _only_ the odd number _or_ 'WOOT!'\n'''\n\n\ni = 0\n\nwhile True:\n    \n    i += 1\n    \n    if i % 2 != 0:\n        if i % 7 == 0:\n            print(\"WOOT!\")\n        else:\n            print(i)\n    \n    if i == 25:\n        break\n    \nprint(\"Done!\")\n\n\n\n\nA challenge for you!\nNow, replace the ??? in the code below and use it to print only even numbers less than 22.\n\nExerciseSolution\n\n\ni = 0\nwhile True:\n    i += 1\n    \n    if i % 2 != 0:\n        continue\n    if i == ???:\n        break\n    print(???)\n\nprint(\"Done!\")\n\n\ni = 0\nwhile True:\n    i += 1\n    \n    if i % 2 != 0:\n        continue\n    if i == 22:\n        break\n    print(i)\n\nprint(\"Done!\")",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#iterating-over-a-list",
    "href": "lessons/Loops.html#iterating-over-a-list",
    "title": "Loops and Iteration",
    "section": "Iterating over a List",
    "text": "Iterating over a List\nWhat you just saw with the while statement is a way of iterating: a way of repeating a certain set of instruction until a given condition is met. We can use to our advantage not only to print stuff, but also to ‘iterate over’ the elements in a list:\n# remember our friends, the british computer scientists?\nbritishCompList = [\"babbage\", \"lovelace\", \"turing\"]\n\n# this is the condition python is going to check against\nstoppingCondition = len(britishCompList)\n\ncounter = 1\nwhile counter &lt; stoppingCondition:\n    print(britishCompList[counter] + \" was a british computer scientist\")\n    # don't forget to increment the counter!!!\n    counter += 1\nWow, lot of stuff in that chunk of code, eh? Well, once again, take a deep breath and go through it line by line.\nThe important bits are: - notice that this time we used the len of britishCompList as stopping condition, instead of specifying ourselves a number. - we accessed the items in the list with a regular index, like we have done in the past. The difference is that this time the index was the variable counter, as at each iteration counter assumes the value of 0, 1 … until the stopping condition is met. This is equivalent to writing :\nprint(britishCompList[0])  # on the first iteration\nprint(britishCompList[1])  # on the second iteration\n\nA challenge for you!\nBut wait a second… what about the great Babbage? Why isn’t his name displayed? Certainly not because he’s not worth a mention! Can you spot the reason why the iteration skipped him? Can you fix the code to include Babbage?\nHint: check (using print) the values of counter and britishCompList. What is the condition we are asking Python to use?\n\nExerciseSolution\n\n\n# fix the code to include Babbage\n\n\ncounter = 0 # To include Babbage, we need to start counter from 0\nwhile counter &lt; len(britishCompList):\n    print(britishCompList[counter] + \" was a british computer scientist\")\n    # don't forget to increment the counter!!!\n    counter += 1",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#other-overlooked-computers",
    "href": "lessons/Loops.html#other-overlooked-computers",
    "title": "Loops and Iteration",
    "section": "Other Overlooked Computers",
    "text": "Other Overlooked Computers\nIf you think that being skipped over in the loop above was tough for old Babbage, then perhaps you might be interested to hear about the history of the NASA ‘computers’ who helped put a man on the moon and are only getting a film made about them in 2016.\n\n\nA challenge for you!\nComplete the following code:\n\nExerciseSolution\n\n\ncounter = ???\nnonBritishProgrammers = [\"Torvald\", \"Knuth\", \"Swartz\"]\nstoppingCondition = len(???)\n\nwhile counter &lt; stoppingCondition :\n    print(\"This is a computer genius too: \" + nonBritishProgrammers[counter])\n    #  always remember to increment the counter!!!\n    counter += 1\n\n\ncounter = 0\nnonBritishProgrammers = [\"Torvald\", \"Knuth\", \"Swartz\"]\nstoppingCondition = len(nonBritishProgrammers)\n\nwhile counter &lt; stoppingCondition :\n    print(\"This is a computer genius too: \" + nonBritishProgrammers[counter])\n    #  always remember to increment the counter!!!\n    counter += 1\n\n\n\nCAVEAT: An important condition to remember when iterating over a list is thus that lists are zero-indexed! If if you start you counter from 1 you will certainly miss the first item in the list (which has an index of 0).\nBut watch out! There’s more:\n\n\nAnother challenge for you!\nCan you guess why I needed to subtract -1 to the list’s len?\n[Hint: Check the condition again. Is the same as before? (Run the code below before continuing)]\ncounter = 0\nnonBritishProgrammers = [\"Torvald\", \"Knuth\", \"Swartz\"]\nstoppingCondition = len(nonBritishProgrammers) -1\n\nwhile counter &lt;= stoppingCondition :\n    print(\"These are geniuses too! \" + nonBritishProgrammers[counter])\n    #  always remember to increment the counter!!!\n    counter +=1\nWe can see that from the code above the while condition is slightly different: while counter &lt; stoppingCondition : versus while counter &lt;= stoppingCondition Because len counts the number of elements, if we use &lt;= we will access the variable counter at each iteration counter with the value of 0, 1, 2, 3. This would result in an indexError since we only have three variables.",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#for-loop",
    "href": "lessons/Loops.html#for-loop",
    "title": "Loops and Iteration",
    "section": "FOR Loop",
    "text": "FOR Loop\nWe’ve just seen that we can use a while loop to iterate over a list, but it’s kind of clunky and inelegant. All those counters and things makes for a lot of extra typing, especially when you consider how terse Python’s language usually is! Surely there must be another way?\nYou guessed right, my friend! Let me introduce you to the 'for ... in:' statement:\nfor programmer in britishCompList:\n    print(programmer)\nAs you can see, the for loop statement is much more concise: you simply tell Python to repeat a certain instruction (print the list item in this example) for EVERY ITEM in A SEQUENCE. The sequence here is the list of British computer scientists britishCompList created in the code block above.\nNow, Python will stop automatically when the sequence is finished without you having to worry about specifying the stopping condition (which you have to do when using a while loop).\nNotice also that we didn’t have to initialise the counter value!\nSo, the biggest difference between a while and a for loop is thus not merely stylistic, it’s also conceptual!\nLet’s recap with another example:\n# WHILE LOOP\nwhileCounter = 0\nmyList = [0,1,2,3,4]\nstoppingCondition = len(myList)\nwhile whileCounter &lt; stoppingCondition:\n    print(\"Element number: \" + str(myList[whileCounter]))\n    whileCounter +=1 \n# FOR LOOP\nfor element in myList:\n     print(\"Element number: \" + str(element))\nSIDENOTE: See how the value of myList[whileCounter] and that of element in the two loops are the same? That’s because Python is doing the indexing job for you behind the scenes.\n\nA challenge for you!\nPrint only the odd numbers in the list. HINT: remember the modulo operator?\n\nExerciseSolution\n\n\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nfor n in numbers:\n    if (???):\n        print(n)\n\n\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nfor n in numbers:\n    if (n % 2 != 0):\n        print(n)\n\n\n\nNow, as we are lazy programmers, let’s repeat the above example combining the range function with a for loop. It will save us the hassle of typing all those numbers!\nfor i in range(10):\n    if (i % 2 != 0):\n        print(i)\nCool, we have seen how to iterate over a list, but what about a dictionary? Well, if you remember we said that you might think of a dictionary as a kind of list where each element isn’t indexed by an integer, but rather by a unique identifier (key).\nHence, as with lists where we iterate over the indexes, with dictionaries we are going to iterate over the keys!\nprogrammers = {\n    \"Charles\": \"Babbage\",\n    \"Ada\": \"Lovelace\",\n    \"Alan\":\"Turing\"\n}\nfor k in programmers:\n    print(k)\nNOTE: I’ve used the variable k. This is simply an arbitrary word that I’ve choosen and not some kind of special variable. You could have used anyRandomNameForWhatMatters.\nWhat if you want to retrieve the values? In that case you should use not only two variables, (the first for the keys and the second for the values) but also invoke the method items() on the dictionary, like so:\nfor k,v in programmers.items():\n    print(\"this is the value: \\'\" + v + \"\\' for the key: \\'\" + k +\"\\'\")\n\n\nA Challenge for you!\nIterate over the GeoJSON marker and print its “properties”.\n\nExerciseSolution\n\n\nKCL_marker = {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"marker-color\": \"#7e7e7e\",\n        \"marker-size\": \"medium\",\n        \"marker-symbol\": \"\",\n        \"name\": \"KCL\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -0.11630058288574219,\n          51.51135999349117\n        ]\n      }\n    }\nfor ???,v in KCL_marker[\"???\"].items():\n    print(\"KCL_marker has a property: '\" + ??? + \"' for the key: \" + k)\n\n\nKCL_marker = {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"marker-color\": \"#7e7e7e\",\n        \"marker-size\": \"medium\",\n        \"marker-symbol\": \"\",\n        \"name\": \"KCL\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          -0.11630058288574219,\n          51.51135999349117\n        ]\n      }\n    }\nfor k,v in KCL_marker[\"properties\"].items():\n    print(\"KCL_marker has a property: '\" + v + \"' for the key: \" + k)\n\n\n\nVery good! Let’s summarise some facts about loops:\n\nyou can increment the counter\nbut also decrement it (effectively counting down!)\nthe increment doesn’t need to be 1 every the time (you can increment by 2, 50, whatever..)\ndon’t forget to to indent the block of code after the colon!",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Loops.html#applied-geo-example",
    "href": "lessons/Loops.html#applied-geo-example",
    "title": "Loops and Iteration",
    "section": "Applied Geo-example",
    "text": "Applied Geo-example\nThe geo-excercise I’ll give you this time is a real-world problem that you might face one day in your career as geospatial professionals. In principle it is possible to work out everything below based on what we’ve done up to this point; however, this exercise is also hard since it is a big jump conceptually that mixes up the ideas in a new way. So if you can’t quite make out the answer don’t worry, just try to understand the concepts above and see if you can solve parts of the problem.\nLet’s say a colleague of yours used a GPS to survey at regular intervals the dispersion of pollutants in a patch of terrain. Unfortunately, after a good start they forgot to record all the remaining points!\nBut that’s not a terrible problem, as the transect has a perfect West-East orientation and direction, and all the points are spaced by a the same value dX (short for ‘delta-X’, the change in X between each point) of 0.03 degrees longitude, i.e.:\n(0.0102, 51.592)—–(X+dX,Y)—–(X+2dX,Y)—–(X+3dX,Y)—&gt;\nUsing what we’ve seen so far, try to create a GeoJSON featureCollection of points. To give you a head start, I’ve provided some scaffolding.\nHINT: Being the skilled geographer that you are, you immediately realise that actually you’ve got all the coordinates that you need, even for the missing points (i.e. the latitude values will remain constant…)\n# define a new featureCollection: it is basically a very fancy dictionary\n# to which we are going to add new 'features' (which are points on a map\n# but represented as *data* by a dictionary). We need to add one feature\n# at a time when building our transect...\n# initial coordinate list\ninit_coords = [-0.0200, 51.592]\n# dX delta \ndx  = 0.03\ngap = 0\n\ntransect = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": init_coords\n      }\n    }\n# -------------------------------------------------------------\n#  here is where the remaining three points have to be\n#  added using *code* and not manually\n# -------------------------------------------------------------\n  ]\n}\n\n# new empty list where I'm going to put all the new dictionaries \n# a.k.a. all the new points\nthree_new_points = []\n\nfor i in range(3):\n#   define a new point \n    new_point = {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": []\n\n      }\n    }\n    \n    # increment the longitude\n    gap += dx\n    \n    # create a new list with the updated coordinates\n    new_coordinates = [init_coords[0] + gap, init_coords[1]]\n\n    # assign the new coordinates to the coordinates key\n    # in the new point dictionary\n    new_point[\"geometry\"][\"coordinates\"] = new_coordinates\n    new_point[\"properties\"][\"name\"] = \"Point \" + str(i+1)\n\n    # append the new point dictionary to the list of new points\n    three_new_points.append(new_point)\n\n\n# append to the feature list the three new points\n# that we created\ntransect[\"features\"].extend(three_new_points)\nprint(transect)\nThis output on its own makes very little sense, but it’s actually a real world data structure called JSON. Below we use a handy library (that you might not yet have installed on your computer) to turn that JSON into something easier to read, and then we’ll see how you can use it!\nimport json \nparsed = json.loads(str(transect).replace(\"\\'\", \"\\\"\"))\nprint(json.dumps(parsed, indent=4))\nfrom ipyleaflet import Map, GeoJSON, basemaps\nm = Map(center = (51.51, -0.10), zoom=10, min_zoom=5, max_zoom=20, \n   basemap=basemaps.OpenTopoMap)\ngeo = GeoJSON(data=parsed)\nm.add_layer(geo)\nm\n\nFurther references:\nGeneral list of resources - Awesome list of resources - Python Docs - HitchHiker’s guide to Python - Python for Informatics - Learn Python the Hard Way - Lists - Learn Python the Hard Way - Dictionaries - CodeAcademy\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Loops"
    ]
  },
  {
    "objectID": "lessons/Introduction.html",
    "href": "lessons/Introduction.html",
    "title": "Doing Urban Spatial Science",
    "section": "",
    "text": "In Why the Future of Geography is Cheap we suggested that:\nFor additional perspective there’s:\nBut if you’d prefer to watch a video instead, then here’s CARTO’s take on Spatial Data Science:\nA more individual take that explains how GIS and Spatial Data Science differ comes from Matt Forrest:",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "lessons/Introduction.html#so-what-is-urban-spatial-science",
    "href": "lessons/Introduction.html#so-what-is-urban-spatial-science",
    "title": "Doing Urban Spatial Science",
    "section": "So What is Urban Spatial Science?",
    "text": "So What is Urban Spatial Science?\nIt is for the reasons introduced above that terms like ‘geocomputation’, ‘spatial data science’, ‘geographic data science’ and, of course, ‘urban spatial science’ are back in vogue. After a period in which GIS tools like ArcMap, ArcPro, MapInfo and (our favourite) QGIS were front-and-centre for many people with an interest in spatial data, the increased availability of data and code has created a need for a ‘new’ (or old, depending on your view) type of spatial analyst able to reason through code while remaining critically aware of the limitations of the data.\nDifferent universities have settled on different terms, partly because of philosophical differences, and partly because of branding. In practice, there’s a lot of a overlap, though some authors would draw a strong distinction between, say, Geographic Data Science and Geographic Information Science.\nUltimately, we settled on Urban Spatial Science because we wanted to capture the (Spatial) Data Science aspect, the Urban focus, and the Science of Cities elements that we include in our taught modules. Plus, no one else was using that name (yet). Code Camp, however, focusses on the practical basics of programming in Python in order to support your development as someone able to investigate cities and their structures through code and data.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "lessons/Exceptions.html",
    "href": "lessons/Exceptions.html",
    "title": "Dealing with Errors",
    "section": "",
    "text": "We all make mistakes. Even very experienced programmers. So this lesson is all about learning to deal with the (unavoidable) errors that you will encounter when programming in Ptyhon. Indeed, most programmers spend most of their day dealing with errors of one sort or another: sometimes they are easy to solve (e.g. you mis-typed a variable name), other times they are very, very hard (e.g. you are writing a cloud computing platform and have to deal with competition for resources). Either way, learning how to find, diagnose, and resolve errors, as well as how to minimize their consequences, is thus a crucial skill for programmers.\nNote: This lesson is heavily based on the official Python Documentation about Errors and Exceptions. Check it out for further examples.",
    "crumbs": [
      "Exceptions"
    ]
  },
  {
    "objectID": "lessons/Exceptions.html#things-go-wrong",
    "href": "lessons/Exceptions.html#things-go-wrong",
    "title": "Dealing with Errors",
    "section": "Things Go Wrong",
    "text": "Things Go Wrong\nIn the preceding lessons we’ve already pointed out a few simple errors and made some suggestions about how to read them, but as you have seen when there’s something wrong Python stops whatever it’s doing and prints out an error message.\nRun the next code cell and examine the error message:\nprint \"Ouch!\"\nThe error gives you a helpful clue as to what is going wrong: it’s something to do with the Syntax.\n  File \"&lt;ipython-input-1-cecc6fbed5db&gt;\", line 1\n    print \"Ouch!\"\n                ^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Ouch!\")?\nIn this case it even tells you what the most likely resolution is: print(\"Ouch!\")! Not all errors are as easy to diagnose, but by carefully reviewing the output it is often possible to get a pretty good sense of where things are going wrong.\nAnd here’s another example:\n45 / 0\nThis error also gives you a helpful clue: You can’t divide by zero!\nZeroDivisionError                         Traceback (most recent call last)\n&lt;ipython-input-3-8cff53279792&gt; in &lt;module&gt;\n----&gt; 1 45 / 0\n\nZeroDivisionError: division by zero\nAs you can see, depending on what just broke we see different error messages from the Python interpreter. Although it’s not the most crucial distinction, there are roughly two main kinds of errors: Syntax Errors and Exceptions.\n\nSyntax Errors\nA Syntax Error is likely to the be the most frequent error you encounter when you’re getting started. Syntax errors occur when the Python interpreter has trouble parsing your code. In other words, it can read what you’ve typed but it doesn’t quite make sense.\nIt’s a bit like when someone who doesn’t speak your language fluently makes a mistake that to you seems funny, but to them is quite natural because they’re extrapolating from what they know in a different language. Many English-speakers who are ‘embarassed’ by their level of Spanish are also apparently happy to inform Spanish-speakers that they are pregnant (‘embarazada’)! Or perhaps you think that the opposite of ‘regardless’ is ‘irregardless’? These are natural mistakes, but they are ‘errors’ nonetheless. It’s just that human beings – being smart – can figure out what you meant, while computers – being almost irredeemably stupid – cannot.\n\nA simple typo\nIn the first example for instance, the error consists in a print command missing its parentheses (needed in Python3, if not Python 2):\n  File \"&lt;ipython-input-4-cecc6fbed5db&gt;\", line 1\n    print \"Ouch!\"\n                ^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Ouch!\")?\nLet’s read the error message together, from top-to-bottom:\n\nFirst, the interpreter prints out the file name and the line number where it thinks the error can be found. In our simple case that’s not a big deal since we only have one line of code anyway, but if you had thousands of lines of code spread across dozens of separate files this could be a life-saver!\nIn addition, Python also prints the actual line where it threw up its hands and said “I can’t read this!”\nIt has even added a little ‘caret’ (‸) to try to point out where on that line it thinks the error is. We wouldn’t recommend that you study only that bit of code (it pointed to ‘Ouch!’ after all, not to print) but it’s not a bad place to start.\nLastly, Python prints out very clearly that the error is something to do with the syntax and in this case even suggests the solution! (because this is a common error when people move from writing code for Python2 vs Python 3).\n\nIt really can’t get better than this. Let’s try to see if you can fix some bits of broken code by reading the errors and spotting the place where I’ve made some mistakes.\n\n\nA Challenge for You!\nRun the next two code cells and use the error messages to see if you can fix the following problems:\nHint: remember to look at what is happening before the caret!\n\nExerciseSolution\n\n\nprojection=\"Cassini-Soldner\" \nprint(\"The \"  projection + \" projection preserves distances along the central meridian.\")\n\n\nprojection=\"Cassini-Soldner\" \nprint(\"The \" + projection + \" projection preserves distances along the central meridian.\")\n\n\n\nHint: which line is the error on?\n\nExerciseSolution\n\n\nother_projection \"Mollweide\"\nprint(\"In the \" + other_projection + \" projection, meridians are ellipses.\")\n\n\nother_projection=\"Mollweide\"\nprint(\"In the \" + other_projection + \" projection, meridians are ellipses.\")\n\n\n\n\n\n\nExceptions\nEven if your code is syntatically exemplary (i.e. it’s all perfectly written before you hit ‘run’), errors might still occur for a wide variety of reasons: your computer is freaking out, you’re not online, you haven’t defined a variable yet… Obviously, these aren’t syntax errors because your code would ordinarly work fine, it’s just that something is missing and we think this is… exceptional.\nTo help you find out which of the problems you’ve just hit, Python has the concept of exceptions and a huge taxonomy of specific errors (here’s a list). That way, when something exceptional happens we know whether to restart the computer, check the Internet connection, or look for the place where the variable was supposedly defined.\nLet’s start by considering these two exception examples (run each and examine the error message returned):\nprint(\"london has an approx. popoulation of \"+ popn + \" million people \")\nWhat do you think is going on here?\nAnd this one:\nprint()\"london has an approx. popoulation of\" + 8.5 + \"million people \")\nWe’ve seen this error before: remember that programmers don’t like to write ‘string’ when they could write ‘str’, and that ‘float’ means ‘floating point number’.\nAnd now let’s reconsider the “Division By Zero” Exception:\n4 / 0\nFirst of all we can see that every exception displays a specific message in the last line which gives you useful information about what just went wrong. That’s because exceptions are different from plain old syntax errors: they come in different types which are recognized by Python and printed accordingly. In our three examples above the Exceptions were: NameError, TypeErrorand ZeroDivisionError. These are the exception types.\nAs with the syntax errors, the remaining part of the error message gives us useful pointers to how to go about fixing the code:\n\nOnce again Python starts with the location. This time though, it doesn’t immediately point to a specific line, rather it shows the stack trace (more about this, and even more) of the operations being performed by your code when the exception occurred.\nLuckily, there’s even an arrow (---&gt;) pointing at the line of code where Python realised there was a problem.\n\n&lt;ipython-input-10-8cad47596d70&gt; in &lt;module&gt;()\n----&gt; 1 print(\"london has an approx. popoulation of \"+ popn + \" million people \")\n\nNameError: name 'popn' is not defined\nIn the NameError example, the problem is that we have not yet created a variable named popn (we would need something like popn = \"8.5\" on the line prior to printing; the 8.5 in \"\" to avoid the TypeError).\nDo you see how these are different from Syntax Errors conceptually and that they require you to do something different? Indeed, Exceptions are clearly specified in the language for two main reasons:\n\nIt allows you to restrict the range of possibilities regarding what went wrong, allowing faster and easier debugging.\n\nBecause exceptions are “named” errors, they’re easier for the programmer to “catch” when the code is running.\n\nIn other words, you can’t know in advance whether your application will always have Internet access, so rather than just having your program ‘blow up’ or say “Can’t run, sorry!”, wouldn’t it be better if it printed a helpful message to the user saying “Hey, I don’t seem to be online. Can you check the network connection?” So in Python, one part of the application can ‘throw’ an exception (“Hey, I’m not online”) when it tries to download a file and then it’s up to the application to catch that problem and print a warning to the user.\nIf you see any of the following commands TRY/EXCEPT/FINALLY then that means a programmer is trying to limit the damage that could be caused by an exception.\n\n\nA Challenge for You!\nRun the next code cells and use the error messages to see if you can fix the following problems:\nHint: Think about the type of data that london_population holds and how to convert a number into a string with the appropriate function\n\nExerciseSolution\n\n\nlondon_population = 8600000\nprint(\"London's population is \" + london_population)\n\n\nlondon_population = 8600000\nprint(\"London's population is \" + str(london_population))\n\n\n\nNow we want to know the ration between London and Paris populations:\n\nDefine a new variable with the amount of people living in the French capital (2.2 million)\nThink about the data type the result of the calculation needs to be\n\n\nExerciseSolution\n\n\nprint(\"The ratio of london_population to paris_population is \" + london_population / paris_population)\n\n\nlondon_population = 8600000\nparis_population = 2200000\n\nprint(\"The ratio of london_population to paris_population is \" + str(london_population / paris_population))",
    "crumbs": [
      "Exceptions"
    ]
  },
  {
    "objectID": "lessons/Exceptions.html#how-to-read-errors",
    "href": "lessons/Exceptions.html#how-to-read-errors",
    "title": "Dealing with Errors",
    "section": "How to Read Errors",
    "text": "How to Read Errors\nHere’s a “rule of thumb” list of actions to take when Python throws an error at you:\n\nDon’t Panic!\nTake a deep breath and READ CAREFULLY the error message.\nAsk yourself: is it a Syntax Error or an Exception?\nIn both cases: where’s the faulty line?\nFor Syntax Errors: where’s the little caret character ( ‸ ) pointing at?\nFor Exceptions: what kind of exception is that? Read the Official Docs and try to make sense of it\nNo, really. Don’t Panic!",
    "crumbs": [
      "Exceptions"
    ]
  },
  {
    "objectID": "lessons/Exceptions.html#finding-help",
    "href": "lessons/Exceptions.html#finding-help",
    "title": "Dealing with Errors",
    "section": "Finding Help",
    "text": "Finding Help\nWe can’t say this enough: Google is your friend! And we really mean it.\nIf learning how to interpret error messages is the first step to fixing broken code, the second one (before you think about asking for help) is doing your ‘homework’. And since you’re not the first students to learn to program, there’s a pretty good chance that someone has had your problem – or one very similar to it – before.\nThe largest website/community/forum online that programmers from all over the world use on a daily basis is Stack Overflow. The name itself is something of an inside joke referring to a bad situation in programming:\n\nWhen a program attempts to use more space than is available on the call stack… the stack is said to overflow, typically resulting in a program crash. (source: Wikipedia )\n\nAs the name implies, it’s often the first resource that you want to consult if your program is not behaving as expected. For a quick overview of it’s features refer directly to StackOverflow’s intro section.\nOften, you don’t even need to ask your question at all because the answer is already somewhere on Stack Overflow. So search the web site carefully for relevant answers before posting your question. But if, after carefully checking the site, you still can’t find an answer to your problem then it’s time to start thinking about asking your own question.\nIn order to maximise your chances of success (and to avoid flooding the board with unclear and repetitive questions) read thoroughly the How do I ask a good question? section and always refer to the Help Center.\nThis is not meant to put you off in any way, but rather to let you know the appropriate ‘netiquette’ and accetable code of conduct. Through ‘SO’, you have access to thousands of knowledgeable programmers, so it’s important to make sure you’re not wasting their time (or they can be quite short with you).",
    "crumbs": [
      "Exceptions"
    ]
  },
  {
    "objectID": "lessons/Exceptions.html#code-applied-geo-example",
    "href": "lessons/Exceptions.html#code-applied-geo-example",
    "title": "Dealing with Errors",
    "section": "Code (Applied Geo-example)",
    "text": "Code (Applied Geo-example)\nIf in the previous lessons we didn’t even leave the U.K., this time we’ll fly to the far away magical Null Island.\nFrom its official government’s touristic office:\n\nThe Republic of Null Island\nLIKE NO PLACE ON EARTH!\n\nIn order to get there, you’ll have to first solve the exercise, avoiding those pesky Syntax Errors and *Exceptions”!\n\nExerciseSolution\n\n\nlongitude = ???(0.0)\nlatitude ??? str(0.0)\n\n# Null Island marker\nnull_island = \"https://www.openstreetmap.org/?mlat=\"+???+\"&mlon=\"+longitude+\"#map=5/\"+latitude+\"/\"+longitude\n          \nprnt null_island\n\n\nlongitude = str(0.0)\nlatitude = str(0.0)\n\n# Null_island marker\nnull_island = \"https://www.openstreetmap.org/?mlat=\"+latitude+\"&mlon=\"+longitude+\"#map=5/\"+latitude+\"/\"+longitude\n\nprint(null_island)\n\n\n\nTo conclude: remember to always read the output, and try to understand what Python is telling you. You might learn a lot from these simple messages!\n\nFurther references:\nFor more information on the island you might watch this short video.\nIf you are on Twitter, don’t forget to follow the Null Island buoy!\nGeneral list or resources - Awesome list of resources - Python Docs - HitchHiker’s guide to Python - Learn Python the Hard Way - CodeAcademy\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Exceptions"
    ]
  },
  {
    "objectID": "lessons/Classes.html",
    "href": "lessons/Classes.html",
    "title": "Inheritance and Classes",
    "section": "",
    "text": "The concept of inheritance is something we’ve held off from mentioning until now, but it’s definitely worth understanding if you are serious about learning how to code. In effect, it’s common to find Python classes that import a ‘base class’ and then extend it with additional functionality.\nThe two main libraries for working with small to medium-sized data sets in Python are pandas and geopandas. The creators of pandas were’t interested in spatial data analysis, so they didn’t implement any functionality for reading/writing/analysing spatial data. Along come some developers who are interested in spatial problems and geopandas as born! But they don’t want to have to copy+paste lots of code from pandas just to implement the same functionality that pandas already provides (calculating the mean, reading an Excel file, handling time series data…) so they extend pandas by importing it and adding only the new bits that are needed to deal with geography: in this way ‘pandas’ learns how to work with geodata…",
    "crumbs": [
      "Classes"
    ]
  },
  {
    "objectID": "lessons/Classes.html#the-tree-of-life",
    "href": "lessons/Classes.html#the-tree-of-life",
    "title": "Inheritance and Classes",
    "section": "The ‘Tree of Life’",
    "text": "The ‘Tree of Life’\nHere’s a simple way to think about inheritance: think of the ‘evolutionary trees’ you might have seen charting the evolution of organisms over time. At the bottom of the tree is the single-celled animal, and at the other end are humans, whales, wildebeest, etc. We all inherit some basic functionality from that original, simple cell.\nIn between us and that primitive, however, are a whole series of branches: different bits of the tree evolved in different directions and developed different ‘functionality’. Some of us have bones. Some have cartilege. Some are vegetarian, and some are carnivorous. And so on.\nWhen you get to the primates we all share certain common ‘features’ (binocular vision, grasping hands, etc.), but we are still more similar to gorillas than we are to macaques. So gorillas and humans extend the primitive ‘primate functionality’ with some bonus features (bigger brains, greater strength, etc.) that are useful, while macaques extend it with a slightly different set of features (tails, etc.).\n\n\n\nTree of Life",
    "crumbs": [
      "Classes"
    ]
  },
  {
    "objectID": "lessons/Classes.html#the-tree-of-classes",
    "href": "lessons/Classes.html#the-tree-of-classes",
    "title": "Inheritance and Classes",
    "section": "The ‘Tree of Classes’",
    "text": "The ‘Tree of Classes’\nInheritance in code works in a similar way: all Python classes (lists, pandas, plots, etc.) inherit their most basic functionality from a single primitive ‘object’ class that itself does very little except to provide a template for what an object should look like. As you move along the inheritance tree you will find more and more complex objects with increasingly advanced features: GeoPandas inherits from Pandas, Bokeh and Seaborn inherit from matplotlib, etc.\nI can’t find an image of Python base class inheritance, but I’ve found an equally useful example of how anything can be modelled using this ‘family tree’ approach… consider the following:\n\n\n\nVehicle Inheritance\n\n\nIf we were trying to implement a vehicle registration scheme in Python, we would want to start with the most basic category of all: vehicle. The vehicle class itself might not do much, but it gives us a template for all vehicles (e.g. it must be registered, it must have a unique license number, etc.). We then extend the functionality of this ‘base class’ with three intermediate classes: two-wheeled vehicles, cars, and trucks. These, in turn, lead to eight actual vehicle types. These might have additional functionality: a bus might need have a passenger capacity associated with it, while a convertible might need to be hard- or soft-top. All of this could be expressed in Python as:\nclass vehicle(object): # Inherit from base class\n    def __init__(self):\n        ... do something ...\n\nclass car(vehicle): # Inherit from vehicle\n    def __init__(self):\n        ... do other stuff ...\n\nclass sedan(car): # Inherit from car\n    def __init__(self):\n        ... do more stuff ...\nThis way, when we create a new sedan, it automatically ‘knows’ about vehicles and cars, and can make use of functions like set_unique_id(&lt;identification&gt;) even if that function is only specified in the base vehicle class! The thing to remember is that programmers are lazy: if they can avoid reinventing the wheel, they will. Object-Oriented Programming using inheritance is a good example of constructive laziness: it saves us having to constantly copy and paste code (for registering a new vehicle or reading in a CSV file) from one class to the next since we can just import it and extend it!\n\nAdvantages of Inheritance #1\nThis also means that we are less likely to make mistakes: if we want to update our vehicle registration scheme then we don’t need to update lots of functions all over the place, we just update the base class and all inheriting classes automatically gain the update because they are making use of the base class’ function.\nSo if pandas is updated with a new ‘load a zip file’ feature then geopandas automatically benefits from it! The only thing that doesn’t gain that benefit immediately is our ability to make use of specifically geographical data because pandas doesn’t know about that type of data, only ‘normal’ tabular data.\n\n\nAdvantages of Inheritance #2\nInheritance also means that you can always use an instance of a ‘more evolved’ class in place of one of its ancestors: simplifying things a bit, a sedan can automatically do anything that a car can do and, by extension, anything that a vehicle can do.\nSimilarly, since geopandas inherits from pandas if you need to use a geopandas object as if it’s a pandas object then that will work! So everything you learned last term for pandas can still be used in geopandas. Kind of cool, right?\n\n\nDesigning for Inheritance\nFinally, looking back at our example above: what about unicycles? Or tracked vehicles like a tank? This is where design comes into the picture: when we’re planning out a family tree for our work we need to be careful about what goes where. And there isn’t always a single right answer: perhaps we should distinguish between pedal-powered and motor-powered (in which case unicycles, bicycles and tricycles all belong in the same family)? Or perhaps we need to distinguish between wheeled and tracked (in which case we’re missing a pair of classes [wheeled, tracked] between ‘vehicle’ and ‘two-wheel, car, truck’)? These choices are tremendously important but often very hard to get right.\nOK, that’s enough programming theory, let’s see this in action…",
    "crumbs": [
      "Classes"
    ]
  },
  {
    "objectID": "lessons/Classes.html#classes",
    "href": "lessons/Classes.html#classes",
    "title": "Inheritance and Classes",
    "section": "Classes",
    "text": "Classes\nHere is a simple demonstration of how classes work and why they’re useful in programming. Building on last week’s ‘volume of a sphere’ question here’s how we’d create and work with a ‘shape’ class in Python:\nfrom math import pi\n\nclass shape(object): # Inherit from base class \n    def __init__(self): \n        return \n    \n    def volume(self):\n        raise Exception(\"Unimplmented method error.\")\n    \n    def diameter(self):\n        raise Exception(\"Unimplmented method error.\")\n        \n    def type(self):\n        return(self.shape_type)\n    \nclass cube(shape): # Inherit from shape \n    def __init__(self, e):\n        self.shape_type = 'Cube'\n        self.edge = e\n        return\n    \n    def volume(self):\n        return self.edge**3\n    \n    def diameter(self):\n        return (self.edge**2 + self.edge**2)**(1/2)\n\nclass sphere(shape): # Inherit from shape \n    def __init__(self, r):\n        self.shape_type = 'Sphere'\n        self.radius = r\n        return\n    \n    def volume(self):\n        return (4/3) * pi * self.radius**3\n    \n    def diameter(self):\n        return self.radius*2\n\nclass pyramid(shape): # Inherit from shape\n    \n    has_mummies = True # This is for *all* regular pyramids\n    \n    def __init__(self, e):\n        self.shape_type = 'Regular Pyramid'\n        self.edge   = e\n        return  \n\nclass t_pyramid(pyramid): # Inherit from pyramid (this is a triangular pyramid)\n    \n    has_mummies = False # This is for all triangular pyramids\n    \n    def __init__(self, e):\n        self.shape_type = 'Triangular Pyramid'\n        self.edge   = e\n        return \n    \n    def area(self):\n        return (3**(1/2)/4) * self.edge**2\n    \n    def height(self):\n        # https://www.youtube.com/watch?v=ivF3ndmkMsE\n        return (6**(1/2) * self.edge/3)\n    \n    def volume(self):\n        #  V = 1/3 * A * h\n        return (1/3) * self.area() * self.height()\n\ns = sphere(10)\nprint(s.type())\nprint(\"\\tVolume is: {0:5.2f}\".format(s.volume()))\nprint(\"\\tDiameter is: {0:5.2f}\".format(s.diameter()))\nprint(\"\")\n\nc = cube(10)\nprint(c.type())\nprint(\"\\tVolume is: {0:5.2f}\".format(c.volume()))\nprint(\"\\tDiameter is: {0:5.2f}\".format(c.diameter()))\nprint(\"\")\n\np = t_pyramid(10)\nprint(p.type())\nprint(\"\\tVolume is: {0:5.2f}\".format(p.volume()))\nif p.has_mummies is True:\n    print(\"\\tMummies? Aaaaaaaaagh!\")\nelse:\n    print(\"\\tPhew, no mummies!\")\n\n# The error here is deliberate -- note that diameter\n# is not implemented in either triangular pyramid, pyramid, \n# or shape, only for spheres.\nprint(\"\\tDiameter is: {0:5.2f}\".format(p.diameter()))\nprint(\"\")\nHave a really good think about how this kind of behaviour is useful!\n\nTest Your Understanding\nBased on the above examples of classes and methods, I have two challenges for you to implement in the code below:\n\nTry fully-implementing the regular pyramid class with a square base that we skipped over above!\nTry adding an area method that returns the surface area of each shape and then add that information to the output below.\n\nfrom math import pi\n\nclass shape(object): # Inherit from base class \n    def __init__(self): \n        return \n    \n    def volume(self):\n        raise Exception(\"Unimplmented method error.\")\n    \n    def diameter(self):\n        raise Exception(\"Unimplmented method error.\")\n        \n    def type(self):\n        return(self.shape_type)\n    \nclass cube(shape): # Inherit from shape \n    def __init__(self, e):\n        self.shape_type = 'Cube'\n        self.edge = e\n        return\n    \n    def volume(self):\n        return self.edge**3\n    \n    def diameter(self):\n        return (self.edge**2 + self.edge**2)**(1/2)\n\nclass sphere(shape): # Inherit from shape \n    def __init__(self, r):\n        self.shape_type = 'Sphere'\n        self.radius = r\n        return\n    \n    def volume(self):\n        return (4/3) * pi * self.radius**3\n    \n    def diameter(self):\n        return self.radius*2\n\nclass pyramid(shape): # Inherit from shape\n    \n    has_mummies = True # This is for *all* regular pyramids\n    \n    def __init__(self, e):\n        self.shape_type = 'Regular Pyramid'\n        self.edge   = e\n        return  \n\nclass t_pyramid(pyramid): # Inherit from pyramid (this is a triangular pyramid)\n    \n    has_mummies = False # This is for all triangular pyramids\n    \n    def __init__(self, e):\n        self.shape_type = 'Triangular Pyramid'\n        self.edge   = e\n        return \n    \n    def area(self):\n        return (3**(1/2)/4) * self.edge**2\n    \n    def height(self):\n        # https://www.youtube.com/watch?v=ivF3ndmkMsE\n        return (6**(1/2) * self.edge/3)\n    \n    def volume(self):\n        #  V = 1/3 * A * h\n        return (1/3) * self.area() * self.height()\n\n# How would you test these changes?\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Classes"
    ]
  },
  {
    "objectID": "lessons/Background.html",
    "href": "lessons/Background.html",
    "title": "Background: Why We Do What We Do",
    "section": "",
    "text": "Computational approaches to understanding and managing cities – which is to say, approaches using computers and code – differ in important ways from the quantitative skills taught in traditional geography ‘methods’ classes: computational geography is underpinned by algorithms that employ concepts such as iteration and recursion, and we use these to tackle everything from a data processing problem to an entire research question.\nFor example, Alex Singleton’s OpenAtlas contains 134,567 maps. Alex designed and wrote a script to iterate over the Census areas (i.e. to ‘visit’ each area in turn when creating a map), and to recurse into smaller sub-regions from larger regions (i.e. to keep drilling down into smaller and smaller geographies) in order to generate maps at, literally, every conceivable scale. Then he let the computer do the ‘boring bit’ of actually creating each and every map.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#thinking-algorithmically",
    "href": "lessons/Background.html#thinking-algorithmically",
    "title": "Background: Why We Do What We Do",
    "section": "Thinking Algorithmically",
    "text": "Thinking Algorithmically\n\nYou should learn how to program a computer because it teaches you how to think.\n\nThere are many good reasons for you to learn to code, but let’s start with some good general reasons why you should learn to program a computer even if you never use it to make a map or complete a bit of spatial analysis.\n\nThinking algorithmically requires students and professionals to deal with abstraction: we don’t want to define how each analysis should work – or how each map should look – rather, we want to specify a set of rules about how to select and display data on a map, and then let the computer make them all for us. In this way of working it’s not really any more work to create 500 or 5,000 maps than it is to create 5 because we’ve already told the computer how to make useful maps.\nHere’s another way to think about it:\n\nAn algorithm is like a recipe. It takes “inputs” (the ingredients), performs a set of simple and (hopefully) well-defined steps, and then terminates after producing an “output” (the meal).\n\nThis article also goes on to make some interesting points about AI and deep learning that are well worth a read, but for our purposes, the bit about it being a recipe is the important part: how would you break your problem down into steps like the ones you’d see in a recipe? Do A. Do B. If B doesn’t work, try C. If that doesn’t work, stop. If it does, then jump to Step F…\nLearning to think this way is hard work: the first time I try a new recipe I really don’t know how things are going to taste. Similarly, the first time I use an algorithm to make a map or solve a problem I usually don’t actually know exactly how my maps are going to look until after I’ve made them. The difference from the ‘normal’, non-computational way of working is that I make a few changes to my code and then just run it again. And again… as many times as I need to in order to get what I want. I can keep changing the recipe until I get it just right.\n\nThinking Like a Programmer\nHowever, trying the same recipe again and again and again also sounds like hard work! Wouldn’t it be faster to just click and let someone else do the work? Like when we don’t have the energy or skills to cook and end up orderubg something from Just Eat or, to impress our friends, HelloFresh? Similarly, isn’t it easier to just point-and-click in SPSS or ArcMap? Well, yes and no. There are two core advantages to working with code over pointing-and-clicking: your solution is transferrable, and the approach that you are developing to problem-solving also transfers very nicely to the ‘real world’ of employment.\nWhy do we say this?\n\nProgramming solutions are transferrable because you aren’t just solving one problem, you are solving classes of problems. In the same way that many recipes build on the same basic ingredients (sometimes adding something new for increased ‘spice’), many applications use the same basic ingredients: it’s how they’re put together in new ways that lead to new outputs. It’s also a lot like Lego.\nThinking like a programmer also translates well because you are learning to deal with abstraction. Yes, the details of a problem matter (just as ignoring cultural differences between two countries can matter), but it’s important to be able to break a really big, messy, complex problem down into smaller, tidier, more comprehensible bits that you can tackle. Programmers deal with this every day, so they tend to develop important skills in understanding and dealing with practical challenges of the sort that you’ll face every day in your career.\n\nHere’s another useful bit of insight:\n\nThe best way [of solving problems] involves a) having a framework and b) practising it.\nProblem-solving skills are almost unanimously the most important qualification that employers look for… more than programming languages proficiency, debugging, and system design…\n— Hacker Rank (2018 Developer Skills Report)\n\nYou really should read the article (it’s not very long) but here are the key points:\n\nUnderstand the problem – most problems are hard because you don’t understand them and you will only know that you’ve understood it when you can explain it in plain-English.\nPlan – if you just dive in without thinking about what you need your code to take in and spit out then you’re going to waste a lot of time.\nDivide – break a hard problem down into simple, small steps and tackle them in small, simple blocks of code. Never try to just sit down and ‘code’.\nDebug with a fresh eye – if you really feel stuck, step away from the computer for 5 minutes, take a deep breath, and try to look at the problem with a fresh set of eyes rather than just diving back in. Most problems boil down to either not seeing the big picture, or not realising that the computer is doing exactly what you told it to do, and not what you meant for it to do.\nPractice – find ways to practice problem-solving and coding (not necessarily at the same time).\n\nIf you don’t take our word for it, how about taking Richard Feynman’s word on it?\n\nIf you can’t explain something in simple terms, you don’t understand it.\n\n\n\n\nBack in the ‘olden days’ of blackboards\n\n\n\n\nThe Benefits of Coding?\nIn a practical context we think that the benefits of learning to code fall into three categories:\n\nFlexibility: a computer can often apply the same analytical process to a completely different data set (e.g. rainfall in UK vs rainfall in the US) with minimal effort compared to trying to do each step manually in, say, Excel or SPSS. For students, it comes down to this: if you discover a newer, better data set halfway through your dissertation and want to use this for your analysis instead of the old, inaccurate data, it’s a lot easier and faster to update your analyses if you have used code to do the analysis to-date!\nReproducibility: recently, it’s been discovered that a lot of research cannot be reproduced. In other words, if one scientist tries to duplicate what someone else did in order to check something out (as is important in the scientific method) they’re finding that the results don’t line up. So a second example of why coding your data analysis for a dissertation: you’ve just finished your analysis when someone points out that you made a mistake with the data right back at the beginning; redoing all of that in Excel or SPSS would be a nightmare, but with code, it can be as easy as changing one line and hitting ‘Run’!\nScalability: a computer doesn’t care if you throw 10 lines or 10 billion lines at it, the only thing that changes is how long it takes to get an answer. In other words, if your code ‘works’ on a subset of your data it should also work on your entire data set no matter how big it is. This is also a good way to develop code: rather than try to read in the whole data set in one go while you’re still trying to understand it, take a few rows and make sure you’re handling those ones correctly (and if what you see squares with what you were told) before expanding to larger and larger subsets.\n\nOften, the payoff for coding the answer to a problem instead of just clicking through the options in SPSS or Arc can seem a long way away. It’s like learning a new language: you spend a lot of time asking directions to the train station or whether someone had a nice breakfast before you can start work on the novel or the business case. But the payoff is there if you stick with it!",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#being-a-good-programmer",
    "href": "lessons/Background.html#being-a-good-programmer",
    "title": "Background: Why We Do What We Do",
    "section": "Being a ‘good’ programmer",
    "text": "Being a ‘good’ programmer\nThe best way to be a ‘good’ programmer is to know when the computer can help you and when it will just get in the way. A computer cannot ‘solve’ a problem for you, but it can help you to find the answer when you’ve told it what to look for and what rules to use in that search. A computer can only do exactly what you tell it to do, so if you don’t know what to do then the computer won’t either.\nOne of the founders of computing, Charles Babbage had this to say:\n\nOn two occasions I have been asked, — “Pray, Mr Babbage, if you put into the machine wrong figures, will the right answers come out?” In one case a member of the Upper, and in the other a member of the Lower, House put this question. I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question. Passages from the Life of a Philosopher (1864), ch. 5 “Difference Engine No. 1”\n\nModern programmers call this: garbage in, garbage out. GIGO, for short.\n\nThe 3 virtues of a programmer\nAnother useful idea comes from Larry Wall (the man with the strong ’tache game below!), who created a programming language called Perl. Larry said that programmers had three virtues: Laziness, Hubris, and Impatience.\n\nSome of the reasons that these are virtues in programming (but not in your studies!) are as follows:\n\nLaziness makes you want to put in the effort now to reduce the amount of effort you’ll have to put in later. It might be a lot of work to produce a map of one US State automatically using code, but once you’ve worked out how to do it for one state, then you’ve also figured out how to do it for all 50! That is useful laziness.\nHubris makes you want to write code that other people won’t want to “say bad things about”. Over time you’ll come to understand more intuitively what makes ‘good’ code in more detail (and we cover it a bit in the last lesson), but the short version is: it’s efficient, it’s easy to read, and it’s clever.\nImpatience is about wanting the answer now and looking for ways to get there as quickly as possible. Being impatient doesn’t mean just jumping into writing code, it means that you first look too see whether and how other people have solved similar problems before starting work on your own code. Rather than reinventing the wheel, we try to stand on the shoulder of giants.\n\nHint: you’ll see a lot of laziness when you start trying to write code. Programmers don’t like writing remove when they could just write rm, nor do they like writing define when they could just write def. Keep an eye out for these mnemonics as they can be pretty daunting at first.\n\n\nThe 3 false virtues\nLarry also pointed out that these virtues had three mirror-image false virtues:\n\nFalse laziness happens when you leave something working but half-finished and, most likely, about to break. When you start using StackOverflow you may find that it makes it easy to copy+paste answers into your script and then you can glue it together messily. This isn’t the same as understanding and adapting the solution that you found online to your problem, so it’s false laziness. To really develop a learning mindset, don’t copy+paste code, type it out.\nFalse hubris is thinking that no one else’s code is ‘good enough’ for you. Sometimes copy+paste is false laziness, but refusing to recognise when copy+paste (or importing a library, more on this later) is the right thing to do is false hubris.\nFalse impatience is getting started on coding your answer to a problem when you don’t yet understand what the problem actually is. One thing that a lot of programmers do is half-listen to what someone has asked them to do and then go haring off without sitting down to make any kind of plan. It’s like writing an essay without having done the readings. Nudge, nudge.\n\nThere’s a lot more thinking on this here.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#learning-a-new-language",
    "href": "lessons/Background.html#learning-a-new-language",
    "title": "Background: Why We Do What We Do",
    "section": "Learning a (New) Language",
    "text": "Learning a (New) Language\nThe single most important thing that you can learn is how to frame your problem in a way that you can communicate to a computer. Crucially, the real power of the computer isn’t figuring out how to tell it to add 1, 2, 3, 4 together and calculate the mean (average), it’s figuring out how to tell it to add any possible set of numbers together and work out the mean. It’s when you start to see ways to do this for sets of hard problems (for you) that you know you’ve started to understand the language.\nSo these lessons are intended to help you start learning a new language – a programming language – but you should always remember this: you’re not stupid if you don’t know how to explain things to the computer so that it can help you find the answer. You’re learning the basics of how to communicate with computers; there are only two things that are silly: the first is expecting to be able to run before you can walk; the second is copying and pasting answers without trying to understand why they are answers.\nActually, there is a third silly thing: not asking for help. In the same way that learning a new human language is easier if you immerse yourself in the culture and make friends with some native speakers, learning a new computer lanugage is easier if you immerse yourself in the culture of computing and make friends with some more proficient speakers. But just as your French- or Chinese-speaking friends will get tried of answering your questions if you don’t make it obvious that you’re working hard to learn, most programmers won’t be very impressed if you just ask for ‘the answer’ and then come back two days later with the same question.\n\nMathematics is a Language, so is Code\nThere are obviously many ways that you can calculate the mean (also known as the average if your maths is a little rusty): in your head, using pencil and paper, on a calculator, in Excel… and, of course, using code! For a small set of simple numbers, using your brain is going to be a lot faster than typing it into a calculator or computer.\nWe can use Python like a calculator. For example, to calculate 2 plus 2 using Python we can just type 2 + 2 ↩︎ and get the answer. OK, but where do we run this?\n\n\n\n\n\n\nTip\n\n\n\nNow is when you either start Python on your own computer (usually from the Terminal/Command Prompt) or mosey on over to Google Colab (to run Python in the cloud). If you don’t know how to do either, please visit the install and no install pages.\n\n\nAll of the rules of normal maths are respected by Python, though sometimes the syntax is a little different (as we’ll see later). So the following code will also work as expected to produce 418.0:\n\n(2+2+1250)/3\n\n418.0\n\n\n\n\n\n\n\n\nTip\n\n\n\nNotice the ‘clipboard’ icon at the right-hand side of the code block above this tip? That will copy the code to your computer’s memory, allowing you to paste it into another file/input, such as the Python interpreter or Google notebook so that you can save or run it.\n\n\nQuick, what’s the average (mean) of: 1 + 2 + 3 + 4?\nA little harder, huh? So type your ‘formula’ to calculate the mean of 1, 2, 3, 4 then either hit Return (if you’re working in the Terminal) or click the ‘play’ button on the tool bar at the top of the window (if you’re working in Google Colab) to run your first piece of Python code!\n\nHintShow Solution\n\n\nYour equation should include the four numbers above with some + symbols and ( and ), a / symbol, and another number.\nIf you are totally at a loss for what to type in the code cell, just click the “show solution” tab.\n\n\n\n(1 + 2 + 3 + 4) / 4 \n\n2.5\n\n\n\n\n\n\n\n\n\n\n\nDid you get 2?\n\n\n\n\n\nIf you got the result 2, you are using Python version 2 and will need to check (and change) your installation of Python (go back to the Python Setup page.\n\n\n\n\n\nLearning Languages is Hard\nThis is really important: just because you told the computer to do something that you eventually realise was ‘wrong’ (you may even feel silly) does not mean that you are stupid.\nDid you ever try to learn a foreign language? Did you expect to be fluent after a couple of classes? Did you accidentally tell your teacher that you were ‘pregnant’ when you were just ‘embarrassed’? Assuming that you had a realistic expectation of how far you’d get with French, Chinese, or English in your first couple of years, then you probably figured it’d be a while before you could hold a conversation with someone else.\nSo why would you expect to sit down at a computer and be able to hold a conversation with it (which is another way of thinking about what coding is) after reading a few pages of text and watching a YouTube video or two? You will need to give it time, you will need to get used to looking at the documentation, you will need to ask for help (this seems like a good time to introduce Stack Overflow), and you will need to persevere.\n\nIf you don’t have a reason for learning to code outside of trying making lots of money that’s not a very long term passion… but when you have an idea or a problem that you’re passionate about solving then that’s why we keep on going… but do you need to have an understanding of complex math or logic skills, the answer is no.\n\n\nSo while ‘making money’ is (often) a nice outcome of learning to code, having a passion for what you want to do with your code is what’s going to get you through the worst parts of the learning curve. You also need to be realistic: to become a professional programmer is something that happens over many years, you probably won’t just take a couple of classes and then go out into the world saying “I’m a programmer.”\nAnd, no, you do not need to know advanced maths in order to learn how to code: you need to be able to think logically and to reframe your problems in ways that align with the computer.\n\n\nOn Accessible Code\nIn the early days of computing, programs weren’t even written in English (or any other human language), they were written in Assembly/Machine Code. One of the people who thought that was crazy was this rather impressive Rear Admiral:\n\nGrace Hopper felt that applications should be written in a way that more people could understand; this would be good for the military, but it would also be good for business and society in general. For her efforts, she is now known as the Mother of COBOL (the COmmon Business Oriented Language), a language that is still in (some) use today.\n\n\nThe Open Source Ethos\nOnce I’ve got a solution to my current problem, I can take that code and apply it to a new problem. Or a new case study. Or, I can post it online and let others build off of my work to tackle problems that I’ve not even considered! Giving away my code might seem like a bad idea, but think about this: in a world of exciting research questions, are you going to be able to tackle every single one? Your own work already builds off of code that other people gave away (the Mac OS, Linux, QGIS, Python, etc.)… perhaps you should give something back to the community? Not just because it’s a nice thing to do, but because people will find out about you through your code. And those people might be in a position to offer you a job, or they might approach you as a collaborator, or they might point someone else with an interesting opportunity in your direction because you have built a reputation as a ‘contributor’. It has happened to us.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#practice-makes-perfect",
    "href": "lessons/Background.html#practice-makes-perfect",
    "title": "Background: Why We Do What We Do",
    "section": "Practice makes perfect",
    "text": "Practice makes perfect\nYour language class (assuming that you took one) probably had a ‘lab’ where you practised your new language and you probably made a lot of mistakes when you were getting started. It’s the same for programming: the reason you got a ‘silly’ answer is that we haven’t taught you how to ask the right question yet! For a language like Python “4” is not always the same as “4.0”… and sometimes the way ahead is unclear, but don’t worry if you can’t get the right answer yet, how to ‘talk numbers’ is the main topic in the next lesson and we’ll show you the answer at the end of this lesson.\nSo, we want you to remember that there are no stupid questions when it comes to programming. We have all been lost at one point or another! Even skilled programmers (which doesn’t, TBH, describe many academics) frequently still ask for help by asking Google, it’s just that we do it for harder questions. And that’s only because we have had a lot more practice in the language of programming. So the only silly thing you can do in this short course is to assume that you can speed through the questions and don’t have to practice.\nActually, there’s one other silly thing that you can do, and that’s not asking for help at all. If you’ve been banging your head against the computer for twenty minutes trying to get something to work and it just isn’t working then try explaining it to a friend or even a pet or stuffed animal! Often, the process of talking something out helps you to find the answer for yourself.\nIf you don’t expend any effort in trying to understand how the code works, or if you just copy the answer off of your friend, that’s the same as assuming you’ll learn a foreign language just because you’re sitting next to a friend who is taking the same language course! That is also silly.\n\n\n\n\n\n\nWarning\n\n\n\nYou will need to practice in order to progress. You don’t learn French or Chinese by practising in the language lab once a week. You won’t learn to program a computer by only practising once a week.\n\n\n\nWhen computers beat brains (or calculators)\nWhat makes a computer potentially better than a calculator (or your brain) is that a computer isn’t daunted by having to count lots of numbers and it doesn’t need you to input each number individually! The computer can also do things like:\n\nFind out the amount of rain that fell in London, Manchester, and Edinburgh yesterday from an online weather service;\nWork out the average rainfall for these three cities; and then\nWork out the standard deviation for rainfall.\n\nAnd it can do all of this in a matter of milliseconds! It can also do the same for 3,000 cities just as easily; sure, it’ll take a little bit longer, but it’s the same basic code.\nIn other words, code is scalable in a way that brains and calculators are not and that is a crucial difference.\nHere’s a trivial example of when computers start to get better and faster than brains:\n\n(23495.23 + 9238832.657 + 2 + 12921)/4\n\n2318812.72175\n\n\n\n\n\n\n\n\nRemember\n\n\n\nCopy (clicking on the clipboard icon on the right) and paste the code into whatever Python environment you are using and then ‘run’ the code to get the answer.",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#programming-in-python",
    "href": "lessons/Background.html#programming-in-python",
    "title": "Background: Why We Do What We Do",
    "section": "Programming in Python",
    "text": "Programming in Python\nIn these lessons we will be using the Python programming language. As with human languages, there are many programming languages in the world, each with their own advantages and disadvantages, and each with their own vocabulary (allowed words) and grammar (syntax). We use Python.\n\nPython vs R\nAlongside Python, the other language that is often mentioned by people doing data-led research is R. It’s the other one that many of your lecturers and a lot of other scientists use in a lot of their work. There’s a great deal of debate about the relative merits of Python and R, but for our purposes, both Python and R can help us to undertake the geographical analysis. That is, in fact, the premise of this entire course!\nSo why have we chosen to use Python here? Of the two languages, we think that Python has some specific advantages:\n\nIt was designed for teaching, so its syntax is easier for a human to ‘parse’ than R’s\nIt is more like other languages, so it is more readily transferrable if you need to learn another language. Think of it as learning Italian, which also makes it easier to learn Spanish and French.\nIt is the one most-used as part of a geographical workflow – what we mean by this is that you can find Python buried inside of ESRI’s ArcGIS and the open-source QGIS applications, and it also sits behind (or talks to) a number of other tools that allow us to work flexibly and scalably with geo-data.\nIt is easier to operationalise – Python offers more services/tools to enable you to turn something from a ‘hack’ (which doesn’t mean what you think it means into a ‘service’.\n\nHowever, if you have been told R is the way to go then don’t worry, the concepts covered here still translate. And many of the contributors to these lessons use both languages… it just depends on the problem.\n\n\nPython what?\nPython was invented in the late 1980s by Guido van Rossum, Python’s ‘benevolent dictator’ (until he stepped down from the position on 12 July 2018), which means that he (and some other very smart people) try to ensure that the language continues to meet the basic goals of:\n\nBeing very easy to read (syntax)\nUsing plain-English for many functions and operators (allowed words)\nHas a comprehensive style guide: PEP8 (syntax)\nHas no unnecessary special formatting characters (syntax and allowed words)\n\nSo while Python is not a language that enables the computer to make calculations the fastest (C and C++ are faster), nor is it the safest (you wouldn’t use it to fly a rocket to Mars), it is a very readable, learnable and maintainable language.\nSo if you want to learn to code, to do ‘data science’, or build a business, Python is a great choice.\nThe points above are also made in Python In A Nutshell by Martin Brochhaus which you may find interesting and useful to accompany your learning of Python.\n\n\nThree takes on Python\nThe images below are links to three videos pitched in quite different ways at the advantages of Python, all of which touch on issues we’ll be dealing with later… so watch the videos (even if they’re a bit silly in places)!",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#further-reading",
    "href": "lessons/Background.html#further-reading",
    "title": "Background: Why We Do What We Do",
    "section": "Further Reading",
    "text": "Further Reading\n\nA must read: The Hard Way is Easier\nTwo easy and accessible videos to start wrapping your head around programming (although they are not Python-centric) 1 and 2",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "lessons/Background.html#credits",
    "href": "lessons/Background.html#credits",
    "title": "Background: Why We Do What We Do",
    "section": "Credits!",
    "text": "Credits!\n\nContributors:\nThe following individuals have contributed to these teaching materials:\n\nJames Millington\nJon Reades\nMichele Ferretti\nZahratu Shabrina\nFulvio Lopane\n\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Background"
    ]
  },
  {
    "objectID": "help.html",
    "href": "help.html",
    "title": "Getting Help",
    "section": "",
    "text": "We all need help from time to time—and we are happy to provide what can to people who enrolled on our programme (if you’ve just stumbled across Code Camp then our options are a little more constrained)—but the best way to ‘get help’ will always be taking steps to ‘help yourself’ first!\n\n\nWhen you are first learning to code there is no such thing as a stupid question. From time to time we all have lazy questions, which is what happens when we are frustrated and just want to know ‘the answer’ without putting in the work to clarify the problem. However, if any time you find yourself stuck on a particular problem there is a 100% chance that someone else trying Code Camp has had (or is having) the same problem. You are not alone.\n\n\n\nHere are four things that you can do to ‘help yourself’:\n\nUse Google–when learning to code saying “I googled it…” will be taken as a good sign! Probably the biggest difference between a good programmer and a new programmer is that the good one knows which terms to type into Google to get the answer that they need right away.\nUse Stack Overflow–as you become a better programmer you’ll start to understand how to frame your question in ways that produce the answer you need in the first couple of search results, but whether you’re a beginner or an expert Stack Overflow is your friend. True story: I have sometimes found answers that I provided (but didn’t remember giving) when trying to solve a problem. Note that you are unlikely to need to ask a question: most likely at this stage your question will have been asked and answered multiple times.\nUse the work of others–there is a world of knowledge out there on which you can build! Code Academy, Khan Academy, Medium, and dedicated tutorial-type sites like Towards Data Science, Software Carpentry, and Programming Historian all take different approaches to teaching you some of the basics. See if you can find others who have had similar challenges.\n\nYes, this is a lot of things to do when you want to know the answer to what feels like a simple question, but it’s an investment. If we just ‘give’ you the answer then chances are you’ll forget it as soon as your code starts running again; however, if you’ve had to invest your time and energy in sorting through a whole range of answers (some useful, some not) then you have found it for yourself in a way that you’ll not soon forget. In fact, you’ve learned something about both how to frame questions and how to identify useful answers. That, frankly, is a much more valuable skill!\n\n\n\nLearning to code is like learning a language: you need to practice! Set yourself little problems or tasks and see if you can apply what you’ve learned to a different problem, even if it seems like a really basic one! In the same way that practicing your Chinese or French with native speakers will help you to learn those languages, so will practicing your Python.\n\n\n\nIf you have really exhausted all options, feel free to reach out with your question. We will try to help!",
    "crumbs": [
      "Getting Help"
    ]
  },
  {
    "objectID": "help.html#important",
    "href": "help.html#important",
    "title": "Getting Help",
    "section": "",
    "text": "When you are first learning to code there is no such thing as a stupid question. From time to time we all have lazy questions, which is what happens when we are frustrated and just want to know ‘the answer’ without putting in the work to clarify the problem. However, if any time you find yourself stuck on a particular problem there is a 100% chance that someone else trying Code Camp has had (or is having) the same problem. You are not alone.",
    "crumbs": [
      "Getting Help"
    ]
  },
  {
    "objectID": "help.html#helping-yourself",
    "href": "help.html#helping-yourself",
    "title": "Getting Help",
    "section": "",
    "text": "Here are four things that you can do to ‘help yourself’:\n\nUse Google–when learning to code saying “I googled it…” will be taken as a good sign! Probably the biggest difference between a good programmer and a new programmer is that the good one knows which terms to type into Google to get the answer that they need right away.\nUse Stack Overflow–as you become a better programmer you’ll start to understand how to frame your question in ways that produce the answer you need in the first couple of search results, but whether you’re a beginner or an expert Stack Overflow is your friend. True story: I have sometimes found answers that I provided (but didn’t remember giving) when trying to solve a problem. Note that you are unlikely to need to ask a question: most likely at this stage your question will have been asked and answered multiple times.\nUse the work of others–there is a world of knowledge out there on which you can build! Code Academy, Khan Academy, Medium, and dedicated tutorial-type sites like Towards Data Science, Software Carpentry, and Programming Historian all take different approaches to teaching you some of the basics. See if you can find others who have had similar challenges.\n\nYes, this is a lot of things to do when you want to know the answer to what feels like a simple question, but it’s an investment. If we just ‘give’ you the answer then chances are you’ll forget it as soon as your code starts running again; however, if you’ve had to invest your time and energy in sorting through a whole range of answers (some useful, some not) then you have found it for yourself in a way that you’ll not soon forget. In fact, you’ve learned something about both how to frame questions and how to identify useful answers. That, frankly, is a much more valuable skill!",
    "crumbs": [
      "Getting Help"
    ]
  },
  {
    "objectID": "help.html#creating-opportunities",
    "href": "help.html#creating-opportunities",
    "title": "Getting Help",
    "section": "",
    "text": "Learning to code is like learning a language: you need to practice! Set yourself little problems or tasks and see if you can apply what you’ve learned to a different problem, even if it seems like a really basic one! In the same way that practicing your Chinese or French with native speakers will help you to learn those languages, so will practicing your Python.",
    "crumbs": [
      "Getting Help"
    ]
  },
  {
    "objectID": "help.html#how-to-ask-for-help",
    "href": "help.html#how-to-ask-for-help",
    "title": "Getting Help",
    "section": "",
    "text": "If you have really exhausted all options, feel free to reach out with your question. We will try to help!",
    "crumbs": [
      "Getting Help"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Code Camp",
    "section": "",
    "text": "Prior to (re)joining CASA from the Department of Geography at King’s College London, Dr. Mic Ferretti and I developed the first iteration of Code Camp with input from Dr. James Millington. Subsequently, a great deal of hard work has been undertaken by Dr. Zara Shabrina, to improve the content and provide more videos and self-testing features. Dr. Fulvio Lopane has further improved the version that you’re seeing now.\nThe original purpose of Code Camp was to help prepare 2nd year Geography undergraduates at King’s College London for the Geocomputation pathway, but it was written to try to appeal to students from all kinds of backgrounds and has subsequently been adapted for use at UCL’s Centre for Advanced Spatial Analysis.\nStudents from both CASA and King’s have repeatedly said that completing Code Camp helped them to feel more ready for the Foundations of Spatial Data Science module, enabling them to do better on assessments and on the programme as a whole."
  },
  {
    "objectID": "attention.html",
    "href": "attention.html",
    "title": "Managing Your Attention",
    "section": "",
    "text": "Learning to code is hard work and I’m pretty sure that I’m a lot less exciting than your average YouTube star. So if I have to compete with YouTube (or with your friends on WhatsApp, Snapchat, WeChat, or whatever) for your attention then I’ll probably lose. And your computer and phone are designed to distract you because they are interested in engagement—they don’t care that you should be engaging with your studies, they want you to pick them up and use them. This is why you get so many notifications!\nThere is plenty of evidence to back this up:\n\nDistractions make learning harder\nNearly half of students distracted by technology\nThe effect of cellphones on attention and learning…\nDistractions make retaining info harder\nThe interrupted learner: how distractions during live and video lectures influence learning outcomes\n\nSo my recommendations for studying (online or offline) are:\n\nTurn off as many notifications as possible. On the Mac there is a ‘Do not disturb’ setting that you can enable in the Notifications section of your System Preferences. You can set it to turn on by time, and also add a setting short-cut to your ‘Notification Centre’ (upper-right corner of your desktop).\nUninstall messaging apps that you cannot turn off. If quitting the app disables notifications then that’s fine. But if you can’t disable notifications then I’d suggest uninstalling the messaging app entirely. Facebook Messenger, for instance, is a massive memory-hog and usually available on the desktop UI anyway.\nBlock access to distracting web sites. There are a number of tools that you can set up to block access to Facebook and other social media sites at set times of day. My Achilles heel is the news: if I’m struggling I tend to read news articles, so if I really need to make sure I don’t have the browser open to the home page of my favourite news sites.\nWork out a schedule. It’s a lot easier to avoid distractions if you have a routine that enables you to say “OK, I will work from 9–11 and then have a look at my email.” It is easier to be in control if you can give yourself rewards later. And if you get into a routine, as a parent probably suggested when you were an undergraduate (certainly mine did and I ignored them), then you’ll find that your ‘productivity’ improves dramatically. My mother was right, dammit.\n\n\n\n\nFrequent distraction is one problem, but (in a sense) getting enough distraction is another. As this piece suggests, it’s also important that you give yourself downtime between Zoom/Teams/whatever sessions. I will try to remember to bake these into our ‘lectures’, but you should also suggest breaks if you feel yourself flagging! This also applies, however, to your wider degree: Masters degrees are intense and you need to give yourself permission for a timeout… stepping away from the computer and going for a walk, doing some knitting, taking a weekend to visit another city or go on a camping trip, whatever floats your boat!\n\n\n\nAlthough the guidance below, from Tim Squirrel’s Guide is for undergraduate essays, and is about reading so that you can write an essay in history or philosophy, the advice works for all kinds of reading.\nMake sure that you cite the people who originally came up with the ideas you’re presenting, and ideally think about how you would differ from or improve upon or disagree with them. The only way you can do this (and consequently, the only way to get a decent mark) is to do some reading.\n\nLook at the reading list. If it’s incredibly long, you probably won’t want to (or be able) to read it all. However, that is not an excuse to not read any of it. Look through the list, identify if there are any readings marked as essential. Read them. If there aren’t any essential readings, pick a few which look interesting and relevant, then read them.\nRead some more. If the reading list is really short, you’ll need to go beyond it. If it’s long, this is still relevant. Look through the reference lists of the papers and books you’ve just read. See where their ideas came from. Mark out a few of the most promising-looking readings. Read them.\nThere is a difference between reading to understand the topic, and reading to reference. It is totally fine to use Wikipedia, lecture notes, etc to familiarise yourself with the key arguments and concepts. It is considerably less fine to cite them as your only sources.\nBooks. For undergraduate and masters study do not read whole books. It’s a waste of your time. You won’t remember any of it, it will drain all of your energy, and you only get one reference and viewpoint out of it. Read the intro and conclusion so that you get the gist of their argument. Pick a chapter from the contents page which looks like it’s relevant to your essay. Read that. As above, find relevant references and follow them up.\nArticles. Read the abstract first. Does it look like it’s relevant? If not, don’t waste your time. If it does, read it. Check the bibliography as above.\nRead critically. For the sake of all that is holy, read critically. This is absolutely essential. Don’t just stare at the pages and absorb them, bovine-like, for the purposes of regurgitation into your essay. Think about:\n\nThe central claim the author is making. Usually there is only one, perhaps two. Summarise it in one sentence if you can.\nWhat is the frame of their argument? When in history is it set? Who are the key actors? Are they responding to another author? If so, what is the argument they’re responding to? Try to position their argument in context. This allows you to:\nCritically assess the claims made. This obviously doesn’t just mean ‘say they’re wrong’. They might well be wrong, but you’ll need to find reasons for it. Generate a list of three reasons for each line of attack you want to take. Scrap the weakest two. If you think they’re right, why are they right? Are there other authors who corroborate their claims? Are there logical reasons to prefer their argument?\n\n\nMake sure you take notes on everything you read. Put page numbers in those notes. In fact, write down any potentially useful (and, ideally, flexible) quotes verbatim with the page numbers. Your goal is to read everything once even if you reference it repeatedly.\n\n\n\nAnother challenge for many students is that they want the ‘right’ answer to how to do things. There’s more academic literature on this, but for a thought-provoking look at why it might be a good idea for us to make your life hard then What IKEA and Our Education System Have in Common is an easy read.\nHere’s the summary:\n\nIKEA is easy, but you don’t learn anything.\nIKEA is about getting things done/finishing.\nIKEA is convenient, but it’s not creative.\nIKEA is standardised, but it is actually primed for hacking.\n\nBut there is a great response to the original post that adds nuance to this:\n\nThe thing to keep in mind, though, is that following recipies is how we learn skills to start with. If you were teaching someone to cook, for example, you wouldn’t throw the person into the kitchen and tell them to be creative with the food. Instead, you would teach them to follow recipies so that they can practice skills, and learn how to properly balance flavours and textures. Then, when they’ve mastered some recipies, you teach them how to mix up and re-combine recipies, and eventually come up with their own.\n\n\n\n\nFor the record, there are many things that can’t be solved by code or coders, but there are many things that can be tackled by learning to think like a programmer. This can include:\n\nUnderstanding: make sure that you actually understand the problem before you try to solve it. Try to explain it to someone else. Try to explain it to a pet or stuffed animal. Write it down. You may feel silly doing some of these things, but saying it/writing it forces you to organise your thoughts and often gives you the answer halfway through the explanation.\nPlanning: “Given X, what steps do I need to achieve Y?” You can start with comments, bullet points, or whatever format helps you to get the skeleton of an answer in place before you spend ages writing the first few lines of code or the first few lines of your essay. Markdown is good here!\nDividing: never try to solve a hard problem in one go. Break it down into little steps. Easy steps. Do the easiest one first (if you can separate it out from the first one). Check your solution works for that part. Take the next step. Check the two steps work together. Build from there. As programmers and Venture Capitalists would tell you: iterate! Same for an essay or written submission.\nUnsticking: try to stay curious rather than getting angry or frustrated. Debugging is a step-by-step process: comment things out, add print statements, break it back down again into the basics and gradually re-add pieces until you can see where it all breaks.\nPracticing: I like this quote “Practice. Practice. Practice. It’ll only be a matter of time before you recognize that ‘this problem could easily be solved with .’”\n\n\n“The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.” — Andrew Singer\n\nOn a more practical level, here are common mistakes made by new programmers.\n\n\n\n\nWe will not give you the answer. This will be frustrating and annoying (particularly when you are already frustrated that something is not working) but by asking you questions we will try to teach you to solve problems for yourself.\nIf you keep asking us the same questions you will get increasingly abrupt answers. You should be scared to ask us the same question for the 20th time. You should not be scared to admit that you’re struggling with something.\nSometimes there is no answer! Every year the data changes. The policies and issues change. I teach things a little differently. This is much more like the real world and sometimes I don’t know what we’ll find when we start coding.\nYou need to work out how you learn best.\nYou will need to think critically about what you are doing. There’s a good article on How to write better essays which leads on to a blog on how to write better undergraduate essays (see above). You’re obviously not undergraduates any more and we expect more of you, but as a starting point this is a good one, especially for those of you who are new to the UK way of teaching and learning."
  },
  {
    "objectID": "attention.html#the-problem-of-distraction",
    "href": "attention.html#the-problem-of-distraction",
    "title": "Managing Your Attention",
    "section": "",
    "text": "Learning to code is hard work and I’m pretty sure that I’m a lot less exciting than your average YouTube star. So if I have to compete with YouTube (or with your friends on WhatsApp, Snapchat, WeChat, or whatever) for your attention then I’ll probably lose. And your computer and phone are designed to distract you because they are interested in engagement—they don’t care that you should be engaging with your studies, they want you to pick them up and use them. This is why you get so many notifications!\nThere is plenty of evidence to back this up:\n\nDistractions make learning harder\nNearly half of students distracted by technology\nThe effect of cellphones on attention and learning…\nDistractions make retaining info harder\nThe interrupted learner: how distractions during live and video lectures influence learning outcomes\n\nSo my recommendations for studying (online or offline) are:\n\nTurn off as many notifications as possible. On the Mac there is a ‘Do not disturb’ setting that you can enable in the Notifications section of your System Preferences. You can set it to turn on by time, and also add a setting short-cut to your ‘Notification Centre’ (upper-right corner of your desktop).\nUninstall messaging apps that you cannot turn off. If quitting the app disables notifications then that’s fine. But if you can’t disable notifications then I’d suggest uninstalling the messaging app entirely. Facebook Messenger, for instance, is a massive memory-hog and usually available on the desktop UI anyway.\nBlock access to distracting web sites. There are a number of tools that you can set up to block access to Facebook and other social media sites at set times of day. My Achilles heel is the news: if I’m struggling I tend to read news articles, so if I really need to make sure I don’t have the browser open to the home page of my favourite news sites.\nWork out a schedule. It’s a lot easier to avoid distractions if you have a routine that enables you to say “OK, I will work from 9–11 and then have a look at my email.” It is easier to be in control if you can give yourself rewards later. And if you get into a routine, as a parent probably suggested when you were an undergraduate (certainly mine did and I ignored them), then you’ll find that your ‘productivity’ improves dramatically. My mother was right, dammit."
  },
  {
    "objectID": "attention.html#the-problem-of-no-breaks",
    "href": "attention.html#the-problem-of-no-breaks",
    "title": "Managing Your Attention",
    "section": "",
    "text": "Frequent distraction is one problem, but (in a sense) getting enough distraction is another. As this piece suggests, it’s also important that you give yourself downtime between Zoom/Teams/whatever sessions. I will try to remember to bake these into our ‘lectures’, but you should also suggest breaks if you feel yourself flagging! This also applies, however, to your wider degree: Masters degrees are intense and you need to give yourself permission for a timeout… stepping away from the computer and going for a walk, doing some knitting, taking a weekend to visit another city or go on a camping trip, whatever floats your boat!"
  },
  {
    "objectID": "attention.html#how-to-read",
    "href": "attention.html#how-to-read",
    "title": "Managing Your Attention",
    "section": "",
    "text": "Although the guidance below, from Tim Squirrel’s Guide is for undergraduate essays, and is about reading so that you can write an essay in history or philosophy, the advice works for all kinds of reading.\nMake sure that you cite the people who originally came up with the ideas you’re presenting, and ideally think about how you would differ from or improve upon or disagree with them. The only way you can do this (and consequently, the only way to get a decent mark) is to do some reading.\n\nLook at the reading list. If it’s incredibly long, you probably won’t want to (or be able) to read it all. However, that is not an excuse to not read any of it. Look through the list, identify if there are any readings marked as essential. Read them. If there aren’t any essential readings, pick a few which look interesting and relevant, then read them.\nRead some more. If the reading list is really short, you’ll need to go beyond it. If it’s long, this is still relevant. Look through the reference lists of the papers and books you’ve just read. See where their ideas came from. Mark out a few of the most promising-looking readings. Read them.\nThere is a difference between reading to understand the topic, and reading to reference. It is totally fine to use Wikipedia, lecture notes, etc to familiarise yourself with the key arguments and concepts. It is considerably less fine to cite them as your only sources.\nBooks. For undergraduate and masters study do not read whole books. It’s a waste of your time. You won’t remember any of it, it will drain all of your energy, and you only get one reference and viewpoint out of it. Read the intro and conclusion so that you get the gist of their argument. Pick a chapter from the contents page which looks like it’s relevant to your essay. Read that. As above, find relevant references and follow them up.\nArticles. Read the abstract first. Does it look like it’s relevant? If not, don’t waste your time. If it does, read it. Check the bibliography as above.\nRead critically. For the sake of all that is holy, read critically. This is absolutely essential. Don’t just stare at the pages and absorb them, bovine-like, for the purposes of regurgitation into your essay. Think about:\n\nThe central claim the author is making. Usually there is only one, perhaps two. Summarise it in one sentence if you can.\nWhat is the frame of their argument? When in history is it set? Who are the key actors? Are they responding to another author? If so, what is the argument they’re responding to? Try to position their argument in context. This allows you to:\nCritically assess the claims made. This obviously doesn’t just mean ‘say they’re wrong’. They might well be wrong, but you’ll need to find reasons for it. Generate a list of three reasons for each line of attack you want to take. Scrap the weakest two. If you think they’re right, why are they right? Are there other authors who corroborate their claims? Are there logical reasons to prefer their argument?\n\n\nMake sure you take notes on everything you read. Put page numbers in those notes. In fact, write down any potentially useful (and, ideally, flexible) quotes verbatim with the page numbers. Your goal is to read everything once even if you reference it repeatedly."
  },
  {
    "objectID": "attention.html#why-am-i-making-this-hard-for-you",
    "href": "attention.html#why-am-i-making-this-hard-for-you",
    "title": "Managing Your Attention",
    "section": "",
    "text": "Another challenge for many students is that they want the ‘right’ answer to how to do things. There’s more academic literature on this, but for a thought-provoking look at why it might be a good idea for us to make your life hard then What IKEA and Our Education System Have in Common is an easy read.\nHere’s the summary:\n\nIKEA is easy, but you don’t learn anything.\nIKEA is about getting things done/finishing.\nIKEA is convenient, but it’s not creative.\nIKEA is standardised, but it is actually primed for hacking.\n\nBut there is a great response to the original post that adds nuance to this:\n\nThe thing to keep in mind, though, is that following recipies is how we learn skills to start with. If you were teaching someone to cook, for example, you wouldn’t throw the person into the kitchen and tell them to be creative with the food. Instead, you would teach them to follow recipies so that they can practice skills, and learn how to properly balance flavours and textures. Then, when they’ve mastered some recipies, you teach them how to mix up and re-combine recipies, and eventually come up with their own."
  },
  {
    "objectID": "attention.html#thinking-like-a-programmer",
    "href": "attention.html#thinking-like-a-programmer",
    "title": "Managing Your Attention",
    "section": "",
    "text": "For the record, there are many things that can’t be solved by code or coders, but there are many things that can be tackled by learning to think like a programmer. This can include:\n\nUnderstanding: make sure that you actually understand the problem before you try to solve it. Try to explain it to someone else. Try to explain it to a pet or stuffed animal. Write it down. You may feel silly doing some of these things, but saying it/writing it forces you to organise your thoughts and often gives you the answer halfway through the explanation.\nPlanning: “Given X, what steps do I need to achieve Y?” You can start with comments, bullet points, or whatever format helps you to get the skeleton of an answer in place before you spend ages writing the first few lines of code or the first few lines of your essay. Markdown is good here!\nDividing: never try to solve a hard problem in one go. Break it down into little steps. Easy steps. Do the easiest one first (if you can separate it out from the first one). Check your solution works for that part. Take the next step. Check the two steps work together. Build from there. As programmers and Venture Capitalists would tell you: iterate! Same for an essay or written submission.\nUnsticking: try to stay curious rather than getting angry or frustrated. Debugging is a step-by-step process: comment things out, add print statements, break it back down again into the basics and gradually re-add pieces until you can see where it all breaks.\nPracticing: I like this quote “Practice. Practice. Practice. It’ll only be a matter of time before you recognize that ‘this problem could easily be solved with .’”\n\n\n“The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.” — Andrew Singer\n\nOn a more practical level, here are common mistakes made by new programmers."
  },
  {
    "objectID": "attention.html#what-this-means-for-you",
    "href": "attention.html#what-this-means-for-you",
    "title": "Managing Your Attention",
    "section": "",
    "text": "We will not give you the answer. This will be frustrating and annoying (particularly when you are already frustrated that something is not working) but by asking you questions we will try to teach you to solve problems for yourself.\nIf you keep asking us the same questions you will get increasingly abrupt answers. You should be scared to ask us the same question for the 20th time. You should not be scared to admit that you’re struggling with something.\nSometimes there is no answer! Every year the data changes. The policies and issues change. I teach things a little differently. This is much more like the real world and sometimes I don’t know what we’ll find when we start coding.\nYou need to work out how you learn best.\nYou will need to think critically about what you are doing. There’s a good article on How to write better essays which leads on to a blog on how to write better undergraduate essays (see above). You’re obviously not undergraduates any more and we expect more of you, but as a starting point this is a good one, especially for those of you who are new to the UK way of teaching and learning."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Well hi there! Are you a Computer Scientist? If so, this site probably isn’t for you.\nThis site is for everyone else—especially our future MSc Urban Spatial Science students—looking to learn some basic Python, together with a bit about the other tools that we think people should know, before the start of term."
  },
  {
    "objectID": "index.html#what-will-you-learn",
    "href": "index.html#what-will-you-learn",
    "title": "Welcome",
    "section": "What will you learn?",
    "text": "What will you learn?\nSo what can you expect to learn? By the end of the course, we hope that you will have a basic understanding of:\n\nThe range of tools that we use to do urban spatial science, a sense of why we use them, and how they connect with tools used by practicing researchers and programmers.\nThe fundamental concepts of programming used in Python so that you can ‘read’ Python code and begin to recognise how to do things using Python.\nHow programs and libraries are structured so that your code remains manageable and, above all, legible.\nHow your newly-acquired coding skills can help you be usefully lazy because that, ultimately, is what computers do: they make tedious, repetitive problems ‘go away’, though they often create or reveal much more complex, novel problems in turn.\n\nCode Camp is all about building blocks: helping you to learn the fundamentals so that when classes start you (hopefully) feel like you already have the lay of the land. We can’t make learning to code easy any more than we can make learning to speak French or Chinese (or English!) easy, but if you work your way through these lessons it will be easier to hit the ground running in Week 1."
  },
  {
    "objectID": "index.html#how-will-you-learn",
    "href": "index.html#how-will-you-learn",
    "title": "Welcome",
    "section": "How will you learn?",
    "text": "How will you learn?\nWe’ve tried to break everything down into manageable ‘units’ of learning that you can follow at your own speed in the run-up to the start of term. We’d strongly recommend that you don’t try to cram Code Camp into the last week before classes start; instead, you should aim to complete two or three lessons a week (and allow time to go back and test yourself!) so that you complete it over the course of four to eight weeks (1-2 months).\nEach lesson will contain a mix of explanation and code that can be run interactively in a variety of ways (see Setting Up). Some code will run first-time (you just copy+paste), some code will require you to ‘fill in the blanks’ (though the blanks, in this case, are marked by ??), and some code will be deliberately broken so that you have to debug it and work out what’s wrong1.\nSo rather than throw you in at the deep end with examples taken from computer science classes (e.g. ‘This is just like the C construct…’), we’ve tried to give you real world examples whenever possible in the hopes that it will seem a little less abstract and a little more relevant to your needs. Of course, the early examples are also very basic so the payoff might not be obvious right away, but trust us: if you stick with it you will learn how to speak a new language that gives you superpowers for dealing with data!2"
  },
  {
    "objectID": "index.html#lessons",
    "href": "index.html#lessons",
    "title": "Welcome",
    "section": "Lessons",
    "text": "Lessons\nThe lessons are organised to build from the general and basic, to the specific and advanced. You need to learn about variables and operators before you can learn about functions and classes. But along the way we also try to introduce other ideas and tools (such as working with the Terminal and how to write Markdown) that will support your coding skills. While there are some important differences, a lot of what makes a good programmer is the same as what makes a good anything: persistence, attention to detail, and communicating clearly and succinctly.\n\n\n\nLesson Plan {#cell-lesson-plan}\n\n\nLesson\nTime Needed\nTitle & topic\nLink\n\n\n\n\n0\n00:10:00\nIntroduction: Doing Urban Spatial Science\nLesson\n\n\n1\n00:25:00\nBackground: Why We Do What We Do\nLesson\n\n\n2\n00:45:00\nThe Basics: Variables, Operators & Precedence\nLesson\n\n\n3\n00:40:00\nExceptions: What to Do When Things Go Wrong\nLesson\n\n\n4\n00:20:00\nWriting Code: A Matter of Style\nLesson\n\n\n5\n01:15:00\nBoolean Logic: Comparisons, Conditions & George Boole\nLesson\n\n\n6\n01:35:00\nRecap 1\nLesson\n\n\n7\n01:00:00\nLists: Making a List (and Checking it Twice)\nLesson\n\n\n8\n00:40:00\nDicts: Look it up in the Dictionary\nLesson\n\n\n9\n00:50:00\nLoops: Let’s Iterate This\nLesson\n\n\n10\n00:50:00\nRecap 2\nLesson\n\n\n11\n01:25:00\nFunctions: Automate All the Things\nLesson\n\n\n12\n00:40:00\nPackages: Giving Yourself a Present\nLesson\n\n\n13\n00:55:00\nClasses: How to Objectify Things in Python\nLesson\n\n\n14\n00:35:00\nThe Terminal: No More Buttons to Press\nLesson"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Welcome",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFun fact: the term ‘debugging’ was coined by the rather impressive Grace Hopper, who found an actual bug in the computer she was working with that was causing programs to fail.↩︎\nUnfortunately, no other superpowers are likely to be uncovered.↩︎"
  },
  {
    "objectID": "lessons/Boolean_Logic.html",
    "href": "lessons/Boolean_Logic.html",
    "title": "Truth & Conditions",
    "section": "",
    "text": "In this lesson we’ll learn how to compare stuff (like numerical quantities but also words and strings) via Comparison Operators.\nWe’ll also see how to express logical concepts like: ” if this condition is True, then do something…“. These concepts will enable your code account for different possibilities and let it run to accordingly. They will also serve to perform assertions and to test if certain conditions have been met or not.",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Boolean_Logic.html#booleans",
    "href": "lessons/Boolean_Logic.html#booleans",
    "title": "Truth & Conditions",
    "section": "Booleans",
    "text": "Booleans\nThe most basic form of comparison is to test if something is True of False. To do so we’ll have to quickly introduce another data type, the boolean.\nBooleans are different from the numerical (floats and integers) or textual (strings) data types that we have seen so far because they have only two possible values: True or False.\nmyBoolean = True\nprint(myBoolean)\nprint(\"This statement is: '\" + str(myBoolean) + \"'\")\n\n\n\n\n\n\nTip\n\n\n\nDid you see the str() around the myBoolean variable on the second print line? That’s so that we can print out its value as part of a string. If you just tried print(\"This statement is: \" + myBoolean) you’d get a TypeError because you can’t concatentate (join together with a +) a string and a boolean. For more on errors see the lesson on exceptions.",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Boolean_Logic.html#comparisons",
    "href": "lessons/Boolean_Logic.html#comparisons",
    "title": "Truth & Conditions",
    "section": "Comparisons",
    "text": "Comparisons\nHow do we use booleans? Well, what if I ask you “Is it true or false that an elephant is bigger than a mouse?” So we use booleans why making some kind of comparison between two things: is it bigger? is it smaller? is the same?\n\n\n\n\n\n\nNote\n\n\n\nNote: just so that you know, sometimes people will use 1 and 0 in place of True and False because that’s what’s actually happening behind the scenes. It’s the same thing logically , but Python views sees True and False differently from 1 and 0 because the latter are numbers, while the former are boolean data type.\n\n\nYou will need these set of operators:\n\n\n\n\n\n\n\n\nOperator\nMeaning\nExample\n\n\n\n\n&gt;\nGreater Than\nA&gt;B returns True if value of A is larger than value of B\n\n\n&lt;\nLess Than\nA&lt;B returns True if value of A is smaller than value of B\n\n\n&gt;=\nGreater Equal Than\nA&gt;=B returns True if value of A is larger than or equal to value of B\n\n\n&lt;=\nLess Equal Than\nA&lt;=B returns True if value of A is smaller than or equal to value of B\n\n\n==\nEqual To\nA==B returns True if value of A is exactly equal to value of B\n\n\n\nHere’s an initial example (without a print statement):\n25 &gt; 7\nAnd further examples (with print statements):\nprint(7  &gt;= 7)\nprint(7  &gt;  7)\nprint(25 &lt;= 7)\nprint(25 &lt;= 25.0)\nprint(25 &lt;  25.0)\nprint(25 &lt;  25.1)\nNumerical comparisons are fairly straightforward, and you’ll see that Python automatically does fairly sensible things: - Because it converts automatically between integers and floats, 25 and 25.0 are evaluated properly - As are 25 and 25.1 because the ‘casting’ of integers to floats turns 25 into 25.0 automatically\nBut here are some slightly more complicated examples involving string comparisons:\nprint(\"A 'simple' string comparison:\")\nprint(\"A\" &gt; \"B\")\nprint(\"B\" &gt; \"A\")\n\nprint(\"Something slightly trickier:\")\nprint(\"A\" &gt;  \"a\")\nprint(\"A\" &gt;= \"a\")\nprint(\"A\" &lt;  \"a\")\n\nprint(\"And trickier again:\")\nprint(\"ab\" &lt; \"abc\")\n\nprint(\"hmmmm...\")\nprint(\"James\" &lt; \"Jane\")\nWhy does Python think ‘A’ is less than ‘a’, and ‘Aardvark’ is less than ‘Ant’?\nWhen comparing str objects, Python uses character unicodes. Unicode is a specification that aims to list every character used by human languages and give each character its own unique ‘number’. In Python, these codes are of type int.\nTo see this in action, we can use the ord function to get Python to show us the unicode for a single character:\nprint(ord(\"A\"))\nprint(ord(\"a\"))\nHopefully this output helps you to see why print(\"A\" &gt; \"a\") returns False\nWhen there are multiple characters in a string object, Python compares each character in order. Suppose, as we do above, we have str1 as “James” and str2 as “Jane”. The first two characters from str1 and str2 (J and J) are compared. Because they are equal, the second two characters are compared. Because they are also equal, the third two characters (m and n) are compared. And because m has smaller unicode value than n, str1 is less than str2.\nstr1 = \"James\"\nstr2 = \"Jane\"\n\n# compare\nprint(str1 &lt; str2)\n\n# proof\nprint(ord(\"m\"))\nprint(ord(\"n\"))\nHopefully this helps you to see why print(\"James\" &lt; \"Jane\") returns True\n\nA challenge for you!\nIn the next two challenges, we’ve deliberately left out or broken some code that you need to fix!\nFix this code so that it returns True\n\nExerciseSolution\n\n\nfirst_variable = 87.0\nsecond_variable = 9\n\nprint(first_variable % 80 ??? second_variable)\n\n\nfirst_variable = 87.0\nsecond_variable = 9\n\nprint(first_variable % 80 &lt; second_variable)\n\n# proof\nprint(first_variable % 80)\nprint(second_variable)\n\n\n\nFix this code so that it returns False\n\nExerciseSolution\n\n\nprint(\"Aardvark\" ??? \"Ant\")\n\n\nprint(\"Aardvark\" &gt; \"Ant\")\n\n#proof\nprint(ord(\"a\"))\nprint(ord(\"n\"))",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Boolean_Logic.html#equality",
    "href": "lessons/Boolean_Logic.html#equality",
    "title": "Truth & Conditions",
    "section": "Equality",
    "text": "Equality\nSo we’ve seen the comparison operators that you probably still remember from high-school maths. But sometimes we don’t want to test for difference, we want to test if two things are the same. In your maths class you probably just wrote \\[x = y\\] and moved on to the next problem, but remember: one equals sign is already being used to assign values to variables! As in:\nmy_var = 1\nTo test if something is exactly equal we use the equality comparison operator, which is two equals signs together (\\(==\\)). This equality comparison returns True if the contents of two variables/results of two calculations are equal. That’s a bit of a mouthful, but all we’re saying is that we compare the left-hand side (LHS) of the equality operator (\\(==\\)) with the right-hand side (RHS) to see if they evaluate to the same answer.\nA lot of new programmers make the mistake of writing = in their code when they wanted ==, and it can be hard to track this one down. So always ask yourself: am I comparing two things, or assigning one to the other?\nRun the following code and check you understand why the output produced is as it is.\n# This (=) assigns a value to a variable\nbritish_capital = \"London\"\nfrench_capital  = \"Paris\"\n\n# This (==) compares two variables\nprint(british_capital == french_capital)\n\n# This is probably a mistake\nbritish_capital = french_capital\nprint(british_capital)\n\nA challenge for you!\nBefore you run the code in each cell, try to think through what you expect each one to print out!\n# Is this True?\n2 == 34\n# How about this?\n7 == 7\n# How about this?\n\"Foo\" == \"Foo\"\n# And this?\n\"Foo\" == \"Bar\"\n\nExerciseHint\n\n\n# And this?\n10 % 3 == 3 / 3\n\n\n# This may help interpret the result here\nprint(10 % 3)\nprint(3 / 3)\n\n\n\n\n\nInequality\nWhat if you want to check if two things are different rather than equal? Well then you’ll need to use the Not Equal (\\(!=\\)) operator, which returns True when there’s no equality between the conditons you are comparing.\nCheck you understand the output when running the following code\n# Reset the variables to their 'defaults'\nbritish_capital = \"London\"\nfrench_capital  = \"Paris\"\n\n# This time python is going to print True,\n# since we are comparing different things\n# using the Not Equal operator!\nprint(british_capital != french_capital)",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Boolean_Logic.html#conditions",
    "href": "lessons/Boolean_Logic.html#conditions",
    "title": "Truth & Conditions",
    "section": "Conditions",
    "text": "Conditions\nOK, so now we’ve seen comparisons and booleans, but why? Where are we going with this? Think back to the first lesson and the example of what is happening inside a computer: if the user has clicked on the mouse then we need to do something (e.g. change the colour of the button, open the web link, etc.). Everything that we’ve done up until now basically happened on a single line: set this variable, set that variable, print out the result of the comparison.\nNow we’re going to step it up a level.\nTo check a condition you will need to use a statement (i.e. everything that makes up one or more lines of code line ) to see if that condition is True/False, in which case do one thing, or else do something else…\nLet’s see that in action!\n\nIf…\nLet’s start with a basic if statement. In Python you write it:\nif conditon-to-check:\n   statement\nSo an if condition starts with the word if and ends with a colon (:).\nThe statement is the code that we want the computer to run if the condition-to-check comes out True. However, notice that the next line – the statement line – is indendented. This is Python’s way to define a block of code.\nA block of code means that we can run several lines of code if the condition is True. As long as the code is indented then Python will treat it as code to run only if the condition is True.\nLet’s see a few examples. Run the following code cell and see if you can understand the output produced (given the code in the cell).\n# Condition 1\nif 2 &gt; 1:\n    print(\"&gt; Condition #1\")\n    \n# Condition 2\nif 1 &gt; 2: \n    print(\"&gt; Condition #2\")\n    \n# Condition 3\nif \"Foo\" == \"Foo\":\n    print(\"&gt; Condition #3\")\n    myVar = 1 + 5\n    print(\"     My var: \" + str(myVar))\n    \n# Condition 4\nif \"Foo\" != \"Foo\":\n    print(\"&gt; Condition #4\")\n    myVar = 1 + 5\n    print(\"     My var: \" + str(myVar))\n    \nprint(\"Done.\")\nSee how that works? Only conditions #1 and #3 were printed out, #2 and #4 were skipped over entirely!\nLet’s take these in order:\n\n2 is greater than 1, so the condition-to-check returns True and Python then looks at the next line to see what it should do next.\n1 is not greater than 2, so the condition-to-check returns False. Python then skips the next two indented lines which form part of the code block. It’s the indentation that tells Python they’re still part of the same code block. That entire code block would only be executed if the condition-to-check had been True.\n“Foo” is the same as “Foo”, so this condition is True. Python then runs the next three lines because the indentation tells Python that they are all part of the same code block. Notice that we can even do things like set new variables in a code block.\n“Foo” is still the same as “Foo”, but we were testing if they were not equal (!=) and so this condition is False. This time Python skips over the three lines and moves straight to the last print statement.\nNotice that the last print (\"Done.\") always runs, no matter what the previous conditions were, because it is not indented and so is not part of a code block.\n\nLet’s see another example (run the code and check you understand the result)\nlondon_population = 8600000\nparis_population  = 2200000 \n\nif london_population &gt; paris_population:\n    print(\"London is larger than Paris\")\nNote: Other languages such as C/C++ use curly braces {...} around a block, just in case you find other languages in examples when Googling for help.\n\n\n\n\n\n\nIndents vs. Tabs\n\n\n\nHow much should you indent? Although the official specification specifies 4 spaces, quite a few people indent using one tab instead. Technically, there is no difference as long as you are consistent (See this discussion). This apparently trivial issue is the sort of thing that leads to all kinds of heated argument (like whether you prefer Mac OSX or Windows; OSX is better, obviously). It’s such a famous aspect of the programming world that it even featured in an episode of the sit-com Silicon Valley:\n\n\n\n\nA challenge for you!\nThink about what the following code will print, before running it:\nlondon_population = 8600000\n\nif london_population &gt; 2000000:\n    print(str(london_population) + \" is more than 2 million people\")\n\nif london_population &lt; 10000000:\n    print(str(london_population) + \" is less than 10 million people\")\nComplete the missing code, while also fixing the broken bits (HINT: Remember the position of colons and indentation is important in Python!):\n\nExerciseSolution\n\n\nif (london_population % 8000000) == 600000 ???\nprint(\"Good job\")\n\n\nif (london_population % 8000000) == 600000:\n    print(\"Good job\")\n\n\n\n\n\n\nElse…\nOf course, only being able to use if would be pretty limiting. Wouldn’t it be handy to be able to say “if x is True: do one thing; otherwise do something else”. Well you can! When you want to run a different block of code depending on whether something is True or not, then you can use the else statement (only following a first if).\nHere’s an example:\nnewyork_population = 8400000 \n\nif london_population &lt; newyork_population:\n    largest_city = \"New York\" \nelse:\n    largest_city = \"London\"\n    \nprint(\"The largest city is \" + largest_city)\nAs you can see from the example above, the if: else: statement allows us to account for multiple outcomes when checking the logic of a condition.\nNotice how the else syntax is similar to the if statement: use the colon, and indent.\nAlso pay attention to the fact that not all of our code has run. Only the block after the else was run. So: - if returned False (London’s population is not less than that of New York) - So the else block ran instead.\nThis is why the largestCity variable was set to “London” and not “New York”. After the if: else: sequence the code goes back to its normal flow, and all the remaining lines will be executed.\nThe if: else: statement is like a fork in the road: you can take one road, or the other, but not both at the same time.\n\nA challenge for you!\nFix the code below so that it prints out London's population is above my threshold.\n\nExerciseSolution\n\n\nmythreshold = 1000000\nif london_population &lt;= mythreshold ???\n    print(\"London's population is below my threshold\")\n???:\n    print(\"London's popuation is above my threshold\")\n\n\nmythreshold = 1000000\nif london_population &lt;= mythreshold:\n    print(\"London's population is below my threshold\")\nelse:\n    print(\"London's popuation is above my threshold\")\n\n\n\n\n\n\nElif…\nOnce again: so far, so good. But what if you need to have multiple forks? Well, then you can use a sequence of statements that sounds like “IF this happens do this, ELSE IF this second condition holds do that, ELSE IF a third condition is true perform this other ELSE do finally this…”\nThe operator we are going to use is elif, the lazy version of ELSE IF.\n# Like so:\nmyUpperBoundary = 12000000\nmyLowerBoundary = 2000000\n\nif london_population &lt; myUpperBoundary:\n    print(\"London is below my upper threshold.\")\n\nelif london_population &gt; myLowerBoundary:\n    print(\"London is above my lower threshold.\")\n\nelif london_population != 340000: \n    print(\"London population is not equal to 340,000.\")\n    \nelse:\n    print(\"How did I get here?\")\n    \nprint(\"And now back to normal code execution.\")\nWhy didn’t the output look like this:\nLondon is below my upper threshold.\nLondon population is not equal to 340,000.\nHow did I get here?\nAnd now back to normal code execution.\n\nThis a tricky one: the first thing that evaluates to True (that London is below the upper threshold) is the one that ‘wins’. Computers are also lazy in their own way: since it found that the answer to the first elif was True it didn’t bother to look at the second elif and the else, it only ran the one code block.\n\nA challenge for you!\nComplete the missing bits so that the logically correct print statement is output:\n\nExerciseSolution\n\n\nlondon_population = 10\n??? london_population &lt;= 9:\n    print(\"First case is true\")\n??? london_population &gt; 99: \n    print(\"Second case is true\")\n??? london_population == 4:\n    print(\"Third case is true\")\n??? print(\"Well, looks like none of the above statements were true!\")\n\nprint(\"And now back to normal code execution.\")\n\n\nlondon_population = 10\nif london_population &lt;= 9:\n    print(\"First case is true\")\nelif london_population &gt; 99: \n    print(\"Second case is true\")\nelif london_population == 4:\n    print(\"Third case is true\")\nelse: print(\"Well, looks like none of the above statements were true!\")\n\nprint(\"And now back to normal code execution.\")",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Boolean_Logic.html#boolean-logic",
    "href": "lessons/Boolean_Logic.html#boolean-logic",
    "title": "Truth & Conditions",
    "section": "Boolean Logic",
    "text": "Boolean Logic\nBoolean logic and Boolean algebra have to do with set theory but also lie at the heart of the modern computer! A computer works by combining AND, OR, XOR and NAND circuits to produce ever more complex calculations (see this video and this one if you’d appreciate an introduction to/refresher on computer hardware). Naturally, we also use this same concept a lot in programming computers!\n\n\n\nThe very logical Prof. George Boole, circa 1860\n\n\nIn Python there are three boolean logic opertors, these are (in ascending order of priority): or, and, and not.\nWe’ll look at these in more detail in a second, but here’s the ‘cheat sheet’: - OR: if either A OR B are True then run the following code block… - AND: if A AND B are True then run the following code block… - NOT: if NOT(A) is True (because A is False) then run the following code block…\nIt might help you to take a look at these Venn diagrams (source: Wikimedia Commons) that express the same three operations in graphical form. Imagine that x and y are both conditions-to-test… The left one is AND because it is only the combination of x AND y that is red; the centre one is OR because it represents any combination of x OR y being red; the rightmost is NOT because it is the opposite of x that is red.\n\n\n\nVenn\n\n\nOK, let’s look at it in Python.\n\nAND\nThe and operator (just like in plain English!) is used when two conditions must both be True at the same time. So it has two arguments and returns True if, and only if, both of them are True. Otherwise it returns False.\ncondition1 = 2 &lt; 4 # True\ncondition2 = (6/3) == 2 # Also True\n\nif (condition1) and (condition2): # Both are true\n    print(\"1. Both conditions are true!\")\nelse:\n    print(\"1. Mmm... something's wrong!\")\n    \nif condition1 and 6.0/5 == 1:\n    print(\"2. Both conditions are true!\")\nelse:\n    print(\"2. Mmm... something's wrong!\")\n\n\nOR\nThe or operator is used when we don’t care which condition is True, as long as one of them is! So if either (or both!) conditions are True, then the operator returns True. Only if both are False does it evalute to False.\ncondition1 = 2 &lt; 4 # True\ncondition2 = (6/3) != 2 # False\n\nif (condition1) or (condition2):\n    print(\"1. Both conditions are true!\")\nelse:\n    print(\"1. Mmm... something's wrong!\")\n\nif 2 &gt; 4 and 6.0/5 == 1:\n    print(\"2. Both conditions are true!\")\nelse:\n    print(\"2. Mmm... something's wrong!\")\n\n\nA challenge for you!\nTry to change the values of conditions and see the different outcomes, but first you’ll need to fix the Syntax Errors and the Exceptions!\n\nExerciseSolution\n\n\ncondition1 = 2 &lt; 4\ncondition2 ??? (6/3) != 2\n\nif (condition1) ??? (condition2):\n    print(\"Either one or two conditions are true!\")\nelif:\nprint(\"mmh..they must both be false\"\")\n\n\ncondition1 = 2 &lt; 4\ncondition2 = (6/3) != 2\n\nif (condition1) or (condition2):\n    print(\"Either one or two conditions are true!\")\nelse:\n    print(\"mmh..they must both be false\")\n\n\n\n\n\nNOT\nLastly, the not operator allows you to reverse (or invert, if you prefer) the value of a Boolean. So it turns a True into a False and vice-versa.\n# Like so:\nconditionInverted = not (2 == 2) # not turns True into False\nprint(conditionInverted)\n\n# And:\nconditionInverted = not (\"Foo\" == \"Bar\") # not turns False into True\nprint(conditionInverted)\n\nA challenge for you!\nCan you guess the result of this code before you run it?\nif not conditionInverted:\n   print(\"I'm True\")\nelif not (4%3  != 1):\n   print(\"2\")\nelse:\n   print(\"99\" == str(99)+1)",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Boolean_Logic.html#applied-geo-example",
    "href": "lessons/Boolean_Logic.html#applied-geo-example",
    "title": "Truth & Conditions",
    "section": "Applied Geo-Example",
    "text": "Applied Geo-Example\nThe aim of the excercise is to build a program that allows a user to choose a given London borough from a list, and get in return both its total population and a link to a OpenStreetMap that pin points its location.\nWe are going to introduce a function called input that, as the name implies, takes an input from the user (interactively, that is!). We’ll use it to interact with the user of our program. The input is going to be saved in a variable called user_input.\nI’ve provided a basic scaffolding of the code. It covers the case where the user choses the City borough, or provides an invalid input. Complete the script so that the three other boroughs can be found by the user.\nHINT: You will need to use elif statements to check for the various cases that use user might input.\n\nExerciseSolution\n\n\n# variable with the City borough's total population (in thousands)\ncity_of_London = 7.375\n# City borough's map marker\ncity_coords = \"http://www.openstreetmap.org/?mlat=51.5151&mlon=-0.0933#map=14/51.5151/-0.0933\"\n\n# Other boroughs\n# camden = 220.338\n# camden_coords = \"http://www.openstreetmap.org/?mlat=51.5424&mlon=-0.2252#map=12/51.5424/-0.2252\"\n# hackney = 246.270\n# hackney_coords = \"http://www.openstreetmap.org/?mlat=51.5432&mlon=-0.0709#map=13/51.5432/-0.0709\"\n# lambeth = 303.086\n# lambeth_coords = http://www.openstreetmap.org/?mlat=51.5013&mlon=-0.1172#map=13/51.5013/-0.1172\n\n# Let's ask the user for some input\n# and store his answer\nuser_input = input(\"\"\"\nChoose a neighbourhood by type the corresponding number:\n1- City of London\n2- Lambeth\n3- Camden\n4- Hackney\n\"\"\")\n\n# Arbitrarily assign case 1 to City of London borough\n\nif (user_input == '1'):    \n    choosen_borough = city_of_London\n    borough_coordinates = city_coords \n    # print the output\n    # notice we are casting the user answer to string\n    print(\"You have choosen number : \"+ str(user_input))\n    print(\"The corresponding borough has a population of \"+ str(choosen_borough) +\" thousand people\")\n    print(\"Visit the borough clicking here: \" + borough_coordinates)\n    # ---------------\n    # add more cases here...\n    # ---------------\nelse:\n    print(\"That's not in my system. Please try again!\")\n\n\n# variable with the City borough's total population (in thousands)\ncity_of_London = 7.375\n# City borough's map marker\ncity_coords = \"http://www.openstreetmap.org/?mlat=51.5151&mlon=-0.0933#map=14/51.5151/-0.0933\"\n\n# Other boroughs\ncamden = 220.338\ncamden_coords = \"http://www.openstreetmap.org/?mlat=51.5424&mlon=-0.2252#map=12/51.5424/-0.2252\"\nhackney = 246.270\nhackney_coords = \"http://www.openstreetmap.org/?mlat=51.5432&mlon=-0.0709#map=13/51.5432/-0.0709\"\nlambeth = 303.086\nlambeth_coords = \"http://www.openstreetmap.org/?mlat=51.5013&mlon=-0.1172#map=13/51.5013/-0.1172\"\n\n# Let's ask the user for some input\n# and store his answer\nuser_input = input(\"\"\"\nChoose a neighbourhood by type the corresponding number:\n1- City of London\n2- Lambeth\n3- Camden\n4- Hackney\n\"\"\")\n\n# Arbitrarily assign case 1 to City of London borough\n\nif (user_input == '1'):    \n    choosen_borough = city_of_London\n    borough_coordinates = city_coords \n    # print the output\n    # notice we are casting the user answer to string\n    print(\"You have choosen number : \"+ str(user_input))\n    print(\"The corresponding borough has a population of \"+ str(choosen_borough) +\" thousand people\")\n    print(\"Visit the borough clicking here: \" + borough_coordinates)\nelif(user_input == '2'):    \n    choosen_borough = lambeth\n    borough_coordinates = lambeth_coords \n    # print the output\n    # notice we are casting the user answer to string\n    print(\"You have choosen number : \"+ str(user_input))\n    print(\"The corresponding borough has a population of \"+ str(choosen_borough) +\" thousand people\")\n    print(\"Visit the borough clicking here: \" + borough_coordinates)\nelif(user_input == '3'):    \n    choosen_borough = camden\n    borough_coordinates = camden_coords \n    # print the output\n    # notice we are casting the user answer to string\n    print(\"You have choosen number : \"+ str(user_input))\n    print(\"The corresponding borough has a population of \"+ str(choosen_borough) +\" thousand people\")\n    print(\"Visit the borough clicking here: \" + borough_coordinates)\nelif(user_input == '4'):    \n    choosen_borough = hackney\n    borough_coordinates = hackney_coords \n    # print the output\n    # notice we are casting the user answer to string\n    print(\"You have choosen number : \"+ str(user_input))\n    print(\"The corresponding borough has a population of \"+ str(choosen_borough) +\" thousand people\")\n    print(\"Visit the borough clicking here: \" + borough_coordinates)    \n    \nelse:\n    print(\"That's not in my system. Please try again!\")\n\n\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license , and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Boolean Logic"
    ]
  },
  {
    "objectID": "lessons/Dicts.html",
    "href": "lessons/Dicts.html",
    "title": "Dictionaries",
    "section": "",
    "text": "In this lesson, we’ll continue our exploration of more advanced data structures. Last time we took a peek at a way to represent ordered collections of items via lists. This time we’ll use dictionaries to create collections of ordered items accessed by name, instead of position.\nAccording to the Official Docs:",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Dicts.html#creating",
    "href": "lessons/Dicts.html#creating",
    "title": "Dictionaries",
    "section": "Creating",
    "text": "Creating\nIn other words, dictionaries are not lists: instead of just a checklist, we now have a key and a value. We use the key to find the value. So a generic dictionary looks like this:\ntheDictionary = {\n    key1: value1,\n    key2: value2,\n    key3: value3,\n    ...\n}\nEach key/value pair is linked by a ‘:’, and each pair is separated from other pairs by a ‘,’. It doesn’t really matter if you put everything on newlines (as we do here) or all on the same line. We’re just doing it this way to make it easier to read.\nHere’s a more useful implementation of a dictionary:\nmyDict = {\n    \"key1\": \"Value 1\",\n    3: \"3rd Value\",\n    \"key2\": \"2nd Value\",\n    \"Fourth Key\": [4.0, 'Jon']\n}\nprint(myDict)\nNotice that almost any type of data can go into a dictionary: strings, integers, and floats. There’s even a list in this dictionary ([4.0, 'Jon'])! The only constraint is that the key must be immutable; this means that it is a simple, static identifier and that can’t change.\n# this will result in an error\nmyFaultyDict = {\n    [\"key1\", 1]: \"Value 1\", \n    \"key2\": \"2nd Value\", \n    3: \"3rd Value\", \n    8.0: [5, 'jon']\n}\nThis doesn’t work because you can’t use a list ([\"key1\",1]) as a key, though as you saw above you can use a list as a value. For more on the subject of (im)mutability check out this SO answer ).",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Dicts.html#accessing",
    "href": "lessons/Dicts.html#accessing",
    "title": "Dictionaries",
    "section": "Accessing",
    "text": "Accessing\nLike lists, we access an element in a dictionary using a ‘location’ marked out by a pair of square brackets ([…]). The difference is that the index is no longer an integer indicating the position of the item that we want to access, but is a key in the key:value pair:\nprint(myDict[\"key1\"])\nprint(myDict[\"Fourth Key\"])\nNotice how now we just jump straight to the item we want? We don’t need to think about “Was that the fourth item on the list? Or the fifth?” We just use a sensible key, and we can ask for the associated value directly.\n\nA challenge for you!\nHow would you print out “2nd Value” from myDict?\n\nExerciseSolution\n\n\nmyDict = {\n    \"key1\": \"Value 1\",\n    3: \"3rd Value\",\n    \"key2\": \"2nd Value\",\n    \"Fourth Key\": [4.0, 'Jon']\n}\n\nprint(???)\n\n\nmyDict = {\n    \"key1\": \"Value 1\",\n    3: \"3rd Value\",\n    \"key2\": \"2nd Value\",\n    \"Fourth Key\": [4.0, 'Jon']\n}\n\nprint(myDict[\"key2\"])\n\n\n\nWhen it comes to error messages, dicts and lists behave in similar ways. If you try to access a dictionary using a key that doesn’t exist then Python raises an exception.\nWhat is the name of the exception generated by the following piece of code? Can you find it the Official Docs?\nprint(myDict[99])\nHandy, no? Again, Python’s error messages are giving you helpful clues about where the problem it’s encountering might be! Up above we had a TypeError when we tried to create a key using a list. Here, we have a KeyError that tells us something must be wrong with using 99 as a key in myDict. In this case, it’s that there is no key 99!\n\n\nA challenge for you\nCan you turn these lists into dictionary called capitalDict?\ncountry = ['Costa Rica','Croatia','Cuba'] #keys\ncapital_city = ['San Jose','Zagreb','Havana'] #values\nWe already found out that we can easily convert between different types. Dictionary is also a data type, so we can convert these lists to dictionary just like we convert strings into integers using str and int. However, since we need to pair them, we need an additional function called zip to pair the keys and values.\n\nExerciseSolution\n\n\ncountry = ['Costa Rica','Croatia','Cuba'] #keys\ncapital_city = ['San Jose','Zagreb','Havana'] #values\n\ncapitalDict = ???(zip(???,???))\n\n\ncountry = ['Costa Rica','Croatia','Cuba'] #keys\ncapital_city = ['San Jose','Zagreb','Havana'] #values\n\ncapitalDict = dict(zip(country,capital_city))\n\n\n\nHow would you print out the capital city of Croatia from capitalDict?\n\nExerciseSolution\n\n\nprint(???)\n\n\nprint(capitalDict['Croatia'])",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Dicts.html#a-simple-phone-book",
    "href": "lessons/Dicts.html#a-simple-phone-book",
    "title": "Dictionaries",
    "section": "A Simple Phone Book",
    "text": "A Simple Phone Book\nOne of the simplest uses of a dictionary is as a phone book! (If you’re not sure what a phone book is here’s a handy guide and here’s an example of someone using one).\nSo here are some useful contact numbers: 1. American Emergency Number: 911 2. British Emergency Number: 999 3. Icelandic Emergency Number: 112 4. French Emergency Number: 112 5. Russian Emergency Number: 102\nNow, how would you create a dictionary that allowed us to look up and print out an emergency phone number based on the two-character ISO country code? It’s going to look a little like this:\n\nExerciseSolution\n\n\neNumbers = {\n    ...\n}\nprint(\"The Icelandic emergency number is \" + eNumbers['IS'])\nprint(\"The American emergency number is \" + eNumbers['US'])\n\n\neNumbers = {\n    \"IS\": '112', # It's not very important here whether we use single- or double-quotes\n    \"US\": '911'\n}\nprint(\"The Icelandic emergency number is \" + eNumbers['IS'])\nprint(\"The American emergency number is \" + eNumbers['US'])",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Dicts.html#useful-dictionary-methods",
    "href": "lessons/Dicts.html#useful-dictionary-methods",
    "title": "Dictionaries",
    "section": "Useful Dictionary Methods",
    "text": "Useful Dictionary Methods\nWe are going to see in the next couple of lessons how to systematically access values in a dictionary (amongst other things). For now, let’s also take in the fact the dictionaries also have utility methods similar to what we saw with the list. And as with the list, these methods are functions that only make sense when you’re working with a dictionary, so they’re bundled up in a way that makes them easy to use.\nLet’s say that you have forgotten what keys you put in your dictionary…\nprogrammers = {\n    \"Charles\": \"Babbage\",\n    \"Ada\": \"Lovelace\",\n    \"Alan\": \"Turing\"\n}\n\nprint(programmers.keys())\nOr maybe you just need to access all of the values without troubling to ask for each key:\nprint(programmers.values())\nOr maybe you even need to get them as pairs:\n# Output is a list of key-value pairs!\nprint(programmers.items())\n\nA challenge for you\nCan you access all the values of capitalDict from the previous challenge?\n\nExerciseSolution\n\n\nprint(???)\n\n\nprint(capitalDict.values())\n\n\n\n\n\nAre You On the List? (Part 2)\nAs with the list data type, you can check the presence or absence of a key in a dictionary, using the in / not in operators… but note that they only work on keys.\nprint(\"Charles\" in programmers)\nprint(\"Babbage\" in programmers)\nprint(True  not in programmers)\n\n\nWhat Do You Do if You’re Not On the List?\nOne challenge with dictionaries is that sometimes we have no real idea if a key exists or not. With a list, it’s pretty easy to figure out whether or not an index exists because we can just ask Python to tell us the length of the list. So that makes it fairly easy to avoid having the list ‘blow up’ by throwing an exception.\nIt’s rather harder for a dictionary though, so that’s why we have the dedicated get() method: it not only allows us to fetch the value associated with a key, it also allows us to specify a default value in case the key does not exist:\nprint(programmers.get(\"Lady Ada\", \"Are you sure you spelled that right?\") )\nSee how this works: the key doesn’t exist, but unlike what happened when we asked for myDict[99] we don’t get an exception, we get the default value specified as the second input to the method get.\nSo you’ve learned two things here: that functions can take more than one input (this one takes both the key that we’re looking for, and value to return if Python can’t find the key); and that different types (or classes) of data have different methods (there’s no get for lists).",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Dicts.html#lists-of-lists-dictionaries-of-lists-dictionaries-of-dictionaries-oh-my",
    "href": "lessons/Dicts.html#lists-of-lists-dictionaries-of-lists-dictionaries-of-dictionaries-oh-my",
    "title": "Dictionaries",
    "section": "Lists of Lists, Dictionaries of Lists, Dictionaries of Dictionaries… Oh my!",
    "text": "Lists of Lists, Dictionaries of Lists, Dictionaries of Dictionaries… Oh my!\nOK, this is where it’s going to get a little weird but you’re also going to see how programming is a little like Lego: once you get the building blocks, you can make lots of cool/strange/useful contraptions from some pretty simple concepts.\nRemember that a list or dictionary can store anything: so the first item in your list could itself be a list! For most people starting out on programming, this is the point where their brain starts hurting (it happened to us) and you might want to throw up your hands in frustration thinking “I’m never going to understand this!” But if you stick with it, you will.\nAnd this is really the start of the power of computation.\n\nA Data Set of City Attributes\nLet’s start out with what some (annoying) people would call a ‘trivial’ example of how a list-of-lists (LoLs, though most people aren’t laughing) can be useful. Let’s think through what’s going on below: what happens if we write cityData[0]?\n# Format: city, country, population, area (km^2)\ncityData = [\n    ['London','U.K.',8673713,1572],\n    ['Paris','France',2229621,105],\n    ['Washington, D.C.','U.S.A.',672228,177],\n    ['Abuja','Nigeria',1235880,1769],\n    ['Beijing','China',21700000,16411],\n]\n\nprint(cityData[0])\nSo how would we access something inside the list returned from cityData[0]?\nWhy not try:\ncityData[0][1]\nSee if you can figure out how to retrieve and print the following from cityData: 1. France 2. 16411 3. Washington, D.C.\nType the code into the coding area below…\nprint(cityData[1][1])\nprint(cityData[4][3])\nprint(cityData[2][0])\n\n\nA challenge for you\nCan you retrieve and print the following from cityData:\n\nNigeria\n8673713\n177\n\n\nExerciseSolution\n\n\nprint(???)\nprint(???)\nprint(???) \n\n\nprint(cityData[3][1])\nprint(cityData[0][2])\nprint(cityData[2][3])\n\n\n\n\n\nA Phonebook+\nSo that’s an LoL (list-of-lists). Let’s extend this idea to what we’ll call Phonebook+ which will be a DoL (dictionary-of-lists). In other words, a phonebook that can do more than just give us phone numbers! We’re going to build on the emergency phonebook example above.\n# American Emergency Number: 911\n# British Emergency Number: 999\n# Icelandic Emergency Number: 112\n# French Emergency Number: 112\n# Russian Emergency Number: 102\neNumbers = {\n    'IS': ['Icelandic',112],\n    'US': ['American',911],\n    'FR': ['French',112],\n    'RU': ['Russian',102],\n    'UK': ['British',999]\n}\nprint(\"The \" + eNumbers['IS'][0] + \" emergency number is \" + str(eNumbers['IS'][1]))\nprint(\"The \" + eNumbers['US'][0] + \" emergency number is \" + str(eNumbers['US'][1]))\nprint(\"The \" + eNumbers['FR'][0] + \" emergency number is \" + str(eNumbers['FR'][1]))\n\n\nA Challenge for you\nSee if you can create the rest of the eNumbers dictionary and then print out the Russian and British emergency numbers.\n\nExerciseSolution\n\n\nprint(\"The \" + ??? + \" emergency number is \" + ???)\nprint(\"The \" + ??? + \" emergency number is \" + ???) \n\n\nprint(\"The \" + eNumbers['RU'][0] + \" emergency number is \" + str(eNumbers['RU'][1]))\nprint(\"The \" + eNumbers['UK'][0] + \" emergency number is \" + str(eNumbers['UK'][1]))\n\n\n\n\n\nDictionary-of-Dictionaries\nOK, this is the last thing we’re going to throw at you today – getting your head around ‘nested’ lists and dictionaries is hard. Really hard. But it’s the all-important first step to thinking about data the way that computer ‘thinks’ about it. This is really abstract: something that you access by keys, which in turn gives you access to other keys… it’s got a name: recursion. And it’s probably one of the cleverest things about computing.\nHere’s a bit of a complex DoD, combined with a DoL, and other nasties:\ncityData2 = {\n    'London' : {\n        'population': 8673713,\n        'area': 1572, \n        'location': [51.507222, -0.1275],\n        'country': {\n            'ISO2': 'UK',\n            'Full': 'United Kingdom',\n        },\n    },\n    'Paris' : {\n        'population': 2229621,\n        'area': 105.4,\n        'location': [48.8567, 2.3508],\n        'country': {\n            'ISO2': 'FR',\n            'Full': 'France',\n        },\n    }\n}\nTry the following code:\nprint(cityData2['Paris'])\nprint(cityData2['Paris']['country']['ISO2'])\nprint(cityData2['Paris']['location'][0])\nNow, figure out how to print: The population of Paris, the capital of France (FR), is 2229621.\n\nExerciseSolution\n\n\nprint(\"The population of Paris, the capital of \" + str(cityData2['Paris']['country']['Full']) + \" \" \\\n      + \"(\" + ??? + \") \" + \"is \"+ ??? + \".\")\n\n\nprint(\"The population of Paris, the capital of \" + str(cityData2['Paris']['country']['Full']) + \" \" \\\n      + \"(\" + str(cityData2['Paris']['country']['ISO2']) + \") \" + \"is \"+ str(cityData2['Paris']['population']) + \".\")\n\n\n\nAnd print It has a density of 21153.899 persons per square km.\nHint: to calculate density, divide population with area.\n\nExerciseSolution\n\n\nprint(\"It has a density of \" + ???)\n\n\n#| solution2: hidden\nprint(\"It has a density of \" + str(cityData2['Paris']['population'] / cityData2['Paris']['area'] ))\n\n\n\nDo the same for London.\n\nExerciseSolution\n\n\nprint(???)\n\n\n# Note that we can tweak the formatting a bit: Python is smart \n# enough to understand that if you have a '+' on the end of a\n# string and there next line is also a string then it'll \n# continue to concatenate the string...\nprint(\"The population of \" + 'London' + \", the capital of \" + \n      cityData2['London']['country']['Full'] + \" (\" + cityData2['London']['country']['ISO2'] + \"), is \" + \n      str(cityData2['London']['population']) + \". It has a density of \" + \n      str(cityData2['London']['population']/cityData2['London']['area']) + \" persons per square km\")\n\n# But a _better_ way to do this might be one in which we don't\n# hard-code 'London' into the output -- by changing the variable\n# 'c' to Paris we can change the output completely...\nc  = 'Paris'\ncd = cityData2[c]\nprint(\"The population of \" + c + \", the capital of \" + \n      cd['country']['Full'] + \" (\" + cd['country']['ISO2'] + \"), is \" + \n      str(cd['population']) + \". It has a density of \" + \n      \"{0:8.1f}\".format(cd['population']/cd['area']) + \" persons per square km\")",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Dicts.html#applied-geo-example",
    "href": "lessons/Dicts.html#applied-geo-example",
    "title": "Dictionaries",
    "section": "Applied Geo-example",
    "text": "Applied Geo-example\nLet’s continue our trips around the world! This time though, we’ll do things better, and instead of using a simple URL, we are going to use a real-word geographic data type, that you can use on a web-map or in your favourite GIS software.\nIf you look down below at the KCL_position variable you’ll see that we’re assigning it a complex and scary data structure. Don’t be afraid! If you look closely enough you will notice that is just made out the “building blocks” that we’ve seen so far: floats, lists, strings..all wrapped comfortably in a cosy dictionary!\nThis is simply a formalised way to represent a geographic marker (a pin on the map!) in a format called GeoJSON.\nAccording to the awesome Lizy Diamond\n\nGeoJSON is an open and popular geographic data format commonly used in web applications. It is an extension of a format called JSON, which stands for JavaScript Object Notation. Basically, JSON is a table turned on its side. GeoJSON extends JSON by adding a section called “geometry” such that you can define coordinates for the particular object (point, line, polygon, multi-polygon, etc). A point in a GeoJSON file might look like this:\n\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [\n      -122.65335738658904,\n      45.512083676585156\n    ]\n  },\n  \"properties\": {\n    \"name\": \"Hungry Heart Cupcakes\",\n    \"address\": \"1212 SE Hawthorne Boulevard\",\n    \"website\": \"http://www.hungryheartcupcakes.com\",\n    \"gluten free\": \"no\"\n  }\n}\n\nGeoJSON files have to have both a \"geometry\" section and a \"properties\" section. The \"geometry\" section houses the geographic information of the feature (its location and type) and the \"properties\" section houses all of the descriptive information about the feature (like fields in an attribute table). Source\n\nNow, in order to have our first “webmap”, we have to re-create such GeoJSON structure.\nAs you can see there are two variables containing King’s College Longitude/Latitude coordinate position. Unfortunately, they are in the wrong data type. Also, the variable longitude is not included in the list KCLCoords and the list itself is not assigned as a value to the KCLGeometrydictionary.\nTake all the necessary steps to fix the code, using the functions we’ve seen so far.\n# Don't worry about the following lines\n# I'm simply requesting some modules to\n# have additional functions at my disposal\n# which usually are not immediately available\nimport json\nfrom ipyleaflet import Map, GeoJSON, basemaps\n\n# King's College coordinates\n# What format are they in? Does it seem appropriate?\n# How would you convert them back to numbers?\nlongitude = -0.11596798896789551\nlatitude = 51.51130657591914\n\n# Set this up as a coordinate pair \nKCL_Coords = [longitude, latitude ]\n\n# How can you assign KCLCoords to \n# the key KCLGeometry[\"coordinates\"]?\nKCL_Geometry = {\n        \"type\": \"Point\",\n\n        \"coordinates\": KCL_Coords\n      }\n\nKCL_Position = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"marker-color\": \"#7e7e7e\",\n        \"marker-size\": \"medium\",\n        \"marker-symbol\": \"building\",\n        \"name\": \"KCL\"\n      },\n      \"geometry\": KCL_Geometry\n    }\n  ]\n}\n\n# OUTPUT\n# -----------------------------------------------------------\n# I'm justing using the \"imported\" module to print the output\n# in a nice and formatted way\nprint(json.dumps(KCL_Position, indent=4))\n# We can also show this in Jupyter directly \n# (it won't show up in the PDF version though)\nm = Map(center = (51.51, -0.10), zoom=12, min_zoom=5, max_zoom=20, \n   basemap=basemaps.OpenTopoMap)\ngeo = GeoJSON(data=KCL_Position)\nm.add_layer(geo)\nm\nAnd here we request a remote GeoJSON file (from url), convert to a dictionary, and place it in a map as a new layer.\nimport json\nimport random\nimport requests\n\nfrom ipyleaflet import Map, GeoJSON\n\nurl = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'\nr   = requests.get(url)\nd   = r.content.decode(\"utf-8\")\nj   = json.loads(d)\n\ndef random_color(feature):\n    return {\n        'color': 'black',\n        'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),\n    }\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=j,\n    style={\n        'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n    },\n    hover_style={\n        'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n    },\n    style_callback=random_color\n)\nm.add_layer(geo_json)\n\nm\nAs proof that behind this all is just a dictionary:\nprint(json.dumps(j, indent=4))\nAfter you’ve run the code, Python will have saved a file called my-first-marker.geojson in the folder where you are running the lesson. Try to upload it on this website (Geojson.io) and check it shows a marker somewhere in central London…\n\nFurther references:\nGeneral list or resources - Awesome list of resources - Python Docs - HitchHiker’s guide to Python - Learn Python the Hard Way - Lists - Learn Python the Hard Way - Dictionaries\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Dictionaries"
    ]
  },
  {
    "objectID": "lessons/Functions.html",
    "href": "lessons/Functions.html",
    "title": "Introduction to Functions",
    "section": "",
    "text": "In this lesson we’ll cover functions in Python, a concept that you’ve already encountered but to which you’ve not yet been formally introduced. Now we’re going to dig into this a little bit more because writing functions is where lazy programmers become good programmers.\nIn other words, as we saw with the concept of iteration, programmers are lazy and they tend want to avoid doing boring tasks over and over again. The idea is to avoid “wasting time re-inventing the wheel” and programmers have abbreviated this idea to the acronym D.R.Y. (Do not Repeat Yourself): if you are doing something more than once or twice, ask yourself if there’s a way to encapsulate what you are doing in a function: you write the function once, and then call it whenever you need to complete that task.\nNaturally, D.R.Y. has its opposite: W.E.T. (We Enjoy Typing or Write Everything Twice). Dry is nearly always better than wet.\nEncapsulating regularly-used bits of code in functions has several advantages: * Your code is more readable: because you only have to write a function once and can then re-use it as many times as you like, your files are shorter. * Your code is easier to maintain: because you only have to write a function once, if you find a mistake in your code, you also only have to fix it in one place. * Your can code more quickly: things that you do a lot can even be stuck in a separate file that you import into your code so that your most-used functions are immediately available.\nBasically, a function is a way to do something to something in a portable, easy-to-use little bundle of code.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#functions-101",
    "href": "lessons/Functions.html#functions-101",
    "title": "Introduction to Functions",
    "section": "Functions 101",
    "text": "Functions 101\nWe’ve already met and used some functions, especially when we dealt with lists and dictionaries:\nmyList = [1,\"two\", False, 9.99]\nlen(myList) # A function\nprint(myList) # A different function!\n\nLayout of a Function\nAs we briefly mentioned in another lesson, any ‘word’ followed by a set of parenthesis is a function. The ‘word’ is the function’s name, and anything that you write within the parantheses are the function’s inputs (also known as parameters). Like so:\n\nfunction_name(optional_parameter_1, optional_parameter_2, ...)\nSo how do we create (instantiate in programming terms) a new function? Like everything else in Python, functions have specific rules that you have to follow for the computer to understand what you want it to do. In this case there are two separate steps: the function definition and the function call.\n\n\nFunction Definition\nThis is a function definition:\ndef myFirstFunc():\n    print(\"Nice to meet you!\")\nLet’s see what happened there: - We indicated that we wanted to define (lazy version: def) a new function. - Right after def we gave the function a name: myFirstFunc. - After the new function’s name there’s the set of parenthesis and a colon. - The line(s) of the function are indented (just like a loop).\nThe reason for the indenting is the same as for a while loop or an if condition! It indicates to the Python interpreter that whatever is indented belongs to the function. Is like saying: “Look man, I’m going to define this myFirstFunc function, and whatever is indented afterwards is part of the function”. That is what we call the function’s body, and it’s the full package of instructions that we want the computer to run every time we call the function.\n\n\nFunction Call\nCool, now that we have defined a function how do we use it?\nThe same that we do with ‘built-in’ functions like print and len; we call it by just typing:\nmyFirstFunct()\nTry it yourself in the code cell below!\n# the function definition\ndef myFirstFunc():\n    print(\"Nice to meet you!\")\n\n# the function call\nmyFirstFunc()\nNotice that the sequence of function definiton (def) and then function call (function_name()) is important! Think about it: how would Python know what we are referring to (i.e. what is the myFirstFunc it has to call?), if we haven’t yet specified it?\nIt’s the same as with variables: try to print one before you’ve defined it and Python will complain!\nprint(myVariable)\nmyVariable = \"Hallo Hallo!\"\nReading (out loud!) the error message hopefully makes the error obvious… Quite explicit, isn’t it? :)\nmyVariable = \"Hallo Hallo!\"\nprint(myVariable)\n\n\nA challenge for you!\nDefine a new function called “sunnyDay” that prints the string “What a lovely day!”\n\nExerciseSolution\n\n\n#your code here\n\n\ndef sunnyDay():\n    print(\"What a lovely day!\")\n\n\n\nNow define a function named “gloomyDay” that prints “I hate rainy days!”\n\nExerciseSolution\n\n\n#your code here\n\n\ndef gloomyDay():\n    print(\"I hate rainy days!\")\n\n\n\nFinally, call the two functions you have defined so that “I hate rainy days!” is printed before “What a lovely day!”\n\nExerciseSolution\n\n\n#your code here\n\n\ngloomyDay()\nsunnyDay()",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#arguments",
    "href": "lessons/Functions.html#arguments",
    "title": "Introduction to Functions",
    "section": "Arguments",
    "text": "Arguments\nThose are pretty basic functions, and as you might have noticed they all kind of do the same thing but are no shorter than the thing they replaced (a single print command). You will definetely need them though whenever you are using a function to process some input and return some output. In that case the paramters are inputs that you are passing to the function.\ndef myFunction( input_parameter ):\n# do something to the input\n    return input_parameter\ndef printMyName( name ):\n    print(\"Hi! My name is: \" + name)\n\nprintMyName(\"Gerardus\")\n\nA challenge for you!\nWe’ve already defined printMyName, so you don’t need to do that again. Just ask the function to print your name!\n\nExerciseSolution\n\n\n#your code here\n\n\nprintMyName(\"James\")\n\n\n\nA little more useful, right? If we had to print out name badges for a big conference, rather than typing “Hi! My name is …” hundreds of times, if we had a list of people’s names, we could just use a for loop to print out each one in turn using this function. The function adds the part that is the same for every name badge and all we need to do is pass it the input parameters. In fact, why don’t we try that now?\nfor name in [\"Jon Reades\", \"James Millington\", \"Chen Zhong\", \"Naru Shiode\"]:\n    printMyName(name)\nIn the function printMyName we used just one parameter as an input, but we are not constrained to just one. We can input many parameters separated by commas; let’s redefine the printMyName function:\ndef printMyName(name, surname):\n    print(\"Hi! My name is \"+ name + \" \" + surname)\n\nprintMyName(\"Gerardus\", \"Merkatoor\")\nAnd now can pass input parameters to a function dynamically from a data structure within a loop:\nbritishProgrammers = [\n    [\"Babbage\", \"Charles\"],\n    [\"Lovelace\", \"Ada\"], \n    [\"Turing\", \"Alan\"],\n]\n\nfor p in britishProgrammers:\n    printMyName(p[1], p[0])\nNeat right? We’ve simplified things to that we can focus only on what’s important: we have our ‘data structure’ (the list-of-lists) and we have our printing function (printMyName). And now we just use a for loop to do the hard work. If we had 1,000 british programmers to print out it would be the same level of effort.\nSee what we mean about it being like Lego? We’ve combined a new concept with a concept covered in the last lesson to simplify the process of printing out nametags.\n\n\nA challenge for you!\nDefine and use a function that takes as input parameters a &lt;name&gt; (String) and &lt;age&gt; (Integer) and then prints out the phrase: &lt;name&gt; + \"is\" + &lt;age&gt; +\" years old\"\n\nExerciseSolution\n\n\n#your code here\n\n\ndef printMyAge(name, age):\n    print(name + \" is \" + str(age) + \" years old.\")\n    \nprintMyAge('Jon',25)\n\n\n\nThere’s actually another way to do this that is quite helpful because it’s easier to read:\ndef printMyAge(name, age):\n    print(f\"{name} is {age} years old.\") # This is called a 'f-string' and we use {...} to add variables\n    \nprintMyAge('Jon',25)",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#scoping",
    "href": "lessons/Functions.html#scoping",
    "title": "Introduction to Functions",
    "section": "Scoping",
    "text": "Scoping\nNow I’d like you to focus on a particuarly important concept: something called ‘scoping’. Notice that the names we are using for the parameters are de facto creating new variables that we then use in the function body (the indented block of code). In the example below, ‘name’ and ‘surname’ are scoped to the body of the funciton. Outside of that block (outside of that scope) they don’t exit!\nHere’s the proof:\ndef whoAmI(myname, mysurname):\n    if not myname:\n        myname = 'Charles'\n    if not mysurname:\n        mysurname = 'Babbage'\n    print(\"Hi! My name is \"+ myname + \" \" + mysurname + \"!\")\n\nprint(myname) # myname _only_ exists 'inside' the function definition\nNotice how the ErrorMessage is the same as before when we tried to print a variable that wasn’t defined yet? It’s the same concept: the variables defined as parameters exist only in the indented code block of the function (the function scope ).\nBut notice too that if you replace print name with whoAmI(\"Ada\", \"Lovelace\") then the error disappears and you will see the output: “Hi! My name is Ada Lovelace.” So to reiterate: parameters to a function exist as variables only within the function scope.\nwhoAmI('Ada','Lovelace')",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#default-parameters",
    "href": "lessons/Functions.html#default-parameters",
    "title": "Introduction to Functions",
    "section": "Default Parameters",
    "text": "Default Parameters\nLet’s say that your namebade printing function is a worldwide hit, and while most conferences take place in English, in some cases they might need to say ‘Hello’ in a different languages. In this case, we might like to have a parameter with a default value (“Hi”) but allow the programmer to override that with a different value (e.g. “Bonjour”).\nHere’s how that works:\ndef printInternational(name, surname, greeting=\"Hi\"):\n    print(greeting + \"! My name is \"+ name + \" \" + surname)\n\nprintInternational(\"Ada\", \"Lovelace\")\nprintInternational(\"Charles\", \"Babbage\")\nprintInternational(\"Laurent\", \"Ribardière\", \"Bonjour\")\nprintInternational(\"François\", \"Lionet\", \"Bonjour\")\nprintInternational(\"Alan\", \"Turing\")\nprintInternational(\"Harsha\",\"Suryanarayana\", \"Namaste\")\nSo we only have to provide a value for a parameter with a default setting if we want to change it for some reason.",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#return-statement",
    "href": "lessons/Functions.html#return-statement",
    "title": "Introduction to Functions",
    "section": "Return statement",
    "text": "Return statement\nUp to here we’ve only had a function that printed out whatever we told it to. Of course, that’s pretty limited and there are a lot of cases where we would want the function to do something and then come back to us with an answer! And remember that the problem of variable scoping means that variables declared inside a function aren’t visible to the rest of the program.\nSo if you want to access a value calculated inside a function then you have to explicitely return it using the reserved keyword return:\ndef sumOf(firstQuantity, secondQuantity):\n    return firstQuantity + secondQuantity\n\nprint(sumOf(1,2))\nprint(sumOf(109845309234.30945098345,223098450985698054902309342.43598723900923489))\n\nAssigning to a Variable\nThe return keyword, somewhat obviously, returns whatever you tell it to so that that ‘thing’ become accessible outside of the function’s scope. You can do whatever you want with the returned value, like assign it to a new variable:\nreturnedValue = sumOf(4, 3)\n\n# Notice the casting from int to str!\nprint(f\"This is the returned value: {returnedValue}\")\nOne important thing to remember is that return always marks the end of the list of instructions in a function. So whatever code is written below return and yet still indented in the function scope won’t be executed:\ndef genericFunc(parameter):\n    # do something to parameter\n    # ...\n    # do something else..\n    # ...\n    return \n    print(\"this line won't be ever executed! how sad!\")\n    print(\"nope. this won't either, sorry.\")\n\n\nA challenge for you!\nGuess which will be the highest number to be printed from this function (think about your guess before you execute the code):\ndef printNumbers():\n    print(2)\n    print(5)\n    return\n    print(9999)\n    print(800000)\n\nprintNumbers()\n5 is the last value printed becayse a return statement ends the execution of the function, regardless of whether a result (i.e. a value following the return keyword on the same line ) to the caller.\nNow that you have seen a bit more what is happening in a function, we can combine some concepts that we have seen in previous lessons to produce interesting bits of code. Take a look at how I’ve combined the range function, and the for in loop to print only the odd numbers for a given range.\ndef oddNumbers(inputRange):\n    \"\"\"\n    A function that prints only the odd numbers for a given range from 0 to inputRange.\n      inputRange - an integer representing the maximum of the range\n    \"\"\"\n    for i in range(inputRange):\n        if i%2 != 0:\n            print(i)\n\noddNumbers(10)\n\nprint(\"And...\")\n\noddNumbers(15)\n\nhelp(oddNumbers)\nLet’s take a closer look at what’s happening above…\ndef oddNumbers(inputRange):\n    \"\"\"\n    A function that prints only the odd numbers for a given range from 0 to inputRange.\n      inputRange - an integer representing the maximum of the range\n    \"\"\"\n    for i in range(inputRange):\n        if i%2 != 0:\n            print(i)\nThis defines a new function called oddNumbers which takes one parameter – it’s not immediately clear what type of variable inputRange is, but we can guess it pretty quickly from what happens next.\nYou’ll notice that there’s are some lines immediately after the function definition (between the triple-quotes) that aren’t printed or obviously used, but that look like documentation of some sort. We’ll come back to that in a minute.\nThe next line is a simple for loop: for i in range(inputRange). The range function generates a list of numbers from 0 to the input parameter passed to it. So we are going to be running a loop from 0 to n (where n=inputRange) and assigning the result of that to i.\nThe next line is nested inside the for loop: so we take each i in turn and perform the modulo calculation on it: if i%2 is 0 then i is divisble by 2. It’s even. If it’s not equal to 0 then it’s not an even number, and in that case we’ll print it out.\nWhich is exactly what happens with:\noddNumbers(10)\noddNumbers(15)\nThe last line is something new:\nhelp(oddNumbers)\nIf you look at the output of this, you’ll see that it prints out the content we wrote into the triple-quotes in the function definition. So if you want to give your function some documentation that others can access, this is how you do it. In fact, this is how every function in Python should be documented.\nTry these (and others) in the empty code block below:\nhelp(len)\nhelp(str)\nmyList = [1,2,3]\nhelp(myList.append)\nhelp(len)\nmyList = [1,2,3]\nhelp(myList.append)\n\n\nA Challenge for you!\nNow modify the oddNumbers function so that it also prints “Yuck, an even number!” for every even number…\n\nExerciseSolution\n\n\n#your code here\n\n\ndef oddNumbers(inputRange):\n    for i in range(inputRange):\n        if i%2 != 0:\n            print(i)\n        else:\n            print(\"Yuck, an even number!\")\n\noddNumbers(8)",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#functions-as-parameters-of-other-functions",
    "href": "lessons/Functions.html#functions-as-parameters-of-other-functions",
    "title": "Introduction to Functions",
    "section": "Functions as Parameters of Other Functions",
    "text": "Functions as Parameters of Other Functions\nThis leads us to another intersting idea: since moving around functions is so easy, what happens when we use them as inputs to other functions?\ndef addTwo(param1):\n    return param1 + 2\n\ndef multiplyByThree(param1): # Note: this is a *separate* variable from the param1 in addTwo() because of scoping!\n    return param1 * 3\n\n# you can use multiplyByThree\n# with a regular argument as input     \nprint(multiplyByThree(2))\n\n# but also with a function as input\nprint(multiplyByThree(addTwo(2)))\n\n# And then\nprint(addTwo(multiplyByThree(2)))",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Functions.html#applied-geo-example",
    "href": "lessons/Functions.html#applied-geo-example",
    "title": "Introduction to Functions",
    "section": "Applied Geo-example",
    "text": "Applied Geo-example\nFor the last Geo-Example, let’s revisit a couple of old exercises, combining them and making them a bit more sophisticated with the help of our newly acquired concept of functions.\nFirst, let’s define some variables to contain data that we will then use with the functions.\n# London's total population\nlondon_pop = 7375000\n\n# list with some of London's borough. Feel free to add more! \nlondon_boroughs = {\n    \"City of London\": {\n     \"population\": 8072,\n     \"coordinates\" : [-0.0933, 51.5151]\n    },\n    \"Camden\": {\n     \"population\": 220338,\n     \"coordinates\" : [-0.2252,1.5424]\n    },\n    \"Hackney\": {\n     \"population\": 220338,\n     \"coordinates\" : [-0.0709, 51.5432]\n    },\n    \"Lambeth\": {\n     \"population\": 303086,\n     \"coordinates\" : [-0.1172,51.5013]\n    }\n}\nNow, fix the code in the next cell to use the variables defined in the last cell. The calcProportion function should return the proportion of the population that the boro borough composes of London. The getLocation function should return the coordinates of the boro borough.\n\nExerciseSolution\n\n\ndef calcProportion(boro,city_pop=???):\n    return ???['population']/???\n\ndef getLocation(???):\n    return boro[???]\n\n\n#in this function definition we provide a default value for city_pop\n#this makes sense here because we are only dealing with london\ndef calcProportion(boro,city_pop=7375000):\n    return boro['population']/city_pop\n\ndef getLocation(boro):\n    return boro['coordinates'] #returns the value for the `coordinates` key from the value for the `Lambeth` key\n\n\n\nWrite some code to print the longitude of Lambeth. This could be done in a single line but don’t stress if you need to use more lines…\n\nExerciseSolution\n\n\n#your code here\n\n\n#one-liner (see if you can understand how it works)\nprint(getLocation(london_boroughs['Lambeth'])[0])\n\n# A longer but possibly more user-friendly way:\ncoord = getLocation(london_boroughs['Lambeth'])\nlong  = coord[0]\nprint(long)\n\n\n\nWrite some code to print the proportion of the London population that lives in the City of London. Using the function defined above, this should take only one line of code.\n\nExerciseSolution\n\n\n#your code here\n\n\nprint(calcProportion(london_boroughs['City of London']))\n\n\n\nWrite code to loop over the london_boroughs dictionary, use the calcProportion and getLocation functions to then print proportions and locations of all the boroughs.\n\nExerciseSolution\n\n\n#your code here\n\n\nfor boro, data in london_boroughs.items():\n    prop = calcProportion(data)\n    location = getLocation(data)\n    \n    print(prop)\n    print(location)\n    print(\"\")\n    \n    #to print more nicely you could use string formatting:\n    #print(\"Proportion is {0:3.3f}%\".format(prop*100))\n    #print(\"Location of \" + boro + \" is \" + str(location))\n\n\n\n\nFurther references:\nGeneral list or resources - Awesome list of resources - Python Docs - HitchHiker’s guide to Python - Learn Python the Hard Way - Lists - Learn Python the Hard Way - Dictionaries\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Functions"
    ]
  },
  {
    "objectID": "lessons/Lists.html",
    "href": "lessons/Lists.html",
    "title": "Lists",
    "section": "",
    "text": "In previous code camp lessons we looked at numeric (integers and floats) and textual (strings) data, but it’s probably been quite difficult to imagine how you’d assemble these simple data types into something useful. The new data types — lists and dictionaries — which we’re covering in the next two sessions will begin to show you how that can happen, and they will allow you to ‘express’ much more complex concepts.",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#introducing-structure",
    "href": "lessons/Lists.html#introducing-structure",
    "title": "Lists",
    "section": "Introducing: Structure",
    "text": "Introducing: Structure\nUp until now, our variables have only held one things: a number, or a string. In other words, we’ve had things like, myNumber = 5 or myString = \"Hello world!\". And that’s it.\nNow, with lists and dictionaries we can store multiple things: several numbers, several strings, or some mish-mash of both. That is, lists and dictionaries are data structures that can contain multiple data types.\nHere’s a brief summary of these data structures, highlighting their main difference:\n\nA list is an ordered collection of ‘items’ (numbers, strings, etc.) accessed by position. So you ask for the first, fifth, or n\\(^{th}\\) item of the list.\nA dictionary (in Python) is an ordered collection of ‘items’ (numbers, strings, etc.) accessed by label or name.\n\nSo a Python dictionary is similar to a real dictionary in the sense that you have a ‘key’ (i.e. the word for which you want the definition) and you use this to look up the ‘value’ (i.e. the definition of the word). There’s obviously a lot more to lists and dictionaries than this, but it’s a good starting point.\nLet’s start with lists in this lesson and we’ll continue with dictionaries in the following.\nYou can go back to our short video that talks about lists:",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#whats-a-list",
    "href": "lessons/Lists.html#whats-a-list",
    "title": "Lists",
    "section": "What’s a List?",
    "text": "What’s a List?\nSo a list is an ordered collection of items that we access by position (what Python calls the index) within that collection. So the first item in a list is always the first item in the list. End of (well, sort of… more on this later).\nBecause lists contain multiple items, we create and use them differently from the simple (single item) variables we’ve seen so far. You can always spot a list because it is a series of items separated by commas and grouped together between a pair of square brackets ( [A, B, C, ..., n]).\n\nCreating a List\nHere is a list of 4 items assigned to a variable called myList:\nmyList = [1,2,4,5]\nprint(myList)\nLists are pretty versatile: they don’t really care what kind of items you ask them to store. So you can use a list to hold items of all the other data types that we have seen so far!\nBelow we assign a new list to a variable called myList and then print it out so that you can see that it ‘holds’ all of these different types of data:\nmyList = ['hi I am', 2312, 'mixing', 6.6, 90, 'strings, integers and floats']\nprint(myList)\nWe don’t want to get too technical here, but it’s important to note one thing: myList is still just one thing – a list – and not six things ('hi I am', 2312, 'mixing', 6.6, 90, 'strings, integers and floats'). So we can only assign one list to a variable called myList. It’s like the difference between a person and a crowd: a crowd is one thing that holds many people inside it…",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#indexing",
    "href": "lessons/Lists.html#indexing",
    "title": "Lists",
    "section": "Indexing",
    "text": "Indexing\nTo access an item in a list you use an index. This is a new and important concept, and it’s a term that we’re going to use a lot in the future. You have been warned!\n\nAccessing Elements in a List\nThe index is just the location of the item in the list that you want to access. So let’s say that we want to fetch the second item, we access it via the index notation like so:\nmyList = ['hi', 2312, 'mixing', 6.6, 90, 'strings, integers and floats' ]\nprint(myList[1])\nSee what has happened there? We have:\n\nAssigned a list with 6 elements to the variable myList.\nAccessed the second element in the list using that element’s index between a pair of square brackets (next to the list’s name).\n\nWait a sec – didn’t we say second element? Why then is the index 1???\n\n\nZero-Indexing\nGood catch! That’s because list indexes are zero-based: this is a fancy way to say that the count starts from 0 instead of that from 1. So the first element has index 0, and the last element has index n-1 (i.e. the count of the number of items in the list [n] minus one). Zero indexing is a bit how like the ground floor in the UK is often shown as floor 0 in a lift.\nTo recap:\nmyNewList = ['first', 'second', 'third']\nprint(\"The first element is: \" + myNewList[0])\nprint(\"The third element is: \" + myNewList[2])\n\n\nNegative Indexing\nSince programmers are lazy, they also have a short-cut for accessing the end of a list. Since positive numbers count from the start of a list, negative numbers count from the end:\nmyNewList = ['first', 'second', 'third']\nprint(myNewList[-1])\nprint(myNewList[-2])\nThe last element has index -1. So you count forwards from 0, but backwards from -1.\nYou can remember it this way: the last item in the list is at n-1 (where n is the number of items in the list), so ...[-1] is a sensible way to access the last item.\n\nA challenge for you!\nEdit the code so that it prints the ‘second’ element in the list\n\nExerciseSolution\n\n\nmyNewList = ['first', 'second', 'third']\nprint(\"The second element is :\" + myNewList[???])\n\n\nmyNewList = ['first', 'second', 'third']\nprint(\"The second element is :\" + myNewList[1])\n\n\n\n\n\n\nIndex Out of Range\nWhat happens when you try to access an element that doesn’t exist?\nWe know that myList has 3 elements, so what if we try to access the 200th element in the list? In that case Python, as usual, will inform us of the problem using an error message pointing to the problem:\nmyNewList = ['first', 'second', 'third']\nprint(myNewList[200])\n\nA challenge for you!\nDo you remember the past lesson on syntax errors and exceptions? What is the error message displayed in the code above? Is it an exception or a syntax error? Can you find the explanation for what’s going in the Official Documentation?\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called exceptions and are not unconditionally fatal. The last line of the error message indicates what happened.\nYou can see from the last line to you have an error related to your index - where your list index is out of range.",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#a-string-is-a-list",
    "href": "lessons/Lists.html#a-string-is-a-list",
    "title": "Lists",
    "section": "A String is a List?",
    "text": "A String is a List?\nEven if you didn’t realise it, you have already been working with lists in a sense because strings are basically lists! Think about it this way: strings are an ordered sequence of characters because ‘hello’ and ‘olhel’ are very different words! It turns out that characters in a string can be accessed the same way we’d access a generic list.\nmyString = \"ABCDEF\"\nprint(myString[0])\nprint(myString[-1])",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#slicing",
    "href": "lessons/Lists.html#slicing",
    "title": "Lists",
    "section": "Slicing",
    "text": "Slicing\nIf you want to access more than one item at a time, then you can specify a range using two index values instead of just one.\nIf you provide two numbers, Python will assume you are indicating the start and end of a group of items. This operation is called list slicing, but keep in mind that indexes start from 0!\nNote: remember too that the error above when we tried to get the 200th element was index out of range. So ‘range’ is how Python talks about more than one list element.\nshortSentence = \"Now I'll just print THIS word, between the 20th and the 25th character: \"\nprint(shortSentence[20:25])\n\nA challenge for you!\nUsing the previous code as a guide, edit the code below so that it prints from the second to the fourth (inclusive) characters from the string:\n\nExerciseSolution\n\n\nshortSentence2 = \"A12B34c7.0\"\nprint(shortSentence2[???:???])\n\n\nshortSentence2 = \"A12B34c7.0\"\nprint(shortSentence2[1:4]) \n\n\n\nTo print the entirety of a list from any starting position onwards, just drop the second index value while leaving the : in your code:\nstringToPrint = \"I will print from HERE onwards\"\nprint(\"Starting from the 17th position: \" + stringToPrint[17:])\nNotice that there are two spaces between “position:” and “HERE” in the printout above? That’s because the 17th character is a space. Let’s make it a little more obvious:\nprint(\"Starting from the 17th position: '\" + stringToPrint[17:] + \"'\")\nGot it?\n\n\nA challenge for you!\nNow, combining what we’ve seen above, how do you think you would print everything up to the eighth character from the end (which is the space between “HERE” and “onwards”)?\nYou’ll need to combine:\n\nNegative indexing\nList slicing\n\nThere are two ways to do it, one way uses only one number, the other uses two. Both are correct. Why don’t you try to figure them both out? For ‘Way 2’ below the ??? is a placeholder for a full slicing operation since if we gave you more of a hint it would make it too obvious.\n\nExerciseSolution\n\n\nprint(\"Up to the 18th position (Way 1): '\" + stringToPrint[???:???] + \"'\")\nprint(\"Up to the 18th position (Way 2): '\" + ??? + \"'\")\n\n\nprint(\"Up to the 18th position (Way 1): '\" + stringToPrint[-8:] + \"'\")\nprint(\"Up to the 18th position (Way 2): '\" + stringToPrint[22:30] + \"'\")\n\n\n\nStrings have also plenty of methods that might prove to be quite useful in the future; for a fuller overview check out this reference.",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#list-operations",
    "href": "lessons/Lists.html#list-operations",
    "title": "Lists",
    "section": "List Operations",
    "text": "List Operations\nSo far, we’ve only created a list, but just like a real to-do list, most lists don’t usually stay the same throughout the day (or the execution of your application). Their real value comes when we start to change them: adding and removing items, updating an existing item, concatenating several lists (i.e. sticking them together), etc.\n\nReplacing an item\nHere’s how we replace an item in a list:\nmyNewList = ['first', 'second', 'third']\nprint(myNewList)\n\n# This replaces the item in the 2nd position\nmyNewList[1] = 'new element'\n\nprint(myNewList)\nThis shouldn’t surprise you too much: it’s just an assignment (via “=”) after all!\nSo if you see list[1] on the right side of the assignment (the “=”) then we are reading from a list, but if you see list[1] on the left side of the assignment then we are writing to a list.\nHere’s an example for a (small) party at a friend’s place:\ntheParty = ['Bob','Doug','Louise','Nancy','Sarah','Jane']\nprint(theParty)\n\ntheParty[1] = 'Phil' # Doug is replaced at the party by Phil\nprint(theParty)\n\ntheParty[0] = theParty[1]\nprint(theParty) # Phil is an evil genius and manages to also replace Doug with a Phil clone\nGot it?\n\n\nAddition and Multiplication\nYou can also operate on entire lists at one time, rather than just on their elements individually. For instance, given two lists you might want to add them together like so:\nbritishProgrammers = [\"Babbage\", \"Lovelace\"]\nnonBritishProgrammers = [\"Torvald\", \"Knuth\"]\n\nfamousProgrammers = britishProgrammers + nonBritishProgrammers\nprint(famousProgrammers)\nYou can even multiply them, although in this particular instance it is kind of pointless:\nprint(britishProgrammers * 2)\n\n\nA challenge for you!\nCorrect the syntax in the following code to properly define a new list:\n\nExerciseSolution\n\n\notherNonBritishProgrammers = [\"Wozniak\" ??? \"Van Rossum\"]\n\n\notherNonBritishProgrammers = [\"Wozniak\",\"Van Rossum\"]\n\n\n\nEdit the following code to print out all the non british programmers:\n\nExerciseSolution\n\n\nnonBritishProgrammers = [\"Torvald\", \"Knuth\"]\notherNonBritishProgrammers = [\"Wozniak\",\"Van Rossum\"]\n\nprint nonBritishProgrammers ??? otherNonBritishProgrammers\n\n\nnonBritishProgrammers = [\"Torvald\", \"Knuth\"]\notherNonBritishProgrammers = [\"Wozniak\",\"Van Rossum\"]\n\nprint(nonBritishProgrammers + otherNonBritishProgrammers)\n\n\n\n\n\nYou’re (not) in the list!\nEver stood outside a club or event and been told: “You’re not on/in the list”? Well, Python is like that too. In fact, Python tries as hard as possible to be like English – this isn’t by accident, it’s by design – and once you’ve done a bit of programming in Python you can start to guess how to do something by thinking about how you might say it in English.\nSo if you want to check if an item exists in a list you can use the in operator:\nelement in list\nThe in operator will return True if the item is present, and False otherwise. This is a data type (called a Boolean) that we’ve seen in the Boolean logic lessons.\nprint ('Lovelace' in britishProgrammers)\nprint ('Lovelace' in nonBritishProgrammers)\n\nletters = ['a','b','c','d','e','f','g','h','i']\nprint ('e' in letters)\nprint ('z' in letters)\nNote: You might also have spotted that this time there are parentheses (“(…)”) after print. In general, as you become more experienced you’ll always want to put parentheses after a print statement (because that’s how Python3 works) but the intricacies of why this is the case are a bit out of the scope of an introductory set of lessons.\nAnyway, if you want to check if an item does not exist in a list then you can use the not in  operator. Let’s go back to our party:\nprint(theParty) # You might have re-define the variable if you haven't saved it (in case, just copy and paste it before the print line)\nprint('Bob' not in theParty)\nprint('Jane' not in theParty)\nSo here, that ‘Boolean’ gives us True on the first not in because it’s “true that Bob isn’t at the party” and False on the second one because it’s “not true that Jane isn’t at the party”! Double-negatives aren’t supposed to exist in English, but they certainly do in programming!\n\n\nA challenge for you!\nComplete the missing bits of the following code so that we print out Ada Lovelace, her full name:\n\nExerciseSolution\n\n\nfirstProgrammerSurnames = [\"Babbage\", \"Lovelace\"]\nfirstProgrammerNames    = [\"Charles\", \"Ada\"]\n\nfirstProgrammerSurnames[1] = firstProgrammerNames[1] + \" \" + firstProgrammerSurnames[1]\n\nprint(\"Lady \"+ ???[1] +\" is considered to be the first programmer.\") \n\n\nfirstProgrammerSurnames = [\"Babbage\", \"Lovelace\"]\nfirstProgrammerNames    = [\"Charles\", \"Ada\"]\n\nfirstProgrammerSurnames[1] = firstProgrammerNames[1] + \" \" + firstProgrammerSurnames[1]\n\nprint(\"Lady \"+ firstProgrammerSurnames[1] +\" is considered to be the first programmer.\") \n\n\n\nNote : Actually, Lady Ada Lovelace is a fascinating person: she isn’t just the first female programmer, she was the first programmer full-stop. For many years Charles Babbage got all the credit for inventing computers simply because he was a guy and designed the clever mechanical adding machine. However, lately, we’ve realised that Ada was the one who actually saw that Babbage hadn’t just invented a better abacus, he’d invented a general-purpose computing device!\nShe was so far ahead of her time that the code she wrote down couldn’t even run on Babbage’s ‘simple’ (i.e. remarkably complex for the time) computer, but it is now recognised as the first computer algorithm. As a result, there is now a day in her honour every year that is celebrated around the world at places like Google and Facebook, as well as at King’s and MIT, because we want to recognise the fundamental contribution to computing made by women programmers.\nThis contribution was long overlooked by the men who thought that the hard part was the machine, not the programming. Rather entertainingly (given the kudos attached to the people who created applications like Google and Facebook), most men thought that programming was just like typing and was, therefore ‘women’s work’. So why not take a few minutes to recognise the important contributions of women to the history of computing.\n\n\n\nMargaret Hamilton, lead software engineer at MIT, next to the code that she and her colleagues created, taking Apollo 11 to the moon.",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#extending-lists",
    "href": "lessons/Lists.html#extending-lists",
    "title": "Lists",
    "section": "Extending Lists",
    "text": "Extending Lists\nWe’ve already seen that we can combine two lists using the + operator, but if you wanted to constantly add new items to your list then having to do something like this would be annoying:\nmyList = [] # An empty list\n\nmyList = myList + ['New item']\nmyList = myList + ['Another new item']\nmyList = myList + ['And another one!']\n\nprint(myList)\nNot just annoying, but also hard to read! As with most things, because programmers are lazy there’s an easier way to write this in Python:\nmyList = [] # An empty list\n\nmyList.append('New item')\nmyList.append('Another new item')\nmyList.append('And another one!')\n\nprint(myList)\nWhy don’t you try typing it all in your working environment? You’ll get the same answer either way, but one is faster to write and easier to read!\nAppending to a list using append(...) is actually using something called a function. We’ve not really seen this concept before and we’re not going to go into it in enormous detail here (there’s a whole other lesson to introduce you to functions). The things that you need to notice at this point in time are:\n\nThat square brackets (‘[’ and ’]’) are used for list indexing.\nThat parentheses (‘(’ and ‘)’) are (normally) used for function calls.\n\nThe best thing about functions is that they are like little packages of code that can do a whole bunch of things at once (e.g. add an item to a list by modifying the list directly), but you only need to remember to write append(...).\nWhat did I mean just now by ‘modifying the list directly’?\nNotice that in the first example above we had to write:\nmyList = myList + ['New item']\nbecause we had to write the result of concatenating the two lists together back to the variable. The list isn’t really growing, we’re just overwriting what was already in myList with the results of the list addition operation. What do you think you would get if you wrote the following code:\nmyList = [] # An empty list\n\nmyList + ['New item']\nmyList + ['Another new item']\nmyList + ['And another one!']\n\nprint(myList)\nIf you aren’t sure, why don’t you try typing this into the coding area above and try to figure out why the answer is: ’’.\nMeanwhile, in the second example we could just write:\nmyList.append('New item')\nand the change was made to myList directly! So this is easier to read and it is more like what we’d expect to happen: the list grows without us having to overwrite the old variable.",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#other-list-functions",
    "href": "lessons/Lists.html#other-list-functions",
    "title": "Lists",
    "section": "Other List Functions",
    "text": "Other List Functions\nappend() is a function, and there are many other functions that can be applied to lists such as: len, insert and index. You tell Python to execute a function (sometimes also termed calling a function) by writing the function’s name, followed by a set of parentheses. The parentheses will contain any optional inputs necessary for the function to do its job. Appending to a list wouldn’t be very useful if you couldn’t tell Python what to append in the first place!\nThe len function is also a good example of this:\nlen(theParty)\nHere, the function len (lazy short-hand for length ) is passed theParty list as an input in order to do its magic.\nThe functions append, insert and index work a little bit differently. They have to be called using theParty list. We’re at risk of joining Alice down the rabbit-hole here, so let’s just leave it at: the second set of functions are of a particular type known as methods of the list class. We’ll stop there.\n\n\n\nAlice falling down the rabbit hole\n\n\nIn order to use a list method you always need to ‘prepend’ (i.e. lead with) the name of list you want to work with, like so:\ntheParty.append(\"New Guest\")\ntheParty.insert(2, \"Anastasia\")\ntheParty.index(\"Sarah\")\nThe idea here is that methods are associated with specific types of things such as lists, whereas generic functions are kind of free-floating. Think about it this way: you can’t append something to a number, because that makes no sense. Appending is something that only makes sense in the context of a list. In contrast, something like len works on several different types of variables: lists and string both!\n\nAppend\nReminder: here’s appending…\nbritishProgrammers = ['Lovelace']\nbritishProgrammers.append(\"Turing\")\nprint(britishProgrammers)\n\n\nInsert\nThat’s cool, but as you noticed append only ever inserts the new item as the last element in the list. What if you want it to go somewhere else?\nWith insert you can also specify a position\nprint(nonBritishProgrammers)\nnonBritishProgrammers.insert(1, \"Swartz\")\nprint(nonBritishProgrammers)\n\n\nIndex\nLastly, with the index method you can easily ask Python to find the position (index) of a given item:\n# Say you want to know in where \"Knuth\" is \n# in the list of non-British programmers...\nprint(nonBritishProgrammers.index(\"Knuth\"))\n\n\nA challenge for you!\nAdd the famous Grace Hopper (inventress of the first compiler!) to the list of British programmers, and then print her index position:\n\nExerciseSolution\n\n\nnonBritishProgrammers.???(\"Hopper\") \nprint(nonBritishProgrammers.???(\"Hopper\"))\n\n\nnonBritishProgrammers.append(\"Hopper\") \n# let's check\nprint(nonBritishProgrammers)\nprint(nonBritishProgrammers.index(\"Hopper\"))\n\n\n\n\n\nLength\nCool, so those were some of the methods you can invoke on a list. Let’s focus now on some functions that take lists as an input.\nWith the function len you can immediately know the len-gth of a given list:\nprint( len(britishProgrammers) )\nlength_of_list = len(nonBritishProgrammers)\nprint(\"There are \" + str(length_of_list) + \" elements in the list of non-British Programmers\")\nDid you see the str(length_of_list)? There’s another function! We didn’t draw attention to it before, we just told you to use str(5.0) to convert the float 5.0 to the string \"5.0\". We can tell it’s a function because it uses the format functionName(...some input...). So the function name is str (as in convert to string) and the input is a number (in this case it’s the length of the list nonBritishProgrammers). So now we can easily convert between different types of data: we took an integer (you can check this by adding the following line to the code above:\n\nExerciseSolution\n\n\n# Fix the syntax of this line to print the length of the list:\nprint length_of_list + 1\n\n\nprint(int(length_of_list) + 1)\n\n\n\nAnd then print it out as a string. So length_of_list is a number, and by calling str(length_of_list) we changed it to a string that we could print out. Given that programmers are lazy, can you guess how you’d convert the string “3” to the integer 3?\n\nExerciseSolution\n\n\n'''\nConvert the string \"3\" to the _integer_ 3\n'''\n\n\nthree = \"3\"\n\n# Let's check the data type\nprint(type(three))\n\n# Change to Integer\nthree = int(three)\nprint(type(three))\n\n\n\n\n\nA challenge for you!\nComplete the missing bits of the following code:\n\nExerciseSolution\n\n\nlength_of_brits = ???(britishProgrammers)\nprint \"There are \" ??? \" British programmers.\"\n\n\nlength_of_brits = len(britishProgrammers)\nprint(\"There are \" + str(length_of_brits) + \" British programmers.\")\n\n\n\nTo check if the output of range() is a list we can use the type() function:",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Lists.html#applied-geo-example",
    "href": "lessons/Lists.html#applied-geo-example",
    "title": "Lists",
    "section": "Applied Geo-example",
    "text": "Applied Geo-example\nLet’s have a little play with some geographical coordinates. Based on what we’ve just done in this lesson, what do you think would be a good data type for storing lat/long coordinates?\nGo on, I’ll bet you can’t guess!\nLet’s use what we know to jump to a particular point on the planet…\n# We'll see more of this package import later...\n# For now, just know that it \n# provides access to a function called IFrame\nfrom IPython.display import IFrame\n\n# We want to view an OpenStreetMap map\nsiteName  = \"http://www.openlinkmap.org/small.php\"\n\n# Specify the location and zoom level\nlatitude  = 63.6314\nlongitude = -19.6083\nzoomLevel = 10\nmapURL    = ['?lat=', str(latitude), '&lon=', str(longitude), '&zoom=', str(zoomLevel)]\n\n# Show the ULR\nprint(siteName + ''.join(mapURL))\n\n# And now show us an inline map!\nIFrame(siteName + ''.join(mapURL), width='100%', height=400)\nAnd now let’s try somewhere closer to home. Try using the KCLMapCoordinates list below (which tells you the x/y and zoom-level) in combination with the code above. I’d suggest copying what you need from above, pasting it into the code below, and then using what you know about accessing list information so that the map shows the location of King’s College London…\n# King's College coordinates\n# What format are they in? Does it seem appropriate?\nKCLMapCoordinates = [51.51130657591914, -0.11596798896789551, 15]\n# We want to view an OpenStreetMap map\nsiteName  = \"http://www.openlinkmap.org/small.php\"\n\n# Specify the location and zoom level\nlatitude  = KCLMapCoordinates[0]\nlongitude = KCLMapCoordinates[1]\nzoomLevel = 15\nmapURL    = ['?lat=', str(latitude), '&lon=', str(longitude), '&zoom=', str(zoomLevel)]\n\n# Show the ULR\nprint(siteName + ''.join(mapURL))\n\n# And now show us an inline map!\nIFrame(siteName + ''.join(mapURL), width='100%', height=400)\n\nFurther references:\nGeneral list or resources - Awesome list of resources - Python Docs - HitchHiker’s guide to Python - Learn Python the Hard Way - Lists - Learn Python the Hard Way - Dictionaries\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Lists"
    ]
  },
  {
    "objectID": "lessons/Packages.html",
    "href": "lessons/Packages.html",
    "title": "Introduction to Packages",
    "section": "",
    "text": "In this lesson we’ll see how packages are useful in the context of tacking problems programmatically. The problem we will use here as an example is: download a data file that we know is hosted on a web site and then do some analysis of those data.\nIn this example, we are going to access and analyse a data set that we created: Cities from Wikipedia Data. Have a look at those data in your browser now by pasting the URL into a new tab. We’ll use the urlopen package to help us access the data.",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "lessons/Packages.html#whats-a-package",
    "href": "lessons/Packages.html#whats-a-package",
    "title": "Introduction to Packages",
    "section": "What’s a Package?",
    "text": "What’s a Package?\nWe saw in a previous Code Camp Lesson how functions are a useful programming tool to enable us to re-use chunks of code. Basically, a function is a way to do something to something in a portable, easy-to-use little bundle of code.\nHowever, some steps in a program are done so many times by so many people that, eventually, someone writes a package that bundles up those operations into something easy to use that saves you having to figure out the gory details.\n\nQ: How is a package different from a function?\nA: A package is just a bundle of useful functions.\nThere’s a little more to it than this, but simplest way to think of this is that when we type import foo then we are including functions from the foo package in our code. You’ll see how this works below.\nThe point of the bundle-of-functions is that they can help us to achieve quite a lot very quickly since we don’t need to reinvent the wheel and can just make use of someone else’s code. In the same way that we won’t mark you down for Googling the answer to a coding question, we won’t mark you down for using someone else’s package to help you get going with your programming. That’s the whole point!\nOften, if you’re not sure where to start Google (or StackOverflow) is the place to go:\nhow to read text file on web server python\nBoom!\n\n\nQ: But why have packages at all, why not just copy and paste all the functions that we need into our script directly?\nA: Because it keeps our code ‘clean’ and allows us to have functions with the same name that do different things.\nImagine the following:\n\nYou want to write a program to read data from two different web sites (e.g. NOMIS and the London Data Store)\nIt turns out that both already have handy Python packages that help you to read the data if you give them the URL of the page to read\nEven better, both packages have a simple function called read_data(...) that takes a URL and extracts the data that you want from that page as a CSV file, except…\nBecause the web sites are completely different the read_data(...) functions are specific to that one web site!\n\nSo, if both packages have functions callend read_data(), then after you have done:\nimport nomis_reader\nimport ldn_data_store_reader\nHow does Python know which read_data you want to use?\nThe answer is the namespace: you can only access the NOMIS read_data function by typing nomis.read_data(...) and you can only access the Data Store read_data function by typing ldn_data_store_reader.read_data(...).\n\n\nImport… As…\nThe length and awkwardness of that last line is why you can write this:\nimport ldn_data_store_reader as ldn\nBecause the alias (\"...as ldn\") lets you type ldn.read_data(...) and Python will know exactly which function you mean!",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "lessons/Packages.html#packages-in-context",
    "href": "lessons/Packages.html#packages-in-context",
    "title": "Introduction to Packages",
    "section": "Packages in Context",
    "text": "Packages in Context\nThe first step to writing a program is thinking about your goal and the steps required to achieve that. We don’t write programs like we write essays: all at once by writing a whole lot of code and then hoping for the best when we hit ‘submit’. \nWhen you’re tackling a programming problem you break it down into separate, simpler steps, and then tick them off one by one. Doing this gets easier as you become more familiar with programming, but it remains crucial and, in many cases, good programmers in large companies spend more time on design than they do on actual coding.\nTo a computer, reading data from a remote location (e.g. a web site halfway around the world) is not really any different from reading one that’s sitting on your your local hard drive (e.g. on your desktop). To simplify things a great deal: the computer really just needs to know the location of the file and an appropriate protocol for accessing that file (e.g. http, https, ftp, local…) and then a clever programming language like Python will typically have packages that can kind of take of the rest.\nIn all cases – local and remote – you use the package to handle the hard bit of knowing how to actually ‘read’ data (because all files are just 1s and 0s of data) at the device level and then Python gives you back a ‘file handle’ that helps you to achieve things like ‘read a line’ or ‘close an open file’. You can think of a filehandle as something that gives you a ‘grip’ on a file-like object no matter where or what it is, and the package is the way that this magic is achieved.\nLet’s recall our problem: download a data file that we know is hosted on a web site and then do some analysis of those data.\nWe need to break this seemingly hard problem down into something simpler and can do this by thinking about it as three separate steps:\n\nFirst we want to read a remote file (i.e. a text file somewhere the planet),\nThen we want to turn it into a local data structure (i.e a list or a dictionary),\nFinally we want to perform some calculations on the data (e.g. calculate the mean).\n\nWe can tackle each of those in turn, getting the first bit working, then adding the second bit, etc. It’s just like using lego to build something: you take the same pieces and assemble them in different ways to produce different things.\n\nStep 1: Reading a Remote File\nSo, as I said, in Step #1 we are going to download a file hosted on a remote web site at Cities from Wikipedia Data (this can also be stored as a bit-link to make it easier to copy+paste and avoid really long lines: http://bit.ly/2vrUFKi)\nWe aren’t going to to try to turn it into data or otherwise make ‘sense’ of it yet, we just want to get it. We are then going to build from this first step towards more substantial exercises and, eventually, you could easily request Megabytes of data in real-time according to flexibly-specified parameters!\nBecause we’re accessing data from a URL we will use the urlopen function from the urllib.request package.\nIf you’re wondering how we know to use this function and package, you might google something like: read remote csv file python 3 which in turn might get you to a StackOverflow question and anwer like this.\n\nGetting help with packages\nOf course, just knowing that you need urlopen doesn’t necessarily help you to actually use it. In addition to finding example code on StackOverflow, you can also ask the package itself for help with dir and help.\n\ndir\nThe ‘Dive into Python’ web site will tell you that “dir returns a list of the attributes and methods of any object”. That introduces yet another term (‘modules’) that we don’t want to get into right now, but everything in Python is an object and so dir will give you help with packages, variables, functions… you name it.\nimport math\ndir(math)\nWhat dir gives you is information about things you can potentially do: it’s like navigating the menu of a web site – you aren’t yet looking at the information you need, you’re trying to figure out if the site even has what you need. So dir on a package will give you a list of the functions (and any variables) that the person who created the package has provided.\nTypically, the information given by dir is highly abbreviated and is really just a prelude to using help.\n\n\n\nhelp\nThe help function gives you the actual detail you need about how to use a particular function: what are the inputs, what are the outputs, and what will the function actually do ?\nBoth of these can be used on a package, a function, or a variable that you’ve created; for example:\nimport math\nhelp(math.acos)\nLet’s see this in action!\nfrom urllib.request import urlopen\nprint(\"dir(urlopen) returns:\\n\")\nprint(dir(urlopen))\nprint(\"\\n\\n\")\nprint(\"help(urlopen) returns:\\n\")\nprint(help(urlopen)) # Notice!\nNote: you can also get help in Jupyter by typing ?urlopen in a code block and then hitting ‘run’.\n?urlopen\n\n\n\nA Challenge for you!\nFix the code to set the url variable, then use it with the urlopen function to open it.\n\nExerciseSolution\n\n\nfrom urllib.request import urlopen\n\n# Given the info you were given above, what do you \n# think the value of 'url' should be? What\n# type of variable is it? int or string? \nurl = ???\n\n# Read the URL stream into variable called 'response'\n# using the function that we imported above\nresponse = ???(url)\n\n#now read from the stream, decoding so that we get actual text\ndatafile = response.read().decode('utf-8')\n\nprint(\"datafile variable is of type: '\" + datafile.__class__.__name__ + \"'.\\n\")\n\n\nfrom urllib.request import urlopen\n\nurl = \"http://bit.ly/2vrUFKi\"\nresponse = urlopen(url)\ndatafile = response.read().decode('utf-8')\n\nprint(\"datafile variable is of type: '\" + datafile.__class__.__name__ + \"'.\\n\")\n\n\n\nNote that the datafile variable is of type string (because we decoded it as such). If we hadn’t decoded it, the result would have been of type bytes which wouldn’t be as easy for us (humans) to work with.\nNow that we’ve read our data as text, we can print it to check.\nprint(datafile)\nSo this is definitely text, but even though it has been nicely formatted visually in the script, right now it’s actually not in a very convenient format to work with in our code. The datafile str object is actually a single string of text that Python is interpreting as having line breaks. We can see this by printing the ‘raw’ object using the repr function:\nprint(repr(datafile))\nNote the \\n character that Python is using to determine when to print a new line for us to read nicely.\nTo split the text into individual lines ourselves (ready to work with in our code), we can use the handily named .splitlines() method (more on methods below):\nurl = \"http://bit.ly/2vrUFKi\"\n\nresponse = urlopen(url)\ndatafile = response.read().decode('utf-8').splitlines()\n\nprint(\"datafile variable is of type: '\" + datafile.__class__.__name__ + \"'.\\n\")\nNote now, that the data variable has type list. When we print this datafile list object (without repr) the \\n characters have gone and the list elements are split where those new line characters were previously (look carefully at where the ' are):\nprint(datafile)\nWe can see this more clearly if we use a for loop to print out each element of the list (each element being a row of the original online file):\nfor row in datafile:\n    print(row)\nThe last row should be 10,Sheffield,10,-163545.3257,7055177.403,685368.\nIf you’ve managed to get the code above to run and have received 11 rows of text in response to your urlopen query then, congratulations, you’ve now read a text file sitting on a server in, I think, Alberta, Canada and Python didn’t care.\n\n\nStep 2: Turning Text into Data\nWe now need to work on turning the response we got to our urlopen request into useful data. You’ll notice that we are dealing with a CSV (Comma-Separated Value) file and that the format is quite simple since none of the rows have fields that themselves contain commas. So to turn this into data we just need to split the row into separate fields using the commas.\nIn the code below, dir('string') lists the available function for strings (because 'string' is itself a String; we could just as easily written dir('foo') or dir('supercalifragilisticexpialidocious') because ‘foo’ and ‘supercalifragilisticexpialidocious’ are also strings and so have the same functions available.\nIn the output below, the functions that start and end with __ are generally considered private, so you can skip over these and focus on the ones further down that are designed to be useful to programmers. Can you spot the method that is most likely to be useful?\n\nA Brief Musical Interlude\nJust in case you need help pronouncing supercalifragilisticexpialidocious:\n\nRemember that you can find out what methods are supported by a string using dir(&lt;string&gt;):\ndir('supercalifragilisticexpialidocious')\nI’m going to save you some time (this time!) and tell you that we’re interested in the split method. Why not use the help function to figure out how to make use of it?\nhelp('supercalifragilisticexpialidocious'.split)\nNow, using the output of the help command, how would you use split to turn that word into a list like this:\n['sup','rcalifragilisticexpialidocious']\nIf you replace the ??? with the right bits of code then running the block below will print out “You got it!”. You only need to change the ??? and nothing else!\n\nExerciseSolution\n\n\nif ['sup','rcalifragilisticexpialidocious']=='supercalifragilisticexpialidocious'.split(???, maxsplit=???):\n    print(\"You got it!\")\nelse:\n    print(\"Not yet!\")\n\n\nif ['sup','rcalifragilisticexpialidocious']=='supercalifragilisticexpialidocious'.split('e', maxsplit=1):\n    print(\"You got it!\")\nelse:\n    print(\"Not yet!\")\n\n\n\n# Some other string methods\nprint('supercalifragilisticexpialidocious'.upper())\nprint('supercalifragilisticexpialidocious'.title())\nOK, so you’ve tracked down the way to split a string using a delimiter and even how to limit the number of ‘words’ that come out of the split operation. And you already saw another of these methods above (i.e. splitlines). We work a lot with strings, so it’s handy to get to know the readily-available methods well.\nLet’s test string splitting using our sample data (the last line of the ‘simple’ CSV file) to make sure it works the way we think it does… We want to turn the string below into a list like this:\n['10', 'Sheffield', '10', '-163545.3257', '7055177.403', '685368']\nAgain, we only need to change the ???.\n\nExerciseSolution\n\n\ntest = datafile[-1].split(???)\nprint(test)\n\n\ntest = datafile[-1].split(',')\nprint(test)\n\n\n\n\n\nConsider\nA question: why do you think that I consider a) to be data and not b)?\n\n\n\n['10', 'Sheffield', '10', '-163545.3257', '7055177.403', '685368']\n\n\n\n\"10,Sheffield,10,-163545.3257,7055177.403,685368\"\nDecide what you think the answer is before clicking for the solution\nHopefully you can see that a) is a list and b) is a str (string). Because a) is a list we can easily access each element. For example try the following code yourself:\nHere’s a clue:\nprint(\"The population of \" + myList[1] + \" is \" + myList[5])\nIt is much more difficult to access the individual pieces of information from the string…\nYou can hopefully see how we’re breaking a complex problem down into a set of increments , each of which is a bit easier to write and understand.\n\n\n\nStep 3: Analysis\ntotal = 0\ncount = 0\n\nfor idx,row in enumerate(datafile):\n    \n    if(idx &gt; 0):\n        total = total + int(row[-1])\n        count += 1\n    #print(row)\nmean = total / count \n\nprint(mean)\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Packages"
    ]
  },
  {
    "objectID": "lessons/Recap_2.html",
    "href": "lessons/Recap_2.html",
    "title": "Recap 2",
    "section": "",
    "text": "Since the first recap, you’ve learned about lists, dictionaries and loops. Let’s revise those concepts and how to use them in this lesson before continuing on to some new material. Answer the questions as best you can, working through any error messages you receive and remembering to refer back to previous lessons.",
    "crumbs": [
      "Recap 2"
    ]
  },
  {
    "objectID": "lessons/Recap_2.html#lists",
    "href": "lessons/Recap_2.html#lists",
    "title": "Recap 2",
    "section": "Lists",
    "text": "Lists\nFirst, here’s a reminder of some useful methods (i.e. functions) that apply to lists:\n\n\n\n\n\n\n\nMethod\nAction\n\n\n\n\nlist.count(x)\nReturn the number of times x appears in the list\n\n\nlist.insert(i, x)\nInsert value x at a given position i\n\n\nlist.pop([i])\nRemove and return the value at position i (i is optional)\n\n\nlist.remove(x)\nRemove the first element from the list whose value is x\n\n\nlist.reverse()\nReverse the elements of the list in place\n\n\nlist.sort()\nSort the items of the list in place\n\n\nlist.index(x)\nFind the first occurence of x in the list\n\n\nlist[x:y]\nSubset the list from index x to y-1\n\n\n\n\nInteracting with Lists\nReplace ??? in the following code blocks to make the code work as instructed in the comments. All of the methods that you need are listed above, so this is about testing yourself on your understanding both of how to read the help and how to index elements in a list.\na) The next line creates a list of city names (each element is a string) - run the code and check you understand what it is doing.\ncities = [\"Bristol\", \"London\", \"Manchester\", \"Edinburgh\", \"Belfast\", \"York\"]\nb) Replace the ??? so that it prints the position of Manchester in the list\n\nExerciseSolution\n\n\nprint(\"The position of Manchester in the list is: \" + str(cities.???('Manchester')))\n\n\nprint(\"The position of Manchester in the list is: \" + str(cities.index('Manchester')))\n\n\n\nc) Replace the ??? so that it prints Belfast\n\nExerciseSolution\n\n\nprint(cities[2 + ???])\n\n\nprint(cities[2 + 2])\n\n\n\nd) Use a negative index to print Belfast\n\nExerciseSolution\n\n\nprint(cities[???])\n\n\nprint(cities[-2])\n\n\n\ne) Force Python to generate a list index out of range error. NB: This error happens you provide an index for which a list element does not exist\n\nExerciseSolution\n\n\nprint(cities[???])\n\n\nprint(cities[6]) #anything above five would do it\n\n\n\nf) Think about what the next line creates, then run the code.\ntemperatures = [15.6, 16.5, 13.4, 14.0, 15.2, 14.8]\ng) What would you change ??? to, to return [16.5, 13.4, 14.0]?\n\nExerciseSolution\n\n\nprint(temperatures[???])\n\n\nprint(temperatures[1:4])\n\n\n\nh) What are two different ways of getting [15.2, 14.8] from the temperatures list?\n\nExerciseSolution\n\n\nprint(temperatures[???])\nprint(temperatures[???])\n\n\nprint(temperatures[4:6])\nprint(temperatures[-3:-1])\n\n\n\ni) Notice that the list of temperatures is the same length as the list of cities, that’s because these are (roughly) average temperatures for each city! Given this, how do you print: “The average temperature in Manchester is 13.4 degrees.” without doing any of the following: 1. Using a list index directly (i.e. cities[2] and temperatures[2]) or 2. Hard-coding the name of the city?\nTo put it another way, neither of these solutions is the answer:\nprint(\"The average temperature in Manchester is \" + str(temperatures[2]) + \" degrees.\")\nor\ncity=2\nprint(\"The average temperature in \" + cities[city] + \" is \" + str(temperatures[city]) + \" degrees.\")\nHint: you need to combine some of the ideas we’ve used above!\n\nExerciseSolution\n\n\ncity=\"Manchester\" # Use this to start the solution...\n#your code here...\n\n\ncity=\"Manchester\" # Use this to get the solution...\nindex = cities.index(city)\nprint(\"The average temperature in \" + cities[index] + \" is \" + str(temperatures[index]) + \" degrees.\")\n\n\n\nNow copy+paste your code and change only one thing in order to print out: “The average temperature in Belfast is 15.2 degrees”\n\nExerciseSolution\n\n\n???\n\n\ncity=\"Belfast\"\nindex = cities.index(city)\nprint(\"The average temperature in \" + cities[index] + \" is \" + str(temperatures[index]) + \" degrees.\")\n\n\n\n\n\nManipulating Multiple Lists\nWe’ll create two lists for the next set of questions\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nj) How do you get Python to print: [1, 2, 3, 4, 5, 6]\n\nExerciseSolution\n\n\nprint( ??? )\n\n\nprint ( list1 + list2 )\n\n\n\nk) How to you get Python to print: [1, 2, 3, [4, 5, 6]]\n\nExerciseSolution\n\n\nprint( ??? )\n\n\nprint( list1+[list2])\n\n\n\nLet’s re-set the lists (run the next code block)\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nl) How would you print out: [6, 5, 4, 3, 2, 1] ?\n\nExerciseSolution\n\n\nlist3 = ???\nlist3.???\nprint(list3)\n\n\nlist3 = list1+list2\nlist3.reverse()\nprint(list3)\n\n\n\nm) How would you print out: [3, 2, 1, 6, 5, 4] ?\n\nExerciseSolution\n\n\nlist1.???\nlist2.???\nprint( list1+list2 )\n\n\nlist1.reverse()\nlist2.reverse()\nprint( list1+list2 )\n\n\n\nn) How would you print out [3, 2, 6, 5] with a permanent change to the list (not slicing)? NB: this follows on from the previous question, so note that the order is still ‘reversed’.\n\nExerciseSolution\n\n\nlist1.???\nlist2.???\nprint( list1+list2 )\n\n\nlist1.remove(1)\nlist2.remove(4)\nprint( list1+list2 )",
    "crumbs": [
      "Recap 2"
    ]
  },
  {
    "objectID": "lessons/Recap_2.html#dictionaries",
    "href": "lessons/Recap_2.html#dictionaries",
    "title": "Recap 2",
    "section": "Dictionaries",
    "text": "Dictionaries\nRemember that dictionaries (a.k.a. dicts) are like lists in that they are data structures containing multiple elements. A key difference between dictionaries and lists is that while elements in lists are ordered, dicts are unordered. This means that whereas for lists we use integers as indexes to access elements, in dictonaries we use ‘keys’ (which can multiple different types; strings, integers, etc.). Consequently, an important concept for dicts is that of key-value pairs.\n\nCreating an Atlas\nReplace ??? in the following code block to make the code work as instructed in the comments. If you need some hints and reminders, revisit the Dictionaries Lesson.\nRun the code and check you understand what the data structure that is being created (the data for each city are latitude, longitude and airport code)\ncities = {\n    'San Francisco': [37.77, -122.43, 'SFO'],\n    'London': [51.51, -0.08, 'LDN'],\n    'Paris': [48.86,2.29, 'PAR'],\n    'Beijing': [39.92,116.40 ,'BEI'],\n}\na) Add a record to the dictionary for Chennai (data here)\n\nExerciseSolution\n\n\ncities = ???\n\n\ncities = {\n    'San Francisco': [37.77, -122.43, 'SFO'],\n    'London': [51.51, -0.08, 'LDN'],\n    'Paris': [48.86,2.29, 'PAR'],\n    'Beijing': [39.92,116.40 ,'BEI'],\n    'Chennai': [13.08, 80.27,'MAA']\n}\n\n\n\nb) In one line of code, print out the airport code for Chennai\n\nExerciseSolution\n\n\nprint(???)\n\n\nprint(\"The airport code for Chennai is \" + cities[\"Chennai\"][2])\n\n\n\nc) Check you understand the difference between the following two blocks of code by running them, checking the output and editing them (e.g. try the code again, but replacing Berlin with London)\nprint(cities['Berlin'])\nprint(cities.get('Berlin'))\n\nExerciseSolution\n\n\n# What is the difference among the two methods above?\n# Compare to use using the two different methods for London\n\n\n#Berlin is not in the dict. \n#The first code block above returns an error because Berlin is missing\n#The second does not because it uses the .get method which handles the error for us (returning a None value)\n#This second method is 'safer' because of how it handles this error\n\n#compare using the two different methods for London:\nprint(cities['London'])\nprint(cities.get('London'))\n\n\n\nd) Adapting the code below, print out the city name and airport code for every city in our Atlas.\n\nExerciseSolution\n\n\nfor k, v in cities.items():\n    print(k)\n\n\nfor k, v in cities.items():\n    print(\"The city of \" + str(k) + \" has an airport code of \" + str(v[2]) )",
    "crumbs": [
      "Recap 2"
    ]
  },
  {
    "objectID": "lessons/Recap_2.html#loops",
    "href": "lessons/Recap_2.html#loops",
    "title": "Recap 2",
    "section": "Loops",
    "text": "Loops\nRecall from the previous lessons that loops are a way to iterate (or repeat) chunks of code. The two most common ways to iterate a set of commands are the while loop and the for loop.\n\nWorking with Loops\nThe questions below use for loops. Replace ??? in the following code block to make the code work as instructed in the comments. If you need some hints and reminders, revisit the previous lessons.\na) Print out the name and latitude of every city in the cities dictionary using a for loop\n\nExerciseSolution\n\n\nfor ??? in cities.???:\n    print(??? + \" is at latitude \" + str(???))\n\n\nfor city, latitude in cities.items():\n    print(city + \" is at latitude \" + str(latitude[0]))\n\n\n\nb) Print out every city on a separate line using a for loop:\n\nExerciseSolution\n\n\nfor c in ???:\n    print(???)\n\n\nfor c in cities.items():\n    print(c)\n\n\n\nc) Now print using a loop this new data structure:\n\nExerciseSolution\n\n\ncitiesB = [\n    {'name':     'San Francisco',\n     'position': [37.77, -122.43],\n     'airport':  'SFO'},\n    {'name':     'London',\n     'position': [51.51, -0.08],\n     'airport':  'LDN'},\n    {'name':     'Paris',\n     'position': [48.86, 2.29],\n     'airport':  'PAR'},\n    {'name':     'Beijing',\n     'position': [39.92, 116.40],\n     'airport':  'BEI'}\n]\n\nfor ??? in citiesB.???:\n    print(??? + \" is at latitude \" + str(???))\n\n\ncitiesB = [\n    {'name':     'San Francisco',\n     'position': [37.77, -122.43],\n     'airport':  'SFO'},\n    {'name':     'London',\n     'position': [51.51, -0.08],\n     'airport':  'LDN'},\n    {'name':     'Paris',\n     'position': [48.86, 2.29],\n     'airport':  'PAR'},\n    {'name':     'Beijing',\n     'position': [39.92, 116.40],\n     'airport':  'BEI'}\n]\n\nfor city in citiesB:\n    print(city['name'] + \" is at latitude \" + str(city['position'][0]))\n\n\n\nNice work. Hopefully these questions have helped you compound your understanding. Onwards!\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "Recap 2"
    ]
  },
  {
    "objectID": "lessons/The_Terminal.html",
    "href": "lessons/The_Terminal.html",
    "title": "The Terminal",
    "section": "",
    "text": "At some point in your exploration of programming you will need to learn how to read/write data from elsewhere on the computer or the Internet.\nWhen you use an app on your mobile phone or on your computer it will often save your files somewhere convenient so that you can find them again, but this isn’t magic: a programmer made a choice about how to do this for you, and now that you’re learning to program you have to make that choice.\nAt this point, for anyone who learned how to use a computer after about 1995, coding can quickly come to seem very unfriendly indeed! That’s because when you are programming you will need to give the computer a lot more information about how to find, read, and write data.",
    "crumbs": [
      "The Terminal"
    ]
  },
  {
    "objectID": "lessons/The_Terminal.html#paths",
    "href": "lessons/The_Terminal.html#paths",
    "title": "The Terminal",
    "section": "Paths",
    "text": "Paths\nHave you ever thought about how and where files are stored on your computer? Probably not, unless you were very, very bored. Unfortunately, when you start programming you do need to learn a bit more about this – enough, at least, to tell Python where to find the file that you want it to read… though you can do much more than that!\nA few starting principles:\n\nDirectories (a.k.a. folders) and files all have a unique location somewhere on your hard drive.\nA directory (or folder) can contain directories and files. A simple file cannot contain a directory. Only special types of file such as a Zip archive can contain a folder.\nThe directory that sits at the bottom of the hierarchy (i.e. the one directory that is not in another directory) is known as the root directory.\nThe directory in which your settings and documents are saved (i.e. the stuff associated with your username) is known as the home directory.\nA file must be stored in a directory (there are no root files).\n\n\nPaths in the Finder\nWe’ll get to a video in a second, but on a Mac you can ‘view’ the path in the Finder simply by clicking on any finder window and typing Alt + Command + P (or selecting View &gt; Path from the menu bar). This will show the current path in a strip along the bottom of the finder window. Pay attention to the Path view in the movie below.\n\n\n\nPaths in a Terminal\nNow, sooner or later you are going to have to learn how to use the Terminal (a.k.a. Shell) because it will make certain tedious tasks go much, much faster. It is also by far the best way to install Python libraries or other ‘libraries’ that you need to develop your code. Learning to the use the Terminal is also going to help a lot in learning to fix subtle problems with your program (e.g. checking that you are reading the right data).\nSo here’s the same process of navigating from a directory called KCL Modules down to the 2017-18 Geocomputation Teaching directory as you just saw above, but using the Terminal:\n\nYou’ll notice that there were several seemingly cryptic commands – we’ll examine them in more detail below, but the important ones to note in this video are:\n\nls lists the contents of the current directory\ncd changes directory\n\nWe always say that programmers are lazy and this is a good example of that: why write list when we can write ls or change directory when we can write cd? You obviously need to learn what those bits of laziness mean, but they can help a lot in speeding up your code!\n\n\nA Challenge for you!\nNow that you have a geneal idea of what is the terminal, what is a path, and how to navigate in your computer’s folders without clicking buttons, you can take a look at this Software Carpentry exercise focussed on the Terminal.\nThis will cover the following topics and guide you in understanding how to efficiently work with the terminal:\n\nWhat is the shell?\nNavigating the filesystem\nWorking with files and directories\nAutomating the tedious with loops\nCounting and mining with the shell\nWorking with free text\n\nFor a one-page recap on everything you need to know to start working from the terminal, check out Ian Milligan & James Baker’s Introduction to the Bash Command Line. This very well structured overview covers the same topics of the previous exercise, and can serve a useful cheat sheet if in the future you might want to go back and revise these concepts (or only have a useful list of bash commands at hand).\n\n\nCredits!\n\nContributors:\nThe following individuals have contributed to these teaching materials: - James Millington - Jon Reades - Michele Ferretti - Zahratu Shabrina\n\n\nLicense\nThe content and structure of this teaching project itself is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license, and the contributing source code is licensed under The MIT License.\n\n\nAcknowledgements:\nSupported by the Royal Geographical Society (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n\nPotential Dependencies:\nThis lesson may depend on the following libraries: None",
    "crumbs": [
      "The Terminal"
    ]
  },
  {
    "objectID": "setup/base.html",
    "href": "setup/base.html",
    "title": "Base Utilities",
    "section": "",
    "text": "In order to access the majority of the features that this module uses, you will need to install several ‘base’ utilities:\n\n\nYou will need to install the following:\n\nThe Xcode Command Line Tools, which can usually be installed directly from the Terminal. If that does not work for you, then you can use the Apple Developer website to download and install manually. Note: this may require you to get a free developer account.\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\n\nYou will need to install the following:\n\nWSL 2, for which you can follow these instructions."
  },
  {
    "objectID": "setup/base.html#macos",
    "href": "setup/base.html#macos",
    "title": "Base Utilities",
    "section": "",
    "text": "You will need to install the following:\n\nThe Xcode Command Line Tools, which can usually be installed directly from the Terminal. If that does not work for you, then you can use the Apple Developer website to download and install manually. Note: this may require you to get a free developer account.\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal."
  },
  {
    "objectID": "setup/base.html#windows",
    "href": "setup/base.html#windows",
    "title": "Base Utilities",
    "section": "",
    "text": "You will need to install the following:\n\nWSL 2, for which you can follow these instructions."
  },
  {
    "objectID": "setup/health.html",
    "href": "setup/health.html",
    "title": "Computer Health Check",
    "section": "",
    "text": "To be clear: Code Camp does not require you to buy a new computer! The no install options) page is all you need for Code Camp. This page is intended to help you gauge whether your computer might encounter issues doing spatial analysis once term starts.",
    "crumbs": [
      "Computer Health Check"
    ]
  },
  {
    "objectID": "setup/health.html#hardware-requirements",
    "href": "setup/health.html#hardware-requirements",
    "title": "Computer Health Check",
    "section": "Hardware Requirements",
    "text": "Hardware Requirements\nIn our experience, the students most likely to encounter problems share one or more of the following characteristics:\n\nTheir computer 8GB or less of RAM.\nTheir computer has less than 20GB of free disk space remaining.\n\nRead on below to check what your situation is…\n\nMacOSWindowsLinux\n\n\nYou will need to look up:\n\nHow much RAM does your computer have? Help.\nHow much free disk space does your computer have? Help.\n\n\n\nYou will need to look up:\n\nHow much RAM does your computer have? Help.\nHow much free disk space does your computer have? Help.\n\n\n\nWe’re going to assume that you know what you’re doing (df -h). If you want a recommendation, we’d probably go with the latest stable Ubuntu desktop release. The LTR releases could also be a good choice though we tend to like have access to newer UIs and tools.\n\n\n\n\nRecommendations\nIf you are looking for a recommendation as to what to buy:\n\nDon’t worry about getting the fastest chip, get as much RAM as you can. Don’t get less than 32GB of RAM, and get more if you can afford it and your system will take it.\nDon’t worry about getting the biggest hard drive, get the fastest one you can. You should get a SSD (Solid State Drive), but get a M2 type SSD if you can afford it and it’s available for your system.\nThink about portability vs. screen size: a 15” (or larger) laptop gives you a lot of screen real estate (and they generally have high spec chips that consume more power) but if you’re going to be out and about all day, carrying a 17” laptop together with the charger, cables, and all that, is going to be heavy.\nOnly after you’ve sorted this out should you look for the fastest chipset that’s still within your budget.\n\nShould you buy a Windows, Linux, or Apple machine? You should probably stick with whatever you’re familiar with since learning your way around a new Operating System while also learning to code is just raising the bar unnecessarily. Around CASA we use a mix of all three, and you can probably find as many opinions as there are staff members.\n\n\n\n\n\n\nSaving Money\n\n\n\nTwo easy things to do to save money on a new machine are:\n\nUnless there is a specific reason to do so (e.g. getting a system with Apple’s latest M2 chip), don’t buy the latest machine, buy a model from earlier in the year/the previous year instead and upgrade the RAM and hard drive instead.\nOnly buy the machine when you have access to a student discount. The discount for Apple computers is relatively modest (ca. 10%) compared to ‘back to school’ offers for Windows machines, but as the Brits would say: even 10% is better than a kick in the teeth!",
    "crumbs": [
      "Computer Health Check"
    ]
  },
  {
    "objectID": "setup/health.html#software-requirements",
    "href": "setup/health.html#software-requirements",
    "title": "Computer Health Check",
    "section": "Software Requirements",
    "text": "Software Requirements\nIn our experience the students most likely to encounter problems share one or more of the following characteristics:\n\nTheir computer runs Windows 10 Home or older, or\nTheir computer runs MacOS 10.13 (High Sierra) or older.\n\nAs long as your computer is running one of the last two major releases of the Operating System you should encounter few issues.\n\nMacOSWindows\n\n\n\nWhat Operating System and Version is your computer running? Help.\n\n\n\n\nWhat Operating System and Version is your computer running? Help.\n\n\n\n\n\nRecommendations\nIf you are using a Mac then your system should have the option to update to the latest version of the MacOS at no charge. If you are unable to update then it is likely that you have an older machine that is not fully supported by the most recent Operating System and, in all probability, you will also encounter issues running the programming environment locally (i.e. not in the cloud).\nIf you are using a Windows PC then try to update to either Windows 11 or to Windows 10 Pro as this will ‘unlock’ additional features that are useful for supporting the programming environment. Some of that unlocking process can require mucking about with the BIOS. As a student you are likely to qualify for significantly cheaper/free updates, so make sure you do this when you have access to the discount.",
    "crumbs": [
      "Computer Health Check"
    ]
  },
  {
    "objectID": "setup/health.html#system-updates",
    "href": "setup/health.html#system-updates",
    "title": "Computer Health Check",
    "section": "System Updates",
    "text": "System Updates\nNow that you know your computer is ‘up-to-spec’, please ensure that your computer is fully up-to-date with all Operating System and application updates before following any of the other steps in this brief guide to getting started.\n\n\n\n\n\n\nAutomatic Updates\n\n\n\nOnce you have installed the programming environment we strongly recommend that you turn off automatic updates for your computer until the end of the academic year. This is not to say that you should not install security and other updates over the course of the year, but to emphasise that it should be at a time of your choosing. In previous years, students’ computers have automatically updated to a whole new operating system version two nights before an assessment deadline, breaking existing code and causing lots of needless stress.",
    "crumbs": [
      "Computer Health Check"
    ]
  },
  {
    "objectID": "setup/install.html",
    "href": "setup/install.html",
    "title": "Running Python Locally",
    "section": "",
    "text": "When we say running Python ‘locally’, we mean installing a version of Python (or using a version already) and executing code on your computer. There are many other ways to run Python, and one of the more convenient options is in the cloud.\nInstalling Python or R is fairly straightforward nowdays, but be warned: what you will see after installing them ain’t pretty. By default, Python and R code is simply the black-and-white text output of an ‘interpreter’ (something that processes lines of code by ‘interpreting’ our code into instructions to the computer, and back). People who code all the time will always install an IDE (short for: Integrated Development Environment) like RStudio or VSCode because it ‘prettifies’ the code that they run, making it easier to spot mistakes and track links between files containing code that interact.\nYou can complete Code Camp using just the basic Python interpreter, but you might find it easier to look at the no install options since these automatically include some basic tools for beautifying your Python code. However, if you’re sure that you want to install Python on your computer then here’s what you do…",
    "crumbs": [
      "Python on your Computer"
    ]
  },
  {
    "objectID": "setup/install.html#checking-for-system-python",
    "href": "setup/install.html#checking-for-system-python",
    "title": "Running Python Locally",
    "section": "Checking for ‘System’ Python",
    "text": "Checking for ‘System’ Python\nMany computers (especially Macs and Linux systems) will come with Python pre-installed. To find out if you have Python installed:\n\nMacWindows\n\n\nOpen up the Terminal (under Applications &gt; Utilities) and then type python3 --version ↩︎.\n\n\nOpen the Command Prompt (either run cmd.exe or search for Command Prompt from the Windows menu) and then type python3 --version ↩︎.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n↩︎ means hit Enter or Return on your keyboard. Don’t try to paste the symbol into the Terminal or Command Prompt.\n\n\nIn both cases, if Python is already installed then you will see something like the following (your exact version may differ):\nPython 3.8.16\nIf you see this kind output then, congratulations, you have Python installed! If you’re unsure what all this was about watch the video below.\n\n\n\n\n\n\nNote\n\n\n\nDepending on how Python was installed, you may find that typing just python produces an error, while typing python3 is successful.\n\n\n\nAction\nJust to give you a sense of how to interact with Python from the command line, here’s a short video from a Mac showing how to start/stop Python and execute code to print out the result of 2+2. It’s just a sanity-check:\n\n\n\n\n\n\n\nVersions\n\n\n\nDon’t worry too much about what version of Python you see listed (in the example above it’s 3.8.16) as long as you have at least verion 3.8.0. You should not use Python2 (e.g. 2.7.6) or versions of Python3 earlier than 3.6.",
    "crumbs": [
      "Python on your Computer"
    ]
  },
  {
    "objectID": "setup/install.html#installing-reference-python",
    "href": "setup/install.html#installing-reference-python",
    "title": "Running Python Locally",
    "section": "Installing ‘Reference’ Python",
    "text": "Installing ‘Reference’ Python\nIf you don’t have Python installed, then the ‘reference’ version of Python is the one to use since it’s produced by the Python Software Foundation and is required by QGIS anyway. Whatever operating system you’re using, you should start from the downloads page and follow the instructions from there. You will want a Stable Release, not a Pre-release version of Python.\nOnce it’s installed, you just use the Terminal or Command Prompt as above in Action.\n\n\n\n\n\n\nOur Recommendation\n\n\n\nYou would need to have ‘Reference’ Python installed anyway to make the most of QGIS, so we’d use that one. And getting used to the Terminal/Command Prompt is no bad thing since you’ll be using it a lot in the future.",
    "crumbs": [
      "Python on your Computer"
    ]
  },
  {
    "objectID": "setup/install.html#running-code-camp",
    "href": "setup/install.html#running-code-camp",
    "title": "Running Python Locally",
    "section": "Running Code Camp",
    "text": "Running Code Camp\nThis short video shows how to copy code from the Code Camp micro-site over to VSCode (so that you can save your work), and from there into the Python ‘interpreter’ (what you have just installed):\n\nYou can copy and paste multiple lines of code into the interpreter.",
    "crumbs": [
      "Python on your Computer"
    ]
  }
]