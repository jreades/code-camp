{
  "hash": "5d2c5b67661b0fa3cb1c7d36fb24c060",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat: html\nfilters:\n- panelize\n- pyodide\ntitle: The Basics\n---\n\n\n\n\nIn this first _proper_ programming lesson we are going to use the Python interpreter to perform simple operations, like numeric calculations that you would normally do on a calculator and slightly more advanced operations on words. The interpreter is what reads your code and converts that into the binary instructions that the computer can understand – think of it as translator between you and the low-level components (operating system, file system, network, display, etc.) of your machine. The interpreter operates in the background and runs when you click the 'Run' button in your working envirnment (in future we'll see how we can use the Python interpreter with scripts of many lines of code).  \n\nAs we progress through the excercises we'll encounter a range of new programming concepts. At this stage don't worry too much about memorizing all of them; it is through repeated use and practice that they will eventually come naturally. Instead, here we want you to try to develop a _sense_ of what is going on and keep the concepts in mind when reading the examples... but the really important thing is to try to apply them while _doing the excercises_.\n\n### How the exercises work\n\nLastly, a few words on the excercises; in every lesson we've tried to develop a mix of exercises and examples to show you how Python works. There are four 'levels' of exercise:\n\n1. **Code from Scratch**: using examples already encountered in the lesson as a starting point, you will write some _very simple_ code (1-3 lines at most) into a blank code cell. \n2. **Supported Code**: using examples and exercises already encountered in the lesson, you will fill in somes 'gaps' in the lines of code where we've replaced some critical bits with (`???`) in order to make it work successfully.\n3. **Broken Code**: here we have deliberately broken something (sometimes, more than one thing) in the code and you will need to fix these before it will run successfully. Being able to _debug_ code is an integral part of being a programmer, and this will also require you to have an eye for detail because tiny typos and simple sloppiness are enough to break a computer program.\n4. **Applied Geo-Example**: this will be a more advanced bit of code that will (we hope) run successfully right from the start. The point of these examples is to demonstrate a real-world _application_ of a concept covered in the lesson and we are asking you to spend some time puzzling over the code and adding comments about what you think is going on. Being able to read someone else's code and to make sense of what is going on is another crucial skill for a programmer. \n\nWe're not expecting you to master the fourth level at this stage; in fact, some of the examples might be challenging even after a full year of classes. However, we think it's important to try to show you where we're trying to go as well as the steps involved in how we get there. It's like trying to follow directions from someone who only tells you 'turn left', 'turn right', 'go straight' – it's a lot easier to fill in the gaps and to understand what's going on if they say \"We're headed to London\" first!\n\n## Numbers\n\nYou already saw a really simple example of calculating the mean in the first lesson, but let's recall that you can easily use Python to like a calculator. Run the code already present in the code cells and make sure you understand the output. To do this, just click on the clipboard icon to copy the code and paste it in your working environment (either [locally](../setup/install.qmd) or [online](../setup/no_install.qmd))\n\n### Basic Arithmetic\n\n#### Addition and Subtraction\n\n:::{.to-pyodide}\n\n::: {#6f90f25b .cell execution_count=1}\n``` {.python .cell-code}\n3 - 2 + 10\n```\n\n::: {.cell-output .cell-output-display execution_count=590}\n```\n11\n```\n:::\n:::\n\n\n:::\n\n#### Multiplication and Division\n\n:::{.to-pyodide}\n\n::: {#7ef6878b .cell execution_count=2}\n``` {.python .cell-code}\n2 * 5\n```\n\n::: {.cell-output .cell-output-display execution_count=591}\n```\n10\n```\n:::\n:::\n\n\n:::\n\n:::{.to-pyodide}\n\n::: {#5bf8f34c .cell execution_count=3}\n``` {.python .cell-code}\n10 / 5\n```\n\n::: {.cell-output .cell-output-display execution_count=592}\n```\n2.0\n```\n:::\n:::\n\n\n:::\n\n#### A challenge for you!\nDo you think the results of these two operations will be identical? If not, why? **Decide what you think the answer is _before_ running the code!**\n\n::: {.panel-tabset}\n\n#### Question\n\n```python\n# Operation 1:\nprint(4 * (2 - 8) + 2)\n# Operation 2:\nprint(4 * 2 - 8 + 2)\n```\n\n#### Answer\n\nAs you might expect, Python follows *operator precedence* rules when performing calculations, so the first example evaluates to `4 * -6` (-24) and then `+2` (-22). The second evaluates to `8 - 8 + 2` (2).\n\n::: {#16a3d815 .cell execution_count=4}\n``` {.python .cell-code}\n# Operation 1:\nprint(4 * (2 - 8) + 2)\n# Operation 2:\nprint(4 * 2 - 8 + 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-22\n2\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-tip}\n\nAlways remember the importance of **parentheses** in determining 'precedence' – which operations get done first.\n\n:::\n\n::: {.callout-note}\n\nYou might have also psotted that the code above wraps each formula in a `print()` command; this allows us to print out the results of both calculations when the code runs. Without the `print` we'd only see the results of the *last* (i.e. second) operation. We'll come back to this later.\n\n:::\n\nAnyway, even if it's been a long time since you've tried to do any maths, hopefully it's coming back to you that:\n\n:::{.to-pyodide}\n\n::: {#0fc9fe24 .cell execution_count=5}\n``` {.python .cell-code}\n(3 * 2) - 10\n```\n\n::: {.cell-output .cell-output-display execution_count=594}\n```\n-4\n```\n:::\n:::\n\n\n:::\n\nis not the same as:\n\n:::{.to-pyodide}\n\n::: {#92e1ac9d .cell execution_count=6}\n``` {.python .cell-code}\n3 * (2 - 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=595}\n```\n-24\n```\n:::\n:::\n\n\n:::\n\n### Exponents \n\n#### Powers\n\nIf you use two asterisks instead of one then you'll be performing an **exponentiation**:\n\n:::{.to-pyodide}\n\n::: {#8b9c597e .cell execution_count=7}\n``` {.python .cell-code}\n2 ** 4\n```\n\n::: {.cell-output .cell-output-display execution_count=596}\n```\n16\n```\n:::\n:::\n\n\n:::\n\nThat's the same as: \n\n:::{.to-pyodide}\n\n::: {#9751a35f .cell execution_count=8}\n``` {.python .cell-code}\n2 * 2 * 2 * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=597}\n```\n16\n```\n:::\n:::\n\n\n:::\n\nSo `2**4` is how we get 2-to-the-power-of-4 (the same as multiplying 2 together 4 times). Hopefully this all kind of rings a bell even if you've not studied any maths in a while.\n\n#### Roots\n\nSo `2**4` is 2-to-the-power-of-4, but how do we get the square root (or fourth root) of a number? Right now, with what we've taught you so far, the best way is to remember that a square root is the same as an exponent of one-half. The fourth root is an exponent of one-quarter. So... \n\n:::{.to-pyodide}\n\n::: {#be186842 .cell execution_count=9}\n``` {.python .cell-code}\nprint(2**8)       # 2-to-the-8\nprint(256**(1/8)) # 256-to-the-one-eighth\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n256\n2.0\n```\n:::\n:::\n\n\n:::\n\nNotice that even though the answer to the second operation is a whole number we're getting back a decimal. This is your first introduction to the idea that variables might have *types* and that integers are different from non-integers. There's *lots* more about this to come. But let's start with...\n\n#### Floating Point numbers\n\n::: {.callout-warning}\n\nThe following two equations are not _always_ the same!\n\n::: {#bc1f97fd .cell execution_count=10}\n``` {.python .cell-code}\nprint(1/8)\nprint(1.0/8.0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.125\n0.125\n```\n:::\n:::\n\n\n:::\n\nMany programming languages (Python _used_ to be one of them) treat whole numbers (`1`, `8`) differently from floating point numbers (`1.0`, `8.000000000001`). In those cases, we get the counterintuitive answer of `0` to the first equation because, when we use whole numbers in our calculations, we got whole numbers back. `1/8` is obviously not `0`, but that's the nearest whole number to `0.125`! This is what we mean about computers doing _exactly_ what you tell them: sometimes you *want* `1/8` to equal `0`, other times you'd want `0.125`, and the computer doesn't know which answer you need unless you are very clear about what you want!\n\n#### Modulo\n\nWhile we're on the topic of division, how do you get the 'remainder' of 9/2 – the bit _left over_ from the division? To get this there is a different symbol called the *modulo operator* which is a marked by a `%` sign. According in fact to the [Python Documentation](https://docs.python.org/3/reference/expressions.html)\n\n>The % (modulo) operator yields the remainder from the division of the first argument by the second.\n\nUsing the modulo operator will thus return the remainder:\n\n:::{.to-pyodide}\n\n::: {#45f43609 .cell execution_count=11}\n``` {.python .cell-code}\nprint(9 / 2)\nprint(9 % 2)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.5\n1\n```\n:::\n:::\n\n\n:::\n\nJust to make this clear: 2 goes into 9 exactly 4 times and then you have 1 left over. So: `(4 * 2) + 1 = 9`.\n\nFor division which yields no remainder the operation will return a value of 0.\n\n:::{.to-pyodide}\n\n::: {#5d5f1874 .cell execution_count=12}\n``` {.python .cell-code}\nprint(8 % 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n```\n:::\n:::\n\n\n:::\n\n#### A challenge for you!\n\nWhat do you think will be the result of this operation? Work out your answer **before** running the code. \n\n::: {.panel-tabset}\n\n#### Question\n\n```python\nprint( (2*3) ** 2 )\n```\n\n#### Answer\n\n::: {#0f3deac7 .cell execution_count=13}\n``` {.python .cell-code}\nprint( (2*3) ** 2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n36\n```\n:::\n:::\n\n\nThis because the parentheses force `2*3` to be calculated *before* `**2` (squared).\n\n:::\n\nNow what do you think this will give you? Again, work out your answer **before** running the code. \n\n::: {.panel-tabset}\n\n#### Question\n\n```python\nprint( (2*3) ** 2 / (12 % 5) )\n```\n\n#### Answer\n\n::: {#dfec524e .cell execution_count=14}\n``` {.python .cell-code}\nprint( (2*3) ** 2 / (12 % 5) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n18.0\n```\n:::\n:::\n\n\nThis is a bit trickier since it depends on [operator precedence](https://docs.python.org/3/reference/expressions.html#operator-precedence). So parentheses are first: 1) `2*3` and 2) `12 % 5`. Then it's the exponent `** 2`. Last is the division operation (`/`). So the answer is 18.0.\n\n:::\n\nIn the code below replace the question marks `???` with the appropriate code to produce a remainder of 6. You may need a calculator to help you. Run the code to check your answer; you can change your answer and run the code multiple times until you get the right answer.\n\n::: {.panel-tabset}\n\n#### Question\n\n```python\n(2+4) ** 2 % (120 / ???)\n```\n\n#### Answer\n\n::: {#d1798d78 .cell execution_count=15}\n``` {.python .cell-code}\n(2+4) ** 2 % (120 / 12) # Or 4, there might be other solutions\n```\n\n::: {.cell-output .cell-output-display execution_count=604}\n```\n6.0\n```\n:::\n:::\n\n\nIt's pretty straightforward to work out that the left half of this equation produces `36`. So to get a remainder of `6` we need the right half to evaluate to `10` (`36 % 10 == 6`; technically, `30` is another solution so that would allow `4` as an answer too).\n\n:::\n\n### Operator Precedence\n\nThe mathematical operations (`+`, `-`, `*`, `**`, `/`, `%`, etc., and the parentheses) are all evaluated (i.e. calculated) according to a set of rules that establish their _precedence_. This is just a fancy way of saying: which calculations do we do first? There's a full list [here](https://docs.python.org/3/reference/expressions.html#operator-precedence) but since that also lists a lot of operators we've not yet encountered it's easiest to summarise this in a table as follows:\n\n| Operator | Description |\n| -------- | :---------- |\n| `($\\ldots$)` | Parentheses |\n| `**` | Exponentiation |\n| `+x`, `-x` | Positive, Negative | \n| `*`, `/`, `%` | Multiplication, Division, Remainder | \n| `+`, `-` | Addition, Subtraction |\n\nSo parentheses trump everything else, so `2**5.0/2` (16.0) is not the same as `2**(5.0/2)` (5.656854249492381) and that can require some careful thought at times!\n\n### Division by Zero\n\nAlso pay attention when *dividing by zero*. Python won't be able to compute any value and will return an *error* (which is sometimes also called an *exception*):\n\n:::{.to-pyodide}\n\n::: {#dc8d3143 .cell execution_count=16}\n``` {.python .cell-code}\ntry:\n    (30 + 2 ) / 0\nexcept ZeroDivisionError as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndivision by zero\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-note}\n\nNotice that we have something new here: `try: ... except: ...`. This is how we stop Python from breaking at the point where an *expected* error occurs. Without that try/except code at this point everything would come to a griding halt. We'll cover exceptions in more detail later in Code Camp.\n\n:::\n\n#### A challenge for you!\n\nReplace the questions marks `???` in the following exercise with the appropriate code to purposufully cause a `ZeroDivisionError` exception (again, feel free to use a calculator and you can run the code multiple times).\n\n::: {.panel-tabset}\n\n#### Question\n\n```python\n(1345 - 20 )  / ((- 3) ** 2  -  ???)\n```\n\n#### Answer\n\n::: {#81374e63 .cell execution_count=17}\n``` {.python .cell-code}\ntry:\n   (1345 - 20 )  / ((- 3) ** 2  -  9)\nexcept ZeroDivisionError as e:\n   print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndivision by zero\n```\n:::\n:::\n\n\n:::\n\nPython _always_ tries to tell you what it thinks went wrong and this is the starting point for all _debugging_. When something goes wrong in a program this error is like the first clue that puts you on the trail of the 'wrongdoer': sometimes one clue will lead to another, and another, and another... sometimes one clue is all you need. \n\nBut regardless, **if you ignore these clues and just put up your hand and say \"It doesn't work!\" then we're not going to be very impressed**.\n\n### More about Ints and Floats\n\nSo we've seen some examples above of maths with *integers* (i.e. \"whole\" numbers) and maths with *floats* (i.e. \"decimal\" numbers). Both can be positive and negative (e.g. `-1` or `-254.32672`). Programmers, being lazy, often call integers _ints_ because it's faster and requires less typing.\n\nAny operation involving a mix of *floats* and *integers* will always yeld a *float*. For example, compare the output for the code below, but note how the resulting data type varies with the operation.\n\n:::{.to-pyodide}\n\n::: {#86becfe6 .cell execution_count=18}\n``` {.python .cell-code}\nprint(7 * 4)\nprint(7 * 4.0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n28\n28.0\n```\n:::\n:::\n\n\n:::\n\n:::{.to-pyodide}\n\n::: {#68ef7bf5 .cell execution_count=19}\n``` {.python .cell-code}\nprint(20 / 5)\nprint(20.0 / 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.0\n4.0\n```\n:::\n:::\n\n\n:::\n\n:::{.to-pyodide}\n\n::: {#e234d790 .cell execution_count=20}\n``` {.python .cell-code}\nprint(22 / 7)\nprint(22.0 / 7)\nprint( int(22.0/7) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.142857142857143\n3.142857142857143\n3\n```\n:::\n:::\n\n\n:::\n\nNotice that last tricky bit: we'll get to what `int(...)` means later, but if you remember that programmers are lazy then you might realise that it must be short for _integer_ and those parentheses must be telling Python to *do* something with the answer to change it from `3.14...` to `3`.\n\n:::{.to-pyodide}\n\n::: {#b81e53eb .cell execution_count=21}\n``` {.python .cell-code}\nprint(6 + 3)\nprint(6.0 + 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n9.0\n```\n:::\n:::\n\n\n:::\n\nThe reason for these slightly different answers is that Python is *implicitly* converting (sometimes called *casting*) the numbers between the two different *data types*. This conversion doesn't happen with more complex bits of Python code, but for simple numbers Python tries to be helpful and save you the time and effort.\n\n::: {.callout-warning}\n\nThe integer-to-float conversion might seem a bit of a pedantic distinction, but imagine if you were programming a banking application: you would definitely pay attention to all those decimals!\n\n:::\n\n### Some final maths questions...\n\nLet's start with calculating the area of a triangle. Here's the equation for the area of a triangle: $$A = \\frac{l_{base} * l_{height}}{2}$$\n\nSo lets work out for a triangle that has sides of length 10 and 20! If you type the maths correctly into the empty block below you should get the answer: 100\n\n:::{.to-pyodide}\n\n::: {#ec658f6b .cell execution_count=22}\n``` {.python .cell-code}\n(10 * 20)/2\n```\n\n::: {.cell-output .cell-output-display execution_count=611}\n```\n100.0\n```\n:::\n:::\n\n\n:::\n\n\n\nNow let's work out the length of the hypotenuse of a right-angle triangle with the same side lengths as above: $$l = \\sqrt{x^2 + y^2}$$\n\nYou might remember this as the Pythagorean Theorem, and you should get an answer of about 22\\.4.\n\n\n\nLet's move on to two _last_ harder ones. Write a line of code to [work out the area of a circle](https://www.khanacademy.org/math/basic-geo/basic-geo-area-perimeter/basic-geo-area-circumference/v/area-of-a-circle) of radius 6. Here's the formula: $$A = \\pi r^2$$ and you should get something around 113\\.1 as the area. Use 3.1412 for the constant pi.\n\n\n\nNow work out the _approximate_ [radius of a sphere](https://www.khanacademy.org/math/basic-geo/basic-geo-volume-surface-area/basic-geo-volumes/v/volume-of-a-sphere) whose volume is 85. To do this, you'll need to work backwards from the formula to calculate a volume... this might seem a little rough at first, but remembering how to rearrange a formula is really helpful for computational thinking!\n\nSo what do you have to do to this formula: \n$$ V = \\frac{4}{3} \\pi r^3 $$\n\nHere's a hint to get you started:\n$$ r^3 = \\frac{3}{4 \\pi} V $$\n\n_Also:_ remember that you're going to need to work with decimal numbers, not whole numbers and write your code accordingly! You should get a final answer of about 2\\.7.\n\n::: {.callout-note} \n\nThere are a lot of different ways that you could write this formula as _code_ and still get the right answer. Getting the right answer is 50% of the job. The remaining 50% is about doing it in a way that is elegant and easy to read... as get further into the term we'll point out how elegance and legibility (also: commenting) matter.\n\n:::\n\n## Text\n\nOK, so that's the basics of numbers. What about text?\n\n### How long is a piece of string?\n\nIn most programming languages, text and words are called *strings*, which is really a fancy word to say a *sequence of characters* enclosed in single- or double-quotes (' or \"). This might seem like stating the bleedin' obvious but this is a really, really important idea... \n\n> `\"235op\\!u\\$nlkgfd8 wp8ty fgdoy8p waklj ag9up0\"`\n\nis a string. So is: \n\n> `\"If music be the food of love, play on; Give me excess of it, that, surfeiting, The appetite may sicken, and so die.\"` (_Twelfth Night_, Act 1, Scene 1, 1–3) \n\nThe thing is that computers can't automatically distinguish between Shakespeare and the work of a monkey hitting keys at random. As long as they are both marked out by single- or double-quotes then as far as the computer is concerned they are strings. So even to ask the computer how many words there in the first 3 lines of _Twelfth Night_ means we have to 'teach' the computer what a word is by giving it rules to recognise the start or end of one, and even how to recognise the start and end of a line so that it can find the first three of them!\n\n:::{.to-pyodide}\n\n::: {#cacf985b .cell execution_count=26}\n``` {.python .cell-code}\nt1 = \"I'm a string of text!\"\nt2 = 'Me too! *&($£(£_@~{}|?<>$)'\nprint(t1)\nprint(type(t1))\nprint(t2)\nprint(type(t2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI'm a string of text!\n<class 'str'>\nMe too! *&($£(£_@~{}|?<>$)\n<class 'str'>\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-note} \n\nAs before, we're using the `print()` command here to show *each* of the outputs. Without print-ing the output we'd only see the results of the last line of code (`print(type(t2))`).\n\n:::\n\nNotice that now we've got two commands and that they are 'nested' one inside the other? So we are asking to tell us the type of `t1` (using `type(t1)`) and then we ask it to `print` the results of that type command. This confirms that `t1` and `t2` are strings.\n\n### Single- or Double-Quotes?\n\nAlthough you can technically use either type of quote (`'` or `\"`), it is generally better to use double-quotes as a way to prevent errors if a single-quote is contained in your string:\n\n:::{.to-pyodide}\n\n::: {#30c3118f .cell execution_count=27}\n``` {.python .cell-code}\nprint(\"I'm a single quote contained within double quotes. I'll be fine.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI'm a single quote contained within double quotes. I'll be fine.\n```\n:::\n:::\n\n\n:::\n\n```python\nprint('I'm surrounded by single-quotes and I contain a single-quote so there may be trouble ahead...')\n```\n\nIf you try to run the code above you'll get a 'syntax error' message. Notice also that the colour-coding of the string looks... odd: some bits are blue, some bits are green, some are grey, unlike the double-quoted example above. We'll come back to how to read errors like these in more detail in the next lesson, but again Python is giving us hints about where we might have made a mistake.\n\n### Escape Club\n\nWhat do you do if your string contains double-quotes _and_ single-quotes? That's where the 'backslash' (`\\`, a kind of 'reverse division' symbol) comes in handy. The backslash is how we 'escape' characters so that we can do 'special' things with them when they should _normally_ do something else.\n\nIn the example below, the backslash in front of the apostrophe in `I'm` says \"Don't treat this as 'normal' single-quote that means the end of the string, treat it as a literal single-quote in the middle of a longer string marked out by single-quotes.\n\n:::{.to-pyodide}\n\n::: {#ca5365e2 .cell execution_count=28}\n``` {.python .cell-code}\nprint('I\\'m using the backslash.')\nprint('I\\'m also using the backslash \\'\\\\\\' to escape the error normally caused by having single-quotes.')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI'm using the backslash.\nI'm also using the backslash '\\' to escape the error normally caused by having single-quotes.\n```\n:::\n:::\n\n\n:::\n\nLet's look at this a little more closely:\n\n- The first line is easy: the backslash in front of the single-quote in \"I'm\" allows us to use single-quotes to mark the start and end of the string. This is a silly example since we could also have written `\"I'm using the backslash\"` but you get the point.\n- The second line gets a little more complicated: you'll see that we've now escaped _three_ single-quotes (there are three occurences of `\"\\'\"`). But what's happening with `\"\\\\\"`? Well, we need an extra backslash in front of the backslash so that the computer knows to print a literal backslash (we are 'escaping' the normal function of a backslash to escape the character immediately after it) instead of reading it as escaping the one in front of the single-quote.\n\nThat's pretty weird, but just to show you what's happening here it is without that extra backslash:\n\n```python\nprint('I\\'m also using the backslash \\'\\\\' to escape the error normally caused by having single-quotes.')\n```\n\nIf you run the code above, you'll see another error! Also notice that in the two lines of code, in the first the whole line is in one colour (meaning the computer can see that it's all _one_ string), but in the broken example right before this the text changes colour once we get to \"to escape the error...\" (meaning that the computer doesn't see it all as one string).\n\nThe escape symbol crops up in a lot of other circumstances. For example, what if we wanted to tell Python that a string contains a newline (i.e. that the string is split across one or more lines, like our Shakespeare quote above should be)? \n\nRemember that programmers are always lazy when given half a chance and so they figured out that the easiest way to mark a newline was `\\n`. They used 'n' because it is fairly easy to remember that that means '*n*ewline', and the backslash 'escapes' us from the simple world where an 'n' is the letter 'n' into the computer's world where '`n`' is 'n', but `\\n` is a newline:\n\n:::{.to-pyodide}\n\n::: {#2bf04a10 .cell execution_count=29}\n``` {.python .cell-code}\nprint(\"If music be the food of love, play on;\\n Give me excess of it, that, surfeiting,\\n The appetite may sicken, and so die.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIf music be the food of love, play on;\n Give me excess of it, that, surfeiting,\n The appetite may sicken, and so die.\n```\n:::\n:::\n\n\n:::\n\nSee how that wraps the text on the `\\n`? Also note that the computer is printing _exactly_ what we told it to do: I kept a space between the `\\n` and the start of the next line. If you squint, then you can see that lines 2 and 3 are indented by the width of one space character. There's also an extra space after 'surfeiting' before the comma.\n\n#### Why details matters\n\nWe say this a lot later too, but you might as well start learning this fact now: spaces in a string _matter_. To a computer `\" A string\"` and `\"A string\"` are _not_ the same. Notice that there is a single space in front of the first 'A'. As human beings we tend to just skip over that space (especially if it's hard to see), but to a computer one string starts with 'A' and the other with ' ', so they are _completely different_.\n\nFurther, numbers and strings are _not_ the interachangeable: `\"2016\"` is _not_ the same as `2016`. The first is a string that happens to contain the characters 2, 0, 1, and 6. The second is an integer number one larger than 2015.\n\n:::{.to-pyodide}\n\n::: {#15f652be .cell execution_count=30}\n``` {.python .cell-code}\nprint(\"2016\")\nprint(2016)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2016\n2016\n```\n:::\n:::\n\n\n:::\n\nAs you can see from running the code above, it's a bit annoying that they look the same when we print them. But if you run the next lines of code (_after_ thinking about what they might do), you'll see how Python tries to be helpful with its errors:\n\n:::{.to-pyodide}\n\n::: {#2cea65b5 .cell execution_count=31}\n``` {.python .cell-code}\n2015 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=620}\n```\n2016\n```\n:::\n:::\n\n\n:::\n\n:::{.to-pyodide}\n\n::: {#8b8e202e .cell execution_count=32}\n``` {.python .cell-code}\ntry:\n  \"2015\" + 1\nexcept TypeError as e:\n  print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncan only concatenate str (not \"int\") to str\n```\n:::\n:::\n\n\n:::\n\nSee how the first line of code prints `2016`, but the second line of code (which tries to add together a string `\"2015\"` and the number `1`) gives you an error about a problem with `str` (i.e. string) and `int` (i.e. integer) 'concatentation'. More on concatenation in a minute.\n\n#### Advanced laziness\n\nObviously, having a _lot_ of `\\n` markers would be hard to read and a potential problem if you wanted to copy and paste the text into a different application. If you have a long block of text then you can avoid the whole issue by putting your text inside *triple-quotes*:\n\n:::{.to-pyodide}\n\n::: {#c6460620 .cell execution_count=33}\n``` {.python .cell-code}\nprint(\"\"\"Hi there,\nthis time, \nI won't need those annoying newline characters.\nI also don't have problems with \"quotes\" or 'quotes'! \"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHi there,\nthis time, \nI won't need those annoying newline characters.\nI also don't have problems with \"quotes\" or 'quotes'! \n```\n:::\n:::\n\n\n:::\n\n### Adding with strings (concatenation)\n\nAs with *numbers*, there are many things that you can do with strings. The simplest, however, is like addition (which is why it uses a `+`): when you add strings together you get a new, longer string that contains the characters of the original strings. This is usually called **concatenation**:\n\n:::{.to-pyodide}\n\n::: {#0b5cb48e .cell execution_count=34}\n``` {.python .cell-code}\nprint(\"String1\" + \"String2\")\nprint(\"Hey, looks like\" + \" I'm \" + \"adding \"+ \"6\" + \" strings\" + \" together\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nString1String2\nHey, looks like I'm adding 6 strings together\n```\n:::\n:::\n\n\n:::\n\nSo just like you would do to add two numbers together, we can add \"String1\" and \"String2\" together to get \"String1String2\". But notice that the `+` operator doesn't insert whitespace (i.e. a ' ' character) or anything else. It just sticks the two strings together _exactly_ as they are.\n\nAnd just like we can add together a whole set of numbers, we can add together a whole set of strings as in the second line beginning \"Hey, looks like...\"\n\n### Multiplication\n\nIf you use the *multiplication* operator (`*`) on a string then you will multiply the string by the value of the multiplier.\n\n:::{.to-pyodide}\n\n::: {#e48e97cb .cell execution_count=35}\n``` {.python .cell-code}\nprint(\"I like Python a lot\" + \"!\" * 3)\nprint(\"Foo \" * 25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI like Python a lot!!!\nFoo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo Foo \n```\n:::\n:::\n\n\n:::\n\n#### A challenge for you!\nWhat do you think will be the output of this code? (Work out your answer _before_ running the code)\n\n:::{.to-pyodide}\n\n::: {#a03c04d7 .cell execution_count=36}\n``` {.python .cell-code}\nprint('5' * 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n55555555555555555555\n```\n:::\n:::\n\n\n:::\n\nNow, why do you think the next example below doesn't work? (_Read the error output if you're not sure what's going on._)\n\n```python\nprint(\"5\" * \"2\")\n```\n\n## Variables\n\n---\n\nSo far, everything we've done was about performing some kind of calculation on an integer, float, or string, and then showing the result. Given that a lot of programming doesn't involve solving everything in one line of code, how do you save an answer so that you can (re)use it later? Let's start with the first true programming concept: the **variable**.\n\nIf you have studied other programming languages before then the concept of the variable will be so familiar to you that it's hard to remember even having to learn it! Some people think of a variable [as \"a box\"](https://www.youtube.com/watch?v=V0aBwgLRNXI) that contains _values_ that we want to store and retrieve in the future. For the novice, however, we think it *might* be more useful (though less technically correct) to think of a variable as the _label_ of the box: the label is how we remember what we put in the box and where we put it. \n\n\n\n{{< video https://youtu.be/_sVtcPgHAjI >}}\n\n\n\n\n\nLet me try to explain: the computer stores 'information' in lots of places (in memory, on the hard drive, etc.), but it doesn't use an addressing system that you or I would be able to understand. Memory addresses look something like `140302757291280` or `'0x7f9ac8026510'`. Those numbers tell the computer \"Go look in this place for what to do when the mouse is clicked\" or \"Go look up in that place what to do when someone asks you to add together 1 and 5\". Variable *names* are like the human-readable postal addresses on the outside of the box that the computer uses to deliver/return contents (what we put *inside* the box).\n\nHere's an example:\n\n:::{.to-pyodide}\n\n::: {#41b2d191 .cell execution_count=37}\n``` {.python .cell-code}\nresult = -2 * 10\n```\n:::\n\n\n:::\n\nHmmmm, nothing printed out this time... \n\nThat's because this time we gave Python a box with the label \"result\" into which to put the result of multiplying -2 and 10.\n\n:::{.to-pyodide}\n\n::: {#0db18de9 .cell execution_count=38}\n``` {.python .cell-code}\nresult = -2 * 10\nprint(\"I'm wasting space...\")\nprint(result)\nprint(type(result))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI'm wasting space...\n-20\n<class 'int'>\n```\n:::\n:::\n\n\n:::\n\nYou can change the *type* of `result` to a float:\n\n:::{.to-pyodide}\n\n::: {#9097982e .cell execution_count=39}\n``` {.python .cell-code}\nresult = -2 * 10\n# Rewrite the existing variable\nresult = float(result) \nprint(result)\nprint(type(result))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-20.0\n<class 'float'>\n```\n:::\n:::\n\n\n:::\n\nCheck it out! We _assigned_ the outcome of `-2 * 10` to a variable called `result`; then we did something else (printed out a string); and _then_ we printed out the value of the variable _and_ the computer remembered! \n\n### Copying variables\n\nAnd variables can be copied using the `=` operator in the same way that the result of the maths operation above could be _assigned_ to a new variable called `result`.\n\n:::{.to-pyodide}\n\n::: {#e22e21eb .cell execution_count=40}\n``` {.python .cell-code}\nmyFirstVariable = 1 * 5\nprint(myFirstVariable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n:::\n\n:::{.to-pyodide}\n\n::: {#59afd405 .cell execution_count=41}\n``` {.python .cell-code}\nmySecondVariable = myFirstVariable\nprint(mySecondVariable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n:::\n\nCool, both variables have the same value! We _assigned_ the result of `1 * 5` to a variable named `myFirstVariable` and then we assigned this value to a _second_ variable called `mySecondVariable`. \n\nBut why is this called assignment (or, in plain English, copying)? Well what happens when I change the *value* stored in `myFirstVariable`? Will the second change as well? \n\n:::{.to-pyodide}\n\n::: {#e94f5b8e .cell execution_count=42}\n``` {.python .cell-code}\nmyFirstVariable = 2\nprint(myFirstVariable)\nprint(mySecondVariable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n5\n```\n:::\n:::\n\n\n:::\n\nWhoa! `mySecondVariable` didn't change and still remembers what we _assigned_ to in the first time. Basically, we took the `myFirstVariable` label and attached it to a different box.\n\nAs the [Python Programming Wikibook explains](https://en.wikibooks.org/wiki/Python_Programming/Data_Types), when you assign a variable you are associating a variable (a label) to an object (a box) which is stored somewhere in the memory. So when you assign a new value to a variables you are not overwriting the old values but simply \"moving\" the label from one box to another. By analogy, we peeled the `myFirstVariable` off of the box containing the value `5` and attached it to a box containing the value `2`. But `mySecondVariable` was completely unaffected; it's still attached to the box containing `5`.\n\nThat's why in Python variables have a `name`, a `data-type` and a `value`.\n\n|       Name      | Data Type | Value |\n|:---------------:|:---------:|:-----:|\n| myFirstVariable | integer   | 1     |\n\n### A challenge for you!\n\nChange the code below by replacing the question marks `???` to make it work (i.e. not produce an error). So we want to:\n\n- Define a variable called \"namee\" and assign it a value, then \n- Define a variable called \"cheers\" that combines the value of \"name\" with the text \"is awesome\"\n- Print out cheers with the \"print\" command\n\n::: {.panel-tabset}\n#### Question\n\n```python\n??? = \"Peter\"\ncheers ??? name ??? \" is awesome!\"\nprint(cheers)\n```\n\n#### Answer\n\n::: {#4cbc96d1 .cell execution_count=43}\n``` {.python .cell-code}\nname = \"Peter\"\ncheers = name + \" is awesome!\"\nprint(cheers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPeter is awesome!\n```\n:::\n:::\n\n\n:::\n\n### Naming variables\n\nHow do you choose a variable name (i.e. address label) in Python?  \n\nHere's a short list of the rules:\n\n- names may contain letters and/or numbers (e.g. `myVar2`)\n- names cannot begin with a number (e.g. `2myVar`)\n- names may contain an underscore (\"\\_\") (e.g. `my_var_2`)\n- names can be of any length (e.g. `m2` or `mySecondVariableIsReallyLong`)\n- you cannot use Python keywords (e.g. `print`) or, rather, you can but you will start to get really strange problems in your code because you just changes what that variable/function does.\n\nSo this block of code below will run:\n\n::: {#4f58a3f0 .cell execution_count=44}\n``` {.python .cell-code}\nfamous_geographer = \"Mercator\"\nprint(famous_geographer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMercator\n```\n:::\n:::\n\n\nBut this block of code will not:\n\n```python\n1st_geographic_projection =  \"\"\" Mercator's most famous Geographic Projection \nis a cylindrical map projection \nthat retains the ability\nto ability to represent lines of constant course (loxodromes)\"\"\"\n\nprint(1st_geographic_projection)\n```\n\nNotice how the code has been coloured the text so that the '1' in what we wanted to make the variable name stands out? Again, that's Python trying to help us figure out what is going wrong, but it requires that you look closely at the output of the error message.\n\n### A final warning\n\nRemember that we said the string `\" Some text\"` and the string `\"Some text\"` are different because the space at the start of the string changes everything? The same sort of _strict_ checking is true for variable names: in short, Python is case-sensitive! \n\nThis means that `this_var` and `This_var` are two different variables and can refer to two different boxes:\n\n::: {#a5629cf3 .cell execution_count=45}\n``` {.python .cell-code}\nthis_var = \"Mercator\"\nThis_var = \"Galileo\"\n\nprint(this_var)\nprint(This_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMercator\nGalileo\n```\n:::\n:::\n\n\nAs for many issues related to Python's *style*, it is good practice to always refer to [the offical PEP 8 -- Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/#naming-conventions)\n\nFor more examples of Python variables check out also [OpenTechSchool's intro to Python](http://opentechschool.github.io/python-beginners/en/variables.html)\n\n## Coding Excercises\n\nNow that we've had a taste of the fantastic Python programming world, let's solidify our newly acquired skills with a final round of excercises.\n\n### Code from scratch\n\n\n\n#### Exercise 1 \n\nLook at the following example (and its output):\n\n:::{.to-pyodide}\n\n::: {#54eb0449 .cell execution_count=47}\n``` {.python .cell-code}\nold_satellite = 'Sputnik 1'\nold_satellite_description = \" was the first artificial Earth satellite, launched from the Soviet Union on the 4th of October, 1957.\"\nprint(\"Здравствуйте! My name is \" + old_satellite)\nprint(old_satellite + old_satellite_description)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nЗдравствуйте! My name is Sputnik 1\nSputnik 1 was the first artificial Earth satellite, launched from the Soviet Union on the 4th of October, 1957.\n```\n:::\n:::\n\n\n:::\n\nSimilar to the example above, in the code cell below:\n\n::: {.panel-tabset}\n\n#### Question\n\nExercise 1-A:\n\n1. define a variable named `new_satellite` with value `Landsat`\n2. try to print its name\n\nExercise 1-B:\n\n1. then try to concatenate its name with another variable description of your choice, \n2. print them.\n\n#### Answer 1-A\n\n::: {#b697d811 .cell execution_count=48}\n``` {.python .cell-code}\nnew_satellite = 'Landsat'\nprint(new_satellite)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLandsat\n```\n:::\n:::\n\n\n#### Answer 1-B\n\n::: {#37f7b410 .cell execution_count=49}\n``` {.python .cell-code}\nprint(\"The new satellite is \" + new_satellite + \" and the old satellite is \" + old_satellite)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe new satellite is Landsat and the old satellite is Sputnik 1\n```\n:::\n:::\n\n\n:::\n\n### Supported code\n\nReplace the questions marks `???`  in the following exercise with the appropriate code to make it work\n\n#### Exercise 2\n\nLandsat is a bit generic, the correct name is Landsat 8. How would you put together these two different Data Types? Remember what we've seen about casting? Edit the code below to make it work. \n\n::: {.panel-tabset}\n\n#### Question\n\n```python\npr???nt(\"Hello there \" + ???(new_satellite) )\n```\n#### Answer\n\n::: {#f796e672 .cell execution_count=50}\n``` {.python .cell-code}\nprint(\"Hello there \" + new_satellite + \" 8\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello there Landsat 8\n```\n:::\n:::\n\n\n:::\n\n#### Exercise 3\n\nAccording to its Wikipedia page Sputnik 1 was a 58 cm diameter polished metal sphere. If a cm = 0.393700787 inches what was its diameter in inches? Edit the code below to make it work.\n\n::: {.panel-tabset}\n\n#### Question\n\n```python\ndiameter_cm = 58\ncm2inches = 0.393700787\ndiameter_inches = diameter_cm ??? cm2inches\nprint(diameter_inches)\n```\n\n#### Answer\n\n::: {#a0f16593 .cell execution_count=51}\n``` {.python .cell-code}\ndiameter_cm = 58\ncm2inches = 0.393700787\ndiameter_inches = diameter_cm * cm2inches\nprint(diameter_inches)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n22.834645646\n```\n:::\n:::\n\n\n:::\n\n#### Exercise 4\n\nWat was its volume (in cubic cm)? # NOTE: the first line below we are \"importing\" the `math` module and assigning to a variable `PI` the value of pi (3.14...). Edit the code to make it work. \n\n::: {.panel-tabset}\n\n#### Question\n\n```python\nimport math\nPI = math.pi\n\nradius_cm = diameter_cm/2\nvolume =  (4/3) ??? PI ??? (radius_cm  ??? 3 )\nprint(volume)\n```\n#### Answer\n\n::: {#6d4ee72e .cell execution_count=52}\n``` {.python .cell-code}\nimport math\nPI = math.pi\n\nradius_cm = diameter_cm/2\nvolume =  (4/3) * PI * (radius_cm  ** 3 )\nprint(volume)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n102160.40430453527\n```\n:::\n:::\n\n\n:::\n\n### Broken code\n\nHmmmm... something's broken in the following line of code; can you spot the error(s)? Hint: remember what we said about different data types...\n\n::: {.panel-tabset}\n\n#### Question\n\n```python\nprint(new_satellite + \"has a Near Infrared (NI), \\\nwhich band captures light in the wavelength from \"+\n      770 +\n      \" to \" +\n      900 +\n      \" nanometers.\" )\n```\n\n## Answer\n\n::: {#b67f3826 .cell execution_count=53}\n``` {.python .cell-code}\n# The error message indicates a type error, as we can only concatenate string\n# The code should work by including \"\" to the numbers\n\nprint(new_satellite + \" has a Near Infrared (NI), \\\nwhich band captures light in the wavelength from \"+\n      \"770\" +\n      \" to \" +\n      \"900\" +\n      \" nanometers.\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLandsat has a Near Infrared (NI), which band captures light in the wavelength from 770 to 900 nanometers.\n```\n:::\n:::\n\n\n:::\n\n### Applied Geo-example\n\nIn this excercise you'll dip a toe in the wonderful world of web maps!\n\nWe are going to create a *geographic marker* (a pin on the map!) on top of [OpenStreetMap (OSM)](https://wiki.openstreetmap.org/wiki/About_OpenStreetMap) to visualise UCL CASA location.\n\nTo do so we'll have to create a string representing a web `URL` (that's the [address you type in your browser](https://en.wikipedia.org/wiki/Uniform_Resource_Locator) when your surf the web) pointing to OSM website.\n\nNow, as you can see there are two variables containing CASA's Longitute/Latitude coordinate position. You will need to use them within the variable `CASA_position`. Unfortunately they are in the wrong data type! Also, there might be something missing in the code.\n\n*HINT:* To convert (*cast*) a `float` to a `string` use the `str()` function (we haven't talked about functions yet, but see if you can work it out). You'll also need to think about how to concatenate strings? \n\nReplace the `???` in the code below to make it work.\n\n::: {.panel-tabset}\n\n#### Question\n\n```python\n# UCL CASA coordinates\n# What format are they in? Does it seem appropriate?\nlongitude = -0.13604732328636063\nlatitude = 51.52199740741031\n\n#cast the floats to strings\n??? = str(longitude)\nlat = str(???)\n\n# CASA marker\nCASA_position = \"https://www.openstreetmap.org/?mlat=\"+lat+\"8&mlon=\"+lon+\"#map=15/\"+lat+\"/\"+lon\n          \nprint(CASA_position)\n```\n\n#### Answer\n\n::: {#bdb5cff3 .cell execution_count=54}\n``` {.python .cell-code}\n# UCL CASA coordinates\n# What format are they in? Does it seem appropriate?\nlongitude = -0.13604732328636063\nlatitude = 51.52199740741031\n\n#cast the floats to strings\nlon = str(longitude)\nlat = str(latitude)\n\n# CASA marker\nCASA_position = \"https://www.openstreetmap.org/?mlat=\"+lat+\"8&mlon=\"+lon+\"#map=15/\"+lat+\"/\"+lon\n          \nprint(CASA_position)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://www.openstreetmap.org/?mlat=51.521997407410318&mlon=-0.13604732328636063#map=15/51.52199740741031/-0.13604732328636063\n```\n:::\n:::\n\n\n:::\n\nClick on the output (or copy and paste it into your browser) and behold! You'll be flying to CASA.\n\n### Further references:\n\nFor the most curious among you.\n\nOn this lesson's topic:\n- [StackOverflow: In Python, why can a function modify some arguments as perceived by the caller, but not others?](http://stackoverflow.com/questions/575196/in-python-why-can-a-function-modify-some-arguments-as-perceived-by-the-caller)\n- [StackOverflow: Is it possible only to declare a variable without assigning any value in Python?](http://stackoverflow.com/questions/664294/is-it-possible-only-to-declare-a-variable-without-assigning-any-value-in-python)\n- [YouTube Video 1](https://www.youtube.com/watch?v=D48iCw3WWpI)\n- [YouTube Video 2 (*slightly* longer)](https://www.youtube.com/watch?v=rkx5_MRAV3A)\n\nGeneral list or resources\n- [Awesome list of resources](https://github.com/vinta/awesome-python)\n- [Python Docs](https://docs.python.org/3/tutorial/introduction.html)\n- [HitchHiker's guide to Python](http://docs.python-guide.org/en/latest/intro/learning/)\n- [Learn Python the Hard Way](http://learnpythonthehardway.org/book/)\n- [CodeAcademy](https://www.codecademy.com/learn/python)\n\n\n### Credits!\n\n#### Contributors:\nThe following individuals have contributed to these teaching materials: \n- [James Millington](https://github.com/jamesdamillington)\n- [Jon Reades](https://github.com/jreades)\n- [Michele Ferretti](https://github.com/miccferr)\n- [Zahratu Shabrina](https://github.com/zarashabrina)\n\n#### License\nThe content and structure of this teaching project itself is licensed under the [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license](https://creativecommons.org/licenses/by-nc-sa/4.0/), and the contributing source code is licensed under [The MIT License](https://opensource.org/licenses/mit-license.php).\n\n#### Acknowledgements:\nSupported by the [Royal Geographical Society](https://www.rgs.org/HomePage.htm) (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n#### Potential Dependencies:\nThis lesson may depend on the following libraries: None\n\n",
    "supporting": [
      "The_Basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}