{
  "hash": "350c55ab13e854e7ea4c59b306edff7e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat: html\nfilters:\n- panelize\n- pyodide\ntitle: Dealing with Errors\n---\n\n\n\n\nWe all make mistakes. Even very experienced programmers. So this lesson is all about learning to deal with the (unavoidable) errors that you will encounter when programming in Ptyhon. Indeed, most programmers spend _most_ of their day dealing with errors of one sort or another: sometimes they are easy to solve (e.g. you mis-typed a variable name), other times they are very, very hard (e.g. you are writing a cloud computing platform and have to deal with competition for resources). Either way, learning how to find, diagnose, and resolve errors, as well as how to minimize their consequences, is thus a crucial skill for programmers. \n\n*Note: This lesson is heavily based on the [official Python Documentation](https://docs.python.org/3/tutorial/errors.html) about Errors and Exceptions. Check it out for further examples.*\n\n## Things Go Wrong\n\nIn the preceding lessons we've already pointed out a few simple errors and made some suggestions about how to read them, but as you have seen when there's something wrong Python stops whatever it's doing and prints out an error message.\n\nTrying to run the next bit of code will produce an error message:\n\n```{pyodide-python}\nprint \"Ouch!\"\n```\n\nThe error gives you a helpful clue as to what is going wrong: it's something to do with the Syntax.\n\n```python\n  File \"<ipython-input-1-cecc6fbed5db>\", line 1\n    print \"Ouch!\"\n                ^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Ouch!\")?\n```\n\nIn this case it even tells you what the most _likely_ resolution is: `print(\"Ouch!\")`! Not all errors are as easy to diagnose, but by carefully reviewing the output it is often possible to get a pretty good _sense_ of where things are going wrong. \n\nAnd here's another example:\n\n```{pyodide-python}\n45 / 0\n```\n\nThis error also gives you a helpful clue: You can't divide by zero!\n\n```python\nZeroDivisionError                         Traceback (most recent call last)\n<ipython-input-3-8cff53279792> in <module>\n----> 1 45 / 0\n\nZeroDivisionError: division by zero\n```\n\nAs you can see, depending on what just broke we see different error messages from the Python interpreter. Although it's not the most crucial distinction, there are roughly two main kinds of errors: **Syntax Errors** and **Exceptions**.\n\n### Syntax Errors\n\nA Syntax Error is likely to the be the most frequent error you encounter when you're getting started. Syntax errors occur when the Python interpreter has trouble *[parsing](https://en.wikipedia.org/wiki/Parsing)* your code. In other words, it can read what you've typed but it doesn't quite make sense.\n\nIt's a bit like when someone who doesn't speak your language fluently makes a mistake that to you seems funny, but to them is quite natural because they're extrapolating from what they know in a different language. Many English-speakers who are 'embarassed' by their level of Spanish are also apparently happy to inform Spanish-speakers that they are pregnant ('embarazada')! Or perhaps you think that the opposite of 'regardless' is 'irregardless'? These are natural mistakes, but they are 'errors' nonetheless. It's just that human beings – being smart – can figure out what you meant, while computers – being almost irredeemably stupid – cannot.\n\n#### A simple typo\n\nIn the first example for instance, the error consists in a `print` command missing its parentheses (needed in Python3, if not Python 2):\n\n```python\n  File \"<ipython-input-4-cecc6fbed5db>\", line 1\n    print \"Ouch!\"\n                ^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Ouch!\")?\n```\n\nLet's read the error message together, from top-to-bottom: \n\n- First, the interpreter prints out the file name and the line number where it thinks the error can be found. In our simple case that's not a big deal since we only have one line of code anyway, but if you had thousands of lines of code spread across dozens of separate files this could be a life-saver!\n- In addition, Python also prints the _actual_ line where it threw up its hands and said \"I can't read this!\" \n- It has even added a little 'caret' (` ‸ `) to try to point out where on that line it _thinks_ the error is. We wouldn't recommend that you study _only_ that bit of code (it pointed to 'Ouch!' after all, not to `print`) but it's not a bad place to start.\n- Lastly, Python prints out very clearly that the error is something to do with the syntax and in this case  _even_ suggests the solution! (because this is a common error when people move from writing code for Python2 vs Python 3).\n\nIt really can't get better than this. Let's try to see if you can fix some bits of broken code by reading the errors and spotting the place where I've made some mistakes.\n\n#### A Challenge for You!\n\nCopy the next two code cells into a Python 'interpreter' and use the error messages to see if you can fix the following problems:\n\n*Hint:* remember to look at what is happening *before* the caret!\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprojection = \"Cassini-Soldner\" \nprint(\"The \"  projection + \" projection preserves distances along the central meridian.\")\n```\n\n#### Answer\n\n::: {#a6803e59 .cell execution_count=1}\n``` {.python .cell-code}\nprojection=\"Cassini-Soldner\" \nprint(\"The \" + projection + \" projection preserves distances along the central meridian.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe Cassini-Soldner projection preserves distances along the central meridian.\n```\n:::\n:::\n\n\n:::\n\n### Exceptions\n\nEven if your code is syntatically exemplary (i.e. it's all perfectly written before you hit 'run'), errors might still occur for a wide variety of reasons: your computer is freaking out, you're not online, you haven't defined a variable yet... Obviously, these aren't syntax errors because your code would ordinarly work fine, it's just that something is missing and we think this is... _exceptional_. \n\nTo help you find out which of the problems you've just hit, Python has the concept of exceptions and a huge taxonomy of specific errors ([here's a list](https://docs.python.org/3/library/exceptions.html)). That way, when something exceptional happens we know whether to restart the computer, check the Internet connection, or look for the place where the variable was supposedly defined.\n\nLet's start by considering these two *exception* examples:\n\n:::{.panel-tabset}\n\n#### Questions\n\n```{pyodide-python}\nprint(\"london has an approx. popoulation of \" + popn + \" million people \")\n```\n\nAnd:\n\n```{pyodide-python}\nprint(\"london has an approx. popoulation of\" + 8.5 + \"million people \")\n```\n\n#### Answer\n\nThese give:\n\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'popn' is not defined\n```\n\nThis happens because we tried to use `popn` without having given it a value!\n\nAnd:\n\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: can only concatenate str (not \"float\") to str\n```\n\nWe've seen this error before: remember that programmers don't like to write 'string' when they could write 'str', and that 'float' means 'floating point number'.\n\n:::\n\nAnd now let's reconsider the \"Division By Zero\" Exception:\n\n```python\n4 / 0\n```\n\nFirst of all we can see that every exception displays a specific message in the last line which gives you useful information about what just went wrong. That's because *exceptions* are different from plain old *syntax errors*: they come in different types which are recognized by Python and printed accordingly. In our three examples above the *Exceptions* were: `NameError`, `TypeError`and `ZeroDivisionError`. These are the *exception types*.\n\nAs with the *syntax errors*, the remaining part of the error message gives us useful pointers to how to go about fixing the code:\n\n- Once again Python starts with the location. This time though, it doesn't immediately point to a specific line, rather it shows the *stack trace* ([more about this](https://en.wikipedia.org/wiki/Stack_trace), and [even more](https://en.wikipedia.org/wiki/Call_stack#STACK-FRAME)) of the operations being performed by your code when the exception occurred.\n- Luckily, there's even an arrow (`--->`) pointing at the line of code where Python realised there was a problem.\n\n```python\n<ipython-input-10-8cad47596d70> in <module>()\n----> 1 print(\"london has an approx. popoulation of \"+ popn + \" million people \")\n\nNameError: name 'popn' is not defined\n```\n\nIn the `NameError` example, the problem is that we have not yet created a variable named `popn` (we would need something like `popn = \"8.5\"` on the line prior to printing; the 8.5 in `\"\"` to avoid the `TypeError`). \n\nDo you see how these are different from *Syntax Errors* conceptually and that they require you to do something different? Indeed, *Exceptions* are clearly specified in the language for two main reasons:\n\n- It allows you to restrict the range of possibilities regarding what went wrong, allowing faster and easier debugging.  \n- Because exceptions  are \"named\" errors, they're easier for the programmer to \"catch\" when the code is running. \n\nIn other words, you can't know in advance whether your application will always have Internet access, so rather than just having your program 'blow up' or say \"Can't run, sorry!\", wouldn't it be better if it printed a helpful message to the user saying \"Hey, I don't seem to be online. Can you check the network connection?\" So in Python, one part of the application can 'throw' an exception (\"Hey, I'm not online\") when it tries to download a file and then it's up to the application to _catch_ that problem and print a warning to the user.\n\nIf you see any of the following commands `TRY/EXCEPT/FINALLY` then that means a programmer is trying to limit the damage that could be caused by an exception.\n\n### A Challenge for You!\n\nRun the next code cells and use the error messages to see if you can fix the following problems:\n\n*Hint*: Think about the _type_ of data that `london_population` holds _and_ how to convert a number into a string with the appropriate function\n\n::::{.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nlondon_population = 8600000\nprint(\"London's population is \" + london_population)\n```\n\n#### Answer\n\n::: {#ce641de0 .cell execution_count=2}\n``` {.python .cell-code}\nlondon_population = 8600000\nprint(\"London's population is \" + str(london_population))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLondon's population is 8600000\n```\n:::\n:::\n\n\n::::\n\nNow we want to know the ration between London and Paris populations:\n\n- Define variables for the number of people living in the French and British capitals (2.2 million and 8.6 million)\n- Think about the data type the result of the calculation needs to be\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(\"The ratio of london_population to paris_population is \" + london_population / paris_population)\n```\n\n#### Answer\n\n::: {#5896f6a5 .cell execution_count=3}\n``` {.python .cell-code}\nlondon_population = 8600000\nparis_population = 2200000\n\nprint(\"The ratio of london_population to paris_population is \" + str(london_population / paris_population))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe ratio of london_population to paris_population is 3.909090909090909\n```\n:::\n:::\n\n\n:::\n\n## How to Read Errors\n\nHere's a \"rule of thumb\" list of actions to take when Python throws an error at you:\n\n- *Don't Panic!*\n- Take a deep breath and *READ CAREFULLY* the error message.\n- Ask yourself: is it a *Syntax Error* or an *Exception*?\n- In both cases: where's the faulty line?\n- For  *Syntax Errors*: where's the little caret character ( ‸ ) pointing at?\n- For *Exceptions*: what kind of exception is that? Read the [Official Docs](https://docs.python.org/3/library/exceptions.html) and try to make sense of it\n- *No, really. Don't Panic!*\n\n## Finding Help\n\nWe can't say this enough: [Google is your friend](http://lmgtfy.com/?q=%22Learning+what+questions+to+ask+is+a+skill+in+itself%22+-Somebody+smart)! And we really mean it. \n\nIf learning how to interpret error messages is the first step to fixing broken code, the _second_ one (before you think about asking for help) is doing your 'homework'. And since you're not the first students to learn to program, there's a pretty good chance that someone has had your problem -- or one very similar to it -- before. \n\nThe largest website/community/forum online that programmers from all over the world use on a daily basis is **[Stack Overflow](https://stackoverflow.com)**. The name itself is something of an inside joke referring to a *bad* situation in programming:\n\n> When a program attempts to use more space than is available on the call stack... the stack is said to overflow, typically resulting in a program crash. (source: [Wikipedia](https://en.wikipedia.org/wiki/Stack_overflow) )\n\nAs the name implies, it's often the first resource that you want to consult if your program is not behaving as expected. For a quick overview of it's features refer directly to [StackOverflow's intro section](http://stackoverflow.com/tour).\n\nOften, you don't even need to ask your question at all because the answer is already *somewhere* on Stack Overflow. So search the web site carefully for relevant answers before posting your question. But if, after carefully checking the site, you still can't find an answer to your problem then it's time to start thinking about asking your own question. \n\nIn order to maximise your chances of success (and to avoid flooding the board with unclear and repetitive questions) read thoroughly the [How do I ask a good question?](http://stackoverflow.com/help/how-to-ask) section and always refer to the [Help Center](http://stackoverflow.com/help/asking).\n\nThis is not meant to put you off in any way, but rather to let you know the appropriate 'netiquette' and accetable code of conduct. Through 'SO', you have access to thousands of knowledgeable programmers, so it's important to make sure you're not wasting their time (or they *can* be quite short with you).\n\n## Code (Applied Geo-example)\n\nIf in the previous lessons we didn't even leave the U.K., this time we'll fly to the far away magical [Null Island](https://en.wikipedia.org/wiki/Null_Island).\n\nFrom its official government's [touristic office](http://www.nullisland.com/):\n\n> The Republic of Null Island\t \n> *LIKE NO PLACE ON EARTH!*\n\nIn order to get there, you'll have to first solve the exercise, avoiding those pesky *Syntax Errors* and *Exceptions\"!\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nlongitude = ???(0.0)\nlatitude ??? str(0.0)\n\n# Null Island marker\nnull_island = \"https://www.openstreetmap.org/?mlat=\"+???+\"&mlon=\"+longitude+\"#map=5/\"+latitude+\"/\"+longitude\n          \nprnt null_island\n```\n\n#### Question\n\n::: {#de735b99 .cell execution_count=4}\n``` {.python .cell-code}\nlongitude = str(0.0)\nlatitude = str(0.0)\n\n# Null_island marker\nnull_island = \"https://www.openstreetmap.org/?mlat=\"+latitude+\"&mlon=\"+longitude+\"#map=5/\"+latitude+\"/\"+longitude\n\nprint(null_island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://www.openstreetmap.org/?mlat=0.0&mlon=0.0#map=5/0.0/0.0\n```\n:::\n:::\n\n\n:::\n\nTo conclude: remember to always read the output, and try to understand what Python is telling you. You might learn a lot from these simple messages! \n\n### Further references:\n\n\nFor more information on the island you might watch this [short video](https://motherboard.vice.com/read/a-journey-to-the-center-of-null-island). \n\nIf you are on Twitter, don't forget to follow the [Null Island buoy](https://twitter.com/NullIslandBuoy)!\n\n\nGeneral list or resources\n- [Awesome list of resources](https://github.com/vinta/awesome-python)\n- [Python Docs](https://docs.python.org/3/tutorial/introduction.html)\n- [HitchHiker's guide to Python](http://docs.python-guide.org/en/latest/intro/learning/)\n- [Learn Python the Hard Way](http://learnpythonthehardway.org/book/)\n- [CodeAcademy](https://www.codecademy.com/learn/python)\n\n### Credits!\n\n#### Contributors:\nThe following individuals have contributed to these teaching materials: \n- [James Millington](https://github.com/jamesdamillington)\n- [Jon Reades](https://github.com/jreades)\n- [Michele Ferretti](https://github.com/miccferr)\n- [Zahratu Shabrina](https://github.com/zarashabrina)\n\n#### License\nThe content and structure of this teaching project itself is licensed under the [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license](https://creativecommons.org/licenses/by-nc-sa/4.0/), and the contributing source code is licensed under [The MIT License](https://opensource.org/licenses/mit-license.php).\n\n#### Acknowledgements:\nSupported by the [Royal Geographical Society](https://www.rgs.org/HomePage.htm) (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n#### Potential Dependencies:\nThis lesson may depend on the following libraries: None\n\n",
    "supporting": [
      "Exceptions_files"
    ],
    "filters": [],
    "includes": {}
  }
}