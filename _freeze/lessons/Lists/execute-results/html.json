{
  "hash": "4d95d07d547df461aae5129bbe0d8cc2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat: html\nfilters:\n- panelize\n- pyodide\ntitle: Lists\n---\n\n\n\n\nIn previous code camp lessons we looked at numeric (**integers** and **floats**) and textual (**strings**) data, but it's probably been quite difficult to imagine how you'd assemble these simple data types into something *useful*. The new data types --- **lists** and **dictionaries** --- which we're covering in the next two sessions will _begin_ to show you how that can happen, and they will allow you to 'express' much more complex concepts.\n\n## Introducing: Structure\n\nUp until now, our variables have only held _one_ things: a number, or a string. In other words, we've had things like, `myNumber = 5` or `myString = \"Hello world!\"`. And that's it. \n\nNow, with **lists** and **dictionaries** we can store _multiple_ things: several numbers, several strings, or some mish-mash of both. That is, lists and dictionaries are data _structures_ that can contain multiple data _types_. \n\nHere's a brief summary of these data structures, highlighting their main difference:\n\n- A **list** is an *ordered* collection of 'items' (numbers, strings, etc.) accessed *by position*. So you ask for the *first*, *fifth*, or *n*$^{th}$ item of the list.\n- A **dictionary** (in Python) is an *ordered* collection of 'items' (numbers, strings, etc.) accessed *by label* or *name*. \n\nSo a Python dictionary is similar to a real dictionary in the sense that you have a 'key' (i.e. the word for which you want the definition) and you use this to look up the 'value' (i.e. the definition of the word). There's obviously a lot more to lists and dictionaries than this, but it's a good starting point.\n\nLet's start with **lists** in this lesson and we'll continue with **dictionaries** in the following.\n\nYou can go back to our short video that talks about lists:\n\n\n\n\n{{< video https://youtu.be/UDNtW3sy-og >}}\n\n\n\n\n\n\n----\n## What's a List?\n\nSo a **list** is an ordered collection of items that we access by position (what Python calls the **index**) within that collection. So the first item in a list is always the first item in the list. End of (well, sort of... more on this later). \n\nBecause lists contain multiple items, we create and use them differently from the simple (single item) variables we've seen so far. You can always spot a list because it is a series of items separated by commas and grouped together between a pair of square brackets ( `[A, B, C, ..., n]`).\n\n### Creating a List\n\nHere is a list of 4 items assigned to a variable called `myList`:\n\n::: {#a92c7ad4 .cell execution_count=1}\n``` {.python .cell-code}\nmyList = [1,2,4,5]\nprint(myList)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 4, 5]\n```\n:::\n:::\n\n\nLists are pretty versatile: they don't really care what kind of items you ask them to store. So you can use a list to hold items of all the other data types that we have seen so far! \n\nBelow we assign a new list to a variable called `myList` and then print it out so that you can see that it 'holds' all of these different types of data:\n\n::: {#affe95f5 .cell execution_count=2}\n``` {.python .cell-code}\nmyList = ['hi I am', 2312, 'mixing', 6.6, 90, 'strings, integers and floats']\nprint(myList)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['hi I am', 2312, 'mixing', 6.6, 90, 'strings, integers and floats']\n```\n:::\n:::\n\n\nWe don't want to get too technical here, but it's important to note one thing: `myList` is still just **one** thing – a list – and not six things (`'hi I am', 2312, 'mixing', 6.6, 90, 'strings, integers and floats'`). So we can only assign one list to a variable called `myList`. It's like the difference between a person and a crowd: a crowd is one thing that holds many people inside it...\n\n## Indexing\n\nTo access an item in a list you use an **index**. This is a new and important concept, and it's a term that we're going to use a _lot_ in the future. You have been warned!\n\n### Accessing Elements in a List\n\nThe index is just the location of the item in the list that you want to access. So let's say that we want to fetch the second item, we access it via the *index notation* like so:\n\n::: {.to-pyodide}\n\n::: {#54e56665 .cell execution_count=3}\n``` {.python .cell-code}\nmyList = ['hi', 2312, 'mixing', 6.6, 90, 'strings, integers and floats' ]\nprint(myList[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2312\n```\n:::\n:::\n\n\n:::\n\nSee what has happened there? We have:\n\n1. Assigned a list with 6 elements to the variable `myList`.\n2. Accessed the second element in the list using that element's _index_ between a pair of square brackets (next to the list's name).\n\nWait a sec – didn't we say *second* element? Why then is the index `1`???\n\n### Zero-Indexing\n\nGood catch! That's because list indexes are *zero-based*: this is a fancy way to say that the count starts from 0 instead of that from 1. So the first element has index 0, and the last element has index _n-1_ (i.e. the count of the number of items in the list [_n_] minus one). Zero indexing is a bit how like the ground floor in the UK is often shown as floor 0 in a lift. \n\nTo recap:\n\n::: {#132fb68f .cell execution_count=4}\n``` {.python .cell-code}\nmyNewList = ['first', 'second', 'third']\nprint(\"The first element is: \" + myNewList[0])\nprint(\"The third element is: \" + myNewList[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe first element is: first\nThe third element is: third\n```\n:::\n:::\n\n\n### Negative Indexing\n\nSince programmers are lazy, they also have a short-cut for accessing the _end_ of a list. Since positive numbers count from the start of a list, negative numbers count from the end:\n\n::: {#3e0c5b88 .cell execution_count=5}\n``` {.python .cell-code}\nmyNewList = ['first', 'second', 'third']\nprint(myNewList[-1])\nprint(myNewList[-2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthird\nsecond\n```\n:::\n:::\n\n\nThe _last_ element has index `-1`. So you count forwards from `0`, but backwards from `-1`.\n\nYou can remember it this way: the last item in the list is at _n-1_ (where _n_ is the number of items in the list), so `...[-1]` is a sensible way to access the last item.\n\n#### A challenge for you!\n\nEdit the code so that it prints the 'second' element in the list\n\n:::: {.panel-tabset}\n\n#### Question\n\n:::{.to-pyodide}\n\n::: {#71b1b31c .cell execution_count=6}\n``` {.python .cell-code}\nmyNewList = ['first', 'second', 'third']\n#print(\"The second element is :\" + myNewList[???])\n```\n:::\n\n\n:::\n\n#### Answer\n\n::: {#58875ad7 .cell execution_count=7}\n``` {.python .cell-code}\nmyNewList = ['first', 'second', 'third']\nprint(\"The second element is :\" + myNewList[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe second element is :second\n```\n:::\n:::\n\n\n::::\n\n### Index Out of Range\n\nWhat happens when you try to access an element that doesn't exist? \n\nWe know that `myList` has 3 elements, so what if we try to access the 200th element in the list? In that case Python, as usual, will inform us of the problem using an *error message* pointing to the problem:\n\n```python\nmyNewList = ['first', 'second', 'third']\nprint(myNewList[200])\n```\n\n#### A challenge for you!\n\nDo you remember the past lesson on *syntax errors* and *exceptions*? What is the error message displayed in the code above? Is it an *exception* or a *syntax error*? Can you find the explanation for what's going in the [Official Documentation](https://docs.python.org/3/tutorial/errors.html)?\n\nEven if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. Errors detected during execution are called ***exceptions*** and are not unconditionally fatal. The last line of the error message indicates what happened.\n\nYou can see from the last line to you have an error related to your index - where your list index is out of range.\n\n## A String is a List?\n\nEven if you didn't realise it, you have already been working with lists in a _sense_ because *strings* are _basically_ lists! Think about it this way: strings are an ordered sequence of characters because 'hello' and 'olhel' are very different words! It turns out that characters in a string can be accessed the same way we'd access a generic list.\n\n::: {#fb20b470 .cell execution_count=8}\n``` {.python .cell-code}\nmyString = \"ABCDEF\"\nprint(myString[0])\nprint(myString[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA\nF\n```\n:::\n:::\n\n\n## Slicing\n\nIf you want to access more than one item at a time, then you can specify a _range_ using two index values instead of just one. \n\nIf you provide two numbers, Python will assume you are indicating the start and end of a _group_ of items. This operation is called *list slicing*, but keep in mind that indexes start from 0!\n\n_Note_: remember too that the error above when we tried to get the 200th element was _index out of range_. So 'range' is how Python talks about more than one list element.\n\n::: {#60985f3e .cell execution_count=9}\n``` {.python .cell-code}\nshortSentence = \"Now I'll just print THIS word, between the 20th and the 25th character: \"\nprint(shortSentence[20:25])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTHIS \n```\n:::\n:::\n\n\n### A challenge for you!\n\nUsing the previous code as a guide, edit the code below so that it prints from the second to the fourth (inclusive) characters from the string:\n\n:::: {.panel-tabset}\n\n#### Question\n\n:::{.to-pyodide}\n\n::: {#6df62547 .cell execution_count=10}\n``` {.python .cell-code}\nshortSentence2 = \"A12B34c7.0\"\n# print(shortSentence2[???:???])\n```\n:::\n\n\n:::\n\n#### Answer\n\n::: {#63949e66 .cell execution_count=11}\n``` {.python .cell-code}\nshortSentence2 = \"A12B34c7.0\"\nprint(shortSentence2[1:4]) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n12B\n```\n:::\n:::\n\n\n:::\n\n::::\n\nTo print the entirety of a list from any starting position onwards, just drop the second index value while leaving the `:` in your code:\n\n::: {#909ecb2f .cell execution_count=12}\n``` {.python .cell-code}\nstringToPrint = \"I will print from HERE onwards\"\nprint(\"Starting from the 17th position: \" + stringToPrint[17:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarting from the 17th position:  HERE onwards\n```\n:::\n:::\n\n\nNotice that there are _two_ spaces between \"position:\" and \"HERE\" in the printout above? That's because the 17th character is a space. Let's make it a little more obvious:\n\n::: {#9a5cf847 .cell execution_count=13}\n``` {.python .cell-code}\nprint(\"Starting from the 17th position: '\" + stringToPrint[17:] + \"'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarting from the 17th position: ' HERE onwards'\n```\n:::\n:::\n\n\nGot it?\n\n### A challenge for you!\n\nNow, combining what we've seen above, how do you think you would print everything _up to the eighth character from the end_ (which is the space between \"HERE\" and \"onwards\")?\n\nYou'll need to combine:\n\n1. Negative indexing\n2. List slicing\n\nThere are two ways to do it, one way uses only one number, the other uses two. Both are correct. Why don't you try to figure them both out? For 'Way 2' below the `???` is a placeholder for a full slicing operation since if we gave you more of a hint it would make it too obvious.\n\n:::: {.panel-tabset}\n\n#### Question\n\n:::{.to-pyodide}\n\n::: {#810c7e5b .cell execution_count=14}\n``` {.python .cell-code}\n#print(\"Up to the 18th position (Way 1): '\" + stringToPrint[???:???] + \"'\")\n#print(\"Up to the 18th position (Way 2): '\" + ??? + \"'\")\n```\n:::\n\n\n:::\n\n#### Solution\n\n::: {#5a32abce .cell execution_count=15}\n``` {.python .cell-code}\nprint(\"Up to the 18th position (Way 1): '\" + stringToPrint[-8:] + \"'\")\nprint(\"Up to the 18th position (Way 2): '\" + stringToPrint[22:30] + \"'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUp to the 18th position (Way 1): ' onwards'\nUp to the 18th position (Way 2): ' onwards'\n```\n:::\n:::\n\n\n::::\n\nStrings have also plenty of methods that might prove to be quite useful in the future; for a fuller overview check out [this reference](https://en.wikibooks.org/wiki/Python_Programming/Variables_and_Strings).\n\n## List Operations\n\nSo far, we've only created a list, but just like a real to-do list, most lists don't usually stay the same throughout the day (or the execution of your application). Their _real_ value comes when we start to change them: adding and removing items, updating an existing item, concatenating several lists (i.e. sticking them together), etc.\n\n### Replacing an item\n\nHere's how we replace an item in a list:\n\n::: {#982182dd .cell execution_count=16}\n``` {.python .cell-code}\nmyNewList = ['first', 'second', 'third']\nprint(myNewList)\n\n# This replaces the item in the 2nd position\nmyNewList[1] = 'new element'\n\nprint(myNewList)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['first', 'second', 'third']\n['first', 'new element', 'third']\n```\n:::\n:::\n\n\nThis shouldn't surprise you too much: it's just an assignment (via \"=\") after all! \n\nSo if you see `list[1]` on the right side of the assignment (the \"=\") then we are _reading from_ a list, but if you see `list[1]` on the left side of the assignment then we are _writing to_ a list.\n\nHere's an example for a (small) party at a friend's place:\n\n::: {#97694595 .cell execution_count=17}\n``` {.python .cell-code}\ntheParty = ['Bob','Doug','Louise','Nancy','Sarah','Jane']\nprint(theParty)\n\ntheParty[1] = 'Phil' # Doug is replaced at the party by Phil\nprint(theParty)\n\ntheParty[0] = theParty[1]\nprint(theParty) # Phil is an evil genius and manages to also replace Doug with a Phil clone\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Bob', 'Doug', 'Louise', 'Nancy', 'Sarah', 'Jane']\n['Bob', 'Phil', 'Louise', 'Nancy', 'Sarah', 'Jane']\n['Phil', 'Phil', 'Louise', 'Nancy', 'Sarah', 'Jane']\n```\n:::\n:::\n\n\nGot it?\n\n### Addition and Multiplication\n\nYou can also operate on entire lists at one time, rather than just on their elements individually. For instance, given two lists you might want to add them together like so:\n\n::: {#cdd37801 .cell execution_count=18}\n``` {.python .cell-code}\nbritishProgrammers = [\"Babbage\", \"Lovelace\"]\nnonBritishProgrammers = [\"Torvald\", \"Knuth\"]\n\nfamousProgrammers = britishProgrammers + nonBritishProgrammers\nprint(famousProgrammers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Babbage', 'Lovelace', 'Torvald', 'Knuth']\n```\n:::\n:::\n\n\nYou can even multiply them, although in this particular instance it is kind of pointless:\n\n::: {#b026006e .cell execution_count=19}\n``` {.python .cell-code}\nprint(britishProgrammers * 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Babbage', 'Lovelace', 'Babbage', 'Lovelace']\n```\n:::\n:::\n\n\n### A challenge for you!\n\nCorrect the syntax in the following code to properly define a new list: \n\n:::: {.panel-tabset}\n\n#### Question\n\n```python\notherNonBritishProgrammers = [\"Wozniak\" ??? \"Van Rossum\"]\n```\n\n#### Answer\n\n::: {#50870a01 .cell execution_count=20}\n``` {.python .cell-code}\notherNonBritishProgrammers = [\"Wozniak\",\"Van Rossum\"]\n```\n:::\n\n\n::::\n\nEdit the following code to print out all the non british programmers:\n\n:::: {.panel-tabset}\n#### Question\n```python\nnonBritishProgrammers = [\"Torvald\", \"Knuth\"]\notherNonBritishProgrammers = [\"Wozniak\",\"Van Rossum\"]\n\nprint nonBritishProgrammers ??? otherNonBritishProgrammers\n```\n\n#### Answer\n\n:::{.to-pyodide}\n\n::: {#887484f5 .cell execution_count=21}\n``` {.python .cell-code}\nnonBritishProgrammers = [\"Torvald\", \"Knuth\"]\notherNonBritishProgrammers = [\"Wozniak\",\"Van Rossum\"]\n\nprint(nonBritishProgrammers + otherNonBritishProgrammers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Torvald', 'Knuth', 'Wozniak', 'Van Rossum']\n```\n:::\n:::\n\n\n:::\n::::\n\n###  You're (not) in the list!\n\nEver stood outside a club or event and been told: \"You're not on/in the list\"? Well, Python is like that too. In fact, Python tries as hard as possible to be _like_ English – this isn't by accident, it's by design – and once you've done a _bit_ of programming in Python you can start to guess how to do something by thinking about how you might say it in English. \n\nSo if you want to check if an item exists in a list you can use the **in** operator:\n\n```python\nelement in list\n```\n\nThe **in** operator will return `True` if the item is present, and `False` otherwise. This is a data type (called a Boolean) that we've seen in the [Boolean logic](./Boolean_Logic.qmd) lessons.\n\n::: {#1611c54a .cell execution_count=22}\n``` {.python .cell-code}\nprint ('Lovelace' in britishProgrammers)\nprint ('Lovelace' in nonBritishProgrammers)\n\nletters = ['a','b','c','d','e','f','g','h','i']\nprint ('e' in letters)\nprint ('z' in letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\nTrue\nFalse\n```\n:::\n:::\n\n\n_Note:_ You might also have spotted that this time there are parentheses (\"(...)\") after `print`. In general, as you become more experienced you'll _always_ want to put parentheses after a `print` statement (because that's how Python3 works) but the intricacies of _why_ this is the case are a bit out of the scope of an introductory set of lessons.\n\nAnyway, if you want to check if an item does not exist in a list then you can use the **not in ** operator. Let's go back to our party:\n\n::: {#eb834b57 .cell execution_count=23}\n``` {.python .cell-code}\nprint(theParty)\nprint('Bob' not in theParty)\nprint('Jane' not in theParty)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Phil', 'Phil', 'Louise', 'Nancy', 'Sarah', 'Jane']\nTrue\nFalse\n```\n:::\n:::\n\n\nSo here, that 'Boolean' gives us `True` on the first `not in` because it's \"true that Bob isn't at the party\" and `False` on the second one because it's \"not true that Jane isn't at the party\"! Double-negatives aren't supposed to exist in English, but they certainly do in programming!\n\n### A challenge for you!\n\nComplete the missing bits of the following code so that we print out Ada Lovelace, her full name:\n\n:::: {.panel-tabset}\n\n#### Question\n\n::: {.to-pyodide}\n\n::: {#86d06581 .cell execution_count=24}\n``` {.python .cell-code}\nfirstProgrammerSurnames = [\"Babbage\", \"Lovelace\"]\nfirstProgrammerNames    = [\"Charles\", \"Ada\"]\n\nfirstProgrammerSurnames[1] = firstProgrammerNames[1] + \" \" + firstProgrammerSurnames[1]\n\n#print(\"Lady \"+ ???[1] +\" is considered to be the first programmer.\") \n```\n:::\n\n\n:::\n\n#### Answer\n\n::: {#5d9dd0f5 .cell execution_count=25}\n``` {.python .cell-code}\nfirstProgrammerSurnames = [\"Babbage\", \"Lovelace\"]\nfirstProgrammerNames    = [\"Charles\", \"Ada\"]\n\nfirstProgrammerSurnames[1] = firstProgrammerNames[1] + \" \" + firstProgrammerSurnames[1]\n\nprint(\"Lady \"+ firstProgrammerSurnames[1] +\" is considered to be the first programmer.\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLady Ada Lovelace is considered to be the first programmer.\n```\n:::\n:::\n\n\n::::\n\n_Note_ : Actually, Lady Ada Lovelace is a [fascinating person](https://en.wikipedia.org/wiki/Ada_Lovelace): she isn't just the first female programmer, she was the first programmer full-stop. For many years Charles Babbage got all the credit for inventing computers simply because he was a guy and designed the clever mechanical adding machine. However, lately, we've realised that Ada was the one who actually saw that Babbage hadn't just invented a better abacus, he'd invented a general-purpose computing device! \n\nShe was so far ahead of her time that the code she wrote down couldn't even run on Babbage's 'simple' (i.e. remarkably complex for the time) computer, but it is now recognised as the first computer algorithm. As a result, there is now a day in her honour every year that is celebrated around the world at places like Google and Facebook, as well as at King's and MIT, because we want to recognise the fundamental contribution to computing made by women programmers. \n\nThis contribution was long overlooked by the men who thought that the hard part was the machine, not the programming. Rather entertainingly (given the kudos attached to the people who created applications like Google and Facebook), most men thought that programming was just like typing and was, therefore 'women's work'. So why not take a few minutes to [recognise the important contributions of women to the history of computing](http://www.npr.org/blogs/alltechconsidered/2014/10/06/345799830/the-forgotten-female-programmers-who-created-modern-tech).\n\n![Margaret Hamilton, _lead_ software engineer at MIT, next to the code that she and her colleagues created, taking Apollo 11 to the moon.](http://static1.squarespace.com/static/54537cf7e4b046486283233c/t/56b892ae044262401f580f68/1454936876985/margaret+hamilton+meme.jpg)\n\n## Extending Lists\n\nWe've already seen that we can combine two lists using the `+` operator, but if you wanted to constantly add new items to your list then having to do something like this would be annoying:\n\n::: {#998e3629 .cell execution_count=26}\n``` {.python .cell-code}\nmyList = [] # An empty list\n\nmyList = myList + ['New item']\nmyList = myList + ['Another new item']\nmyList = myList + ['And another one!']\n\nprint(myList)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['New item', 'Another new item', 'And another one!']\n```\n:::\n:::\n\n\nNot just annoying, but also hard to read! As with most things, because programmers are lazy there's an easier way to write this in Python:\n\n::: {#58dae8a4 .cell execution_count=27}\n``` {.python .cell-code}\nmyList = [] # An empty list\n\nmyList.append('New item')\nmyList.append('Another new item')\nmyList.append('And another one!')\n\nprint(myList)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['New item', 'Another new item', 'And another one!']\n```\n:::\n:::\n\n\nWhy don't you try typing it all in your working environment? You'll get the same answer either way, but one is faster to write and easier to read!\n\nAppending to a list using `append(...)` is actually using something called a _function_. We've not really seen this concept before and we're not going to go into it in enormous detail here (there's a whole other lesson to introduce you to functions). The things that you need to notice at _this_ point in time are:\n\n1. That square brackets ('[' and ']') are used for list indexing.\n2. That parentheses ('(' and ')') are (normally) used for function calls.\n\nThe best thing about functions is that they are like little packages of code that can do a whole bunch of things at once (e.g. add an item to a list by modifying the list directly), but you only need to remember to write `append(...)`. \n\nWhat did I mean just now by 'modifying the list directly'? \n\nNotice that in the first example above we had to write:\n\n```python\nmyList = myList + ['New item']\n```\n\nbecause we had to write the result of concatenating the two lists together back to the variable. The list isn't really growing, we're just overwriting what was _already_ in `myList` with the results of the list addition operation. What do you think you would get if you wrote the following code:\n\n```python\nmyList = [] # An empty list\n\nmyList + ['New item']\nmyList + ['Another new item']\nmyList + ['And another one!']\n\nprint(myList)\n```\n\nIf you aren't sure, why don't you try typing this into the coding area above and try to figure out why the answer is: ''.\n\nMeanwhile, in the second example we could just write: \n\n```python \nmyList.append('New item')\n```\n\nand the change was made to `myList` directly! So this is easier to read _and_ it is more like what we'd expect to happen: the list grows without us having to overwrite the old variable.\n\n## Other List Functions\n\n`append()` is a function, and there are many other functions that can be applied to lists such as: `len`, `insert` and `index`. You tell Python to *execute a function* (sometimes also termed *calling a function*) by writing the function's name, followed by a set of parentheses. The parentheses will contain any optional inputs necessary for the function to do its job. Appending to a list wouldn't be very useful if you couldn't tell Python _what_ to append in the first place!\n\nThe `len` function is also a good example of this:\n\n::: {#58266668 .cell execution_count=28}\n``` {.python .cell-code}\nlen(theParty)\n```\n\n::: {.cell-output .cell-output-display execution_count=208}\n```\n6\n```\n:::\n:::\n\n\nHere, the function `len` (lazy short-hand for _length_ ) is _passed_ `theParty` list as an input in order to do its magic.\n\nThe functions `append`, `insert` and `index` work a _little_ bit differently. They have to be _called_ using `theParty` list. We're at risk of joining Alice down the rabbit-hole here, so let's just leave it at: the second set of functions are of a particular _type_ known as *methods* of the *list class*. We'll stop there. \n\n![Alice falling down the rabbit hole](https://www.washingtonpost.com/blogs/answer-sheet/files/2013/01/alice-falling-down-rabbit-hole1.jpg){width=250}\n\nIn order to use a _list method_ you always need to 'prepend' (i.e. lead with) the name of list you want to work with, like so:\n\n::: {#a5928885 .cell execution_count=29}\n``` {.python .cell-code}\ntheParty.append(\"New Guest\")\ntheParty.insert(2, \"Anastasia\")\nprint(theParty.index(\"Sarah\"))\nprint(theParty)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n['Phil', 'Phil', 'Anastasia', 'Louise', 'Nancy', 'Sarah', 'Jane', 'New Guest']\n```\n:::\n:::\n\n\nThe idea here is that methods are associated with specific types of things such as lists, whereas generic functions are kind of free-floating. Think about it this way: you can't append something to a number, because that _makes no sense_. Appending is something that only makes sense in the context of a list. In contrast, something like `len` works on several different types of variables: lists and string both!\n\n### Append\n\nReminder: here's appending...\n\n::: {#ef138a00 .cell execution_count=30}\n``` {.python .cell-code}\nbritishProgrammers = ['Lovelace']\nbritishProgrammers.append(\"Turing\")\nprint(britishProgrammers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Lovelace', 'Turing']\n```\n:::\n:::\n\n\n### Insert\n\nThat's cool, but as you noticed `append` only ever inserts the new item as the last element in the list. What if you want it to go somewhere else?\n\nWith `insert` you can also specify a position\n\n::: {#cb3fccbf .cell execution_count=31}\n``` {.python .cell-code}\nprint(nonBritishProgrammers)\nnonBritishProgrammers.insert(1, \"Swartz\")\nprint(nonBritishProgrammers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Torvald', 'Knuth']\n['Torvald', 'Swartz', 'Knuth']\n```\n:::\n:::\n\n\n### Index\n\nLastly, with the `index` method you can easily ask Python to find the position (index) of a given item:\n\n::: {#9ca92e0e .cell execution_count=32}\n``` {.python .cell-code}\n# Say you want to know in where \"Knuth\" is \n# in the list of non-British programmers...\nprint(nonBritishProgrammers.index(\"Knuth\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n### A challenge for you!\n\nAdd the famous [Grace Hopper](https://en.wikipedia.org/wiki/Grace_Hopper) (inventress of the first compiler!) to the list of British programmers, and then print her index position:\n\n:::: {.panel-tabset}\n\n#### Question\n\n::: {.to-pyodide}\n\n::: {#d2279556 .cell execution_count=33}\n``` {.python .cell-code}\n#nonBritishProgrammers.???(\"Hopper\") \n#print(nonBritishProgrammers.???(\"Hopper\"))\n```\n:::\n\n\n:::\n\n#### Answer\n\n::: {#9a9059c6 .cell execution_count=34}\n``` {.python .cell-code}\nnonBritishProgrammers.append(\"Hopper\") \n# let's check\nprint(nonBritishProgrammers)\nprint(nonBritishProgrammers.index(\"Hopper\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Torvald', 'Swartz', 'Knuth', 'Hopper']\n3\n```\n:::\n:::\n\n\n::::\n\n### Length\n\nCool, so those were some of the *methods you can invoke on* a list. Let's focus now on some *functions* that take lists as an _input_.\n\nWith the function `len` you can immediately know the `len`-gth of a given list:\n\n::: {#cfae7eb4 .cell execution_count=35}\n``` {.python .cell-code}\nprint( len(britishProgrammers) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n::: {#3b679146 .cell execution_count=36}\n``` {.python .cell-code}\nlength_of_list = len(nonBritishProgrammers)\nprint(\"There are \" + str(length_of_list) + \" elements in the list of non-British Programmers\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 4 elements in the list of non-British Programmers\n```\n:::\n:::\n\n\nDid you see the `str(length_of_list)`? There's another function! We didn't draw attention to it before, we just told you to use `str(5.0)` to convert the float `5.0` to the string `\"5.0\"`. We can tell it's a function because it uses the format `functionName(...some input...)`. So the function name is `str` (as in _convert to string_) and the input is a number (in this case it's the length of the list `nonBritishProgrammers`). So now we can easily convert between different types of data: we took an integer (you can check this by adding the following line to the code above:\n\n:::: {.panel-tabset}\n\n#### Question\n\n```python\n# Fix the syntax of this line to print the length of the list:\nprint length_of_list + 1\n```\n\n#### Answer\n\n::: {#6d4a1ee8 .cell execution_count=37}\n``` {.python .cell-code}\nprint(int(length_of_list) + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n:::\n\n\n::::\n\nAnd then print it out as a string. So `length_of_list` is a number, and by calling `str(length_of_list)` we changed it to a string that we could print out. Given that programmers are lazy, can you guess how you'd convert the string \"3\" to the _integer_ 3?\n\n:::: {.panel-tabset}\n\n#### Question\n\n::: {.to-pyodide}\n\n::: {#dca3fd6e .cell execution_count=38}\n``` {.python .cell-code}\n'''\nConvert the string \"3\" to the _integer_ 3\n'''\n```\n\n::: {.cell-output .cell-output-display execution_count=218}\n```\n'\\nConvert the string \"3\" to the _integer_ 3\\n'\n```\n:::\n:::\n\n\n:::\n\n#### Answer\n\n::: {#53ede680 .cell execution_count=39}\n``` {.python .cell-code}\nthree = \"3\"\n\n# Let's check the data type\nprint(type(three))\n\n# Change to Integer\nthree = int(three)\nprint(type(three))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'str'>\n<class 'int'>\n```\n:::\n:::\n\n\n::::\n\n### A challenge for you!\n\nComplete the missing bits of the following code:\n\n:::: {.panel-tabset}\n\n#### Question\n\n::: {.to-pyodide}\n\n::: {#cb271e8e .cell execution_count=40}\n``` {.python .cell-code}\n#length_of_brits = ???(britishProgrammers)\n#print \"There are \" ??? \" British programmers.\"\n```\n:::\n\n\n:::\n\n#### Answer\n\n::: {#7b3f3e1e .cell execution_count=41}\n``` {.python .cell-code}\nlength_of_brits = len(britishProgrammers)\nprint(\"There are \" + str(length_of_brits) + \" British programmers.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 2 British programmers.\n```\n:::\n:::\n\n\n::::\n\nTo check if the output of `range()` is a list we can use the `type()` function:\n\n## Applied Geo-example\n\nLet's have a little play with some geographical coordinates. Based on what we've just done in this lesson, what do you think would be a good data type for storing lat/long coordinates?\n\nGo on, I'll bet you can't guess!\n\nLet's use what we know to jump to a particular point on the planet...\n\n::: {#c37a4ae6 .cell execution_count=42}\n``` {.python .cell-code}\n# We'll see more of this package import later...\n# For now, just know that it \n# provides access to a function called IFrame\nfrom IPython.display import IFrame\n\n# We want to view an OpenStreetMap map\nsiteName  = \"https://www.openstreetmap.org/#map=\"\n\n# Specify the location and zoom level\nlatitude  = 63.6314\nlongitude = -19.6083\nzoomLevel = 10\n\nmapURL = siteName + '/'.join([str(zoomLevel), str(latitude), str(longitude)])\n\n# Show the ULR\nprint(mapURL)\n\n# And now show us an inline map!\nIFrame(mapURL, width='100%', height=400)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://www.openstreetmap.org/#map=10/63.6314/-19.6083\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=222}\n```{=html}\n\n        <iframe\n            width=\"100%\"\n            height=\"400\"\n            src=\"https://www.openstreetmap.org/#map=10/63.6314/-19.6083\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\nAnd now let's try somewhere closer to home. Try using the `KCLMapCoordinates` list below (which tells you the x/y and zoom-level) in combination with the code above. I'd suggest copying what you need from above, pasting it into the code below, and then using what you know about accessing list information so that the map shows the location of King's College London...\n\n::: {#be7b95da .cell execution_count=43}\n``` {.python .cell-code}\n# King's College coordinates\n# What format are they in? Does it seem appropriate?\nKCLMapCoordinates = [51.51130657591914, -0.11596798896789551, 15]\n```\n:::\n\n\n::: {#de4a52cc .cell execution_count=44}\n``` {.python .cell-code}\n# We want to view an OpenStreetMap map\nsiteName  = \"https://www.openstreetmap.org/#map=\"\n\n# Specify the location and zoom level\nlatitude  = KCLMapCoordinates[0]\nlongitude = KCLMapCoordinates[1]\nzoomLevel = 15\n\nmapURL = siteName + '/'.join([str(zoomLevel), str(latitude), str(longitude)])\n\n# Show the URL\nprint(mapURL)\n\n# And now show us an inline map!\nmap = siteName + ''.join(mapURL)\nIFrame(mapURL, width='100%', height=400)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://www.openstreetmap.org/#map=15/51.51130657591914/-0.11596798896789551\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=224}\n```{=html}\n\n        <iframe\n            width=\"100%\"\n            height=\"400\"\n            src=\"https://www.openstreetmap.org/#map=15/51.51130657591914/-0.11596798896789551\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n::: {#87f43704 .cell execution_count=45}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n        <iframe\n            width=\"100%\"\n            height=\"400\"\n            src=\"https://www.openstreetmap.org/#map=15/51.51130657591914/-0.11596798896789551\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n### Further references:\n\nGeneral list or resources\n- [Awesome list of resources](https://github.com/vinta/awesome-python)\n- [Python Docs](https://docs.python.org/3/tutorial/introduction.html)\n- [HitchHiker's guide to Python](http://docs.python-guide.org/en/latest/intro/learning/)\n- [Learn Python the Hard Way - Lists](http://learnpythonthehardway.org/book/ex32.html)\n- [Learn Python the Hard Way - Dictionaries](http://learnpythonthehardway.org/book/ex39.html)\n\n\n### Credits!\n\n#### Contributors:\nThe following individuals have contributed to these teaching materials: \n- [James Millington](https://github.com/jamesdamillington)\n- [Jon Reades](https://github.com/jreades)\n- [Michele Ferretti](https://github.com/miccferr)\n- [Zahratu Shabrina](https://github.com/zarashabrina)\n\n#### License\nThe content and structure of this teaching project itself is licensed under the [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license](https://creativecommons.org/licenses/by-nc-sa/4.0/), and the contributing source code is licensed under [The MIT License](https://opensource.org/licenses/mit-license.php).\n\n#### Acknowledgements:\nSupported by the [Royal Geographical Society](https://www.rgs.org/HomePage.htm) (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n#### Potential Dependencies:\nThis lesson may depend on the following libraries: None\n\n",
    "supporting": [
      "Lists_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}