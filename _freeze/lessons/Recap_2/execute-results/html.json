{
  "hash": "3fed6cfc1f0946b50a66f77ba8498c52",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat: html\nfilters:\n- panelize\n- pyodide\ntitle: Recap 2\n---\n\n\n\n\nSince the first recap, you've learned about lists, dictionaries and loops. Let's revise those concepts and how to use them in this lesson before continuing on to some new material. Answer the questions as best you can, working through any error messages you receive and remembering to refer back to previous lessons. \n\n## Lists\n\nFirst, here's a reminder of some useful methods (_i.e._ functions) that apply to lists:\n\n| Method                 | Action                                                           |\n|------------------------|------------------------------------------------------------------|\n| list.count(`x`)        | Return the number of times x appears in the list                 |\n| list.insert(`i`, `x`)  | Insert value `x` at a given position `i`                         |\n| list.pop([`i`])        | Remove and return the value at position `i` (`i` is optional)    |\n| list.remove(`x`)       | Remove the first element from the list whose value is `x`        |\n| list.reverse()         | Reverse the elements of the list in place                        |\n| list.sort()            | Sort the items of the list in place                              |\n| list.index(`x`)        | Find the first occurence of `x` in the list                      |\n| list[x:y]              | Subset the list from index `x` to `y-1`                          |\n\n### Interacting with Lists\n\nReplace `???` in the following code blocks to make the code work as instructed in the comments. All of the methods that you need are listed above, so this is about testing yourself on your understanding *both* of how to read the help *and* how to index elements in a list.\n\n**a)** The next line creates a list of city names (each element is a string) - run the code and check you understand what it is doing. \n\n```{pyodide-python}\ncities = [\"Bristol\", \"London\", \"Manchester\", \"Edinburgh\", \"Belfast\", \"York\"]\nprint(cities)\n```\n\n\n\n**b)** Replace the `???` so that it prints the position of Manchester in the list\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(\"The position of Manchester in the list is: \" + \n      str(cities.???('Manchester')))\n```\n\n#### Answer\n\n::: {#eea19e96 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"The position of Manchester in the list is: \" + \n      str(cities.index('Manchester')))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe position of Manchester in the list is: 2\n```\n:::\n:::\n\n\n:::\n\n**c)** Replace the `???` so that it prints Belfast\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(cities[2 + ???])\n```\n\n#### Answer\n\n::: {#cf9792b1 .cell execution_count=3}\n``` {.python .cell-code}\nprint(cities[2 + 2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBelfast\n```\n:::\n:::\n\n\n:::\n\n**d)** Use a **negative** index to print *Belfast*\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(cities[???])\n```\n\n#### Answer\n\n::: {#9c527869 .cell execution_count=4}\n``` {.python .cell-code}\nprint(cities[-2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBelfast\n```\n:::\n:::\n\n\n:::\n\n**e)** Force Python to generate a `list index out of range` error. NB: This error happens you provide an index for which a list element does not exist\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(cities[???])\n```\n\n#### Answer\n\n::: {#c40a6666 .cell execution_count=5}\n``` {.python .cell-code}\ntry: \n    print(cities[6]) #anything above five would do it\nexcept IndexError:\n    print(\"Doesn't exist.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDoesn't exist.\n```\n:::\n:::\n\n\n:::\n\n**f)** Think about what the next line creates, then run the code. \n\n```{pyodide-python}\ntemperatures = [15.6, 16.5, 13.4, 14.0, 15.2, 14.8]\nprint(temperatures)\n```\n\n\n\n**g)** What would you change `???` to, to return `[16.5, 13.4, 14.0]`?\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(temperatures[???])\n```\n\n#### Answer\n\n::: {#0e524d62 .cell execution_count=7}\n``` {.python .cell-code}\nprint(temperatures[1:4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[16.5, 13.4, 14.0]\n```\n:::\n:::\n\n\n:::\n\n**h)** What are two different ways of getting `[15.2, 14.8]` from the `temperatures` list?\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(temperatures[???])\nprint(temperatures[???])\n```\n\n#### Answer\n\n::: {#618d835a .cell execution_count=8}\n``` {.python .cell-code}\nprint(temperatures[4:6])\nprint(temperatures[-3:-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[15.2, 14.8]\n[14.0, 15.2]\n```\n:::\n:::\n\n\n:::\n\n**i)** Notice that the list of `temperatures` is the same length as the list of `cities`, that's because these are (roughly) average temperatures for each city! Given this, how do you print: \"The average temperature in Manchester is 13.4 degrees.\" _without_ doing any of the following:\n\n1. Using a list index directly (*i.e.* `cities[2]` and `temperatures[2]`) or \n2. Hard-coding the name of the city? \n\n**To put it another way, neither of these solutions is the answer**:\n\n```python\nprint(\"The average temperature in Manchester is \" + str(temperatures[2]) + \" degrees.\")\ncity=2\nprint(\"The average temperature in \" + cities[city] + \" is \" + str(temperatures[city]) + \" degrees.\")\n```\n\n_Hint:_ you need to combine some of the ideas we've used above!\n\n:::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\ncity  = \"Manchester\" # Use this to start the solution...\nindex = ???\nprint(\"The average temperature in \" ???)\n```\n\n#### Answer\n\n::: {#6ffa7bf9 .cell execution_count=9}\n``` {.python .cell-code}\ncity  = \"Manchester\"\nindex = cities.index(city)\nprint(\"The average temperature in \" + cities[index] + \" is \" + str(temperatures[index]) + \" degrees.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe average temperature in Manchester is 13.4 degrees.\n```\n:::\n:::\n\n\nNotice that this could *also* be written:\n\n::: {#9ae9e297 .cell execution_count=10}\n``` {.python .cell-code}\ncity = \"Manchester\"\nprint(\"The average temperature in \" + \n      cities[cities.index(city)] + \" is \" + \n      str(temperatures[cities.index(city)]) + \" degrees.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe average temperature in Manchester is 13.4 degrees.\n```\n:::\n:::\n\n\n*If* it works for you, you can think of this as being like substitution in an equation: you can replace `index` with `cities.index(city)` because that's the value we set `index` to after all! \n\n::: {.callout-tip}\n\n#### Substitution\n\nMany time programmers will break a more complex task down into smaller steps: it's a great general problem solving approach, but in programming you can then use it to (re)compose more complex code.\n\n:::\n\n::::\n\nNow copy+paste your code and change only **one** thing in order to print out: \"The average temperature in Belfast is 15.2 degrees\"\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\n???\n```\n\n#### Answer\n\n::: {#b24714a8 .cell execution_count=11}\n``` {.python .cell-code}\ncity  = \"Belfast\"\nindex = cities.index(city)\nprint(\"The average temperature in \" + cities[index] + \" is \" + str(temperatures[index]) + \" degrees.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe average temperature in Belfast is 15.2 degrees.\n```\n:::\n:::\n\n\n:::\n\n### Manipulating Multiple Lists\n\nWe'll create two lists for the next set of questions:\n\n::: {#f4f743b8 .cell execution_count=12}\n``` {.python .cell-code}\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n```\n:::\n\n\n**j)** How do you get Python to print: `[1, 2, 3, 4, 5, 6]`\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint( ??? )\n```\n\n#### Answer\n\n::: {#b8f8e0be .cell execution_count=13}\n``` {.python .cell-code}\nprint ( list1 + list2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\n:::\n\n**k)** How to you get Python to print: `[1, 2, 3, [4, 5, 6]]`\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint( ??? )\n```\n\n#### Answer\n\n::: {#997f583b .cell execution_count=14}\n``` {.python .cell-code}\nprint(list1+[list2])\nlist1.append(list2) #Â Alternatively...\nprint(list1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, [4, 5, 6]]\n[1, 2, 3, [4, 5, 6]]\n```\n:::\n:::\n\n\n:::\n\nRe-setting the lists now how would you...\n\n\n\n**l)** Print out: `[6, 5, 4, 3, 2, 1]` ?\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = ???\nlist3.???\nprint(list3)\n```\n\n#### Answer\n\n::: {#d2bd4863 .cell execution_count=16}\n``` {.python .cell-code}\nlist3 = list1+list2\nlist3.reverse()\nprint(list3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[6, 5, 4, 3, 2, 1]\n```\n:::\n:::\n\n\n:::\n\n**m)** Print out: `[3, 2, 1, 6, 5, 4]` ?\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nlist1.???\nlist2.???\nprint( list1+list2 )\n```\n\n#### Answer\n\n::: {#6f80e2e9 .cell execution_count=17}\n``` {.python .cell-code}\nlist1.reverse()\nlist2.reverse()\nprint( list1+list2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3, 2, 1, 6, 5, 4]\n```\n:::\n:::\n\n\n:::\n\n**n)** How would you print out `[3, 2, 6, 5]` with a permanent change to the list (not slicing)? NB: this follows on from the previous question, so note that the order is still 'reversed'.\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nlist1.???\nlist2.???\nprint( list1+list2 )\n```\n\n#### Answer\n\n::: {#d86ede13 .cell execution_count=18}\n``` {.python .cell-code}\nlist1.remove(1)\nlist2.remove(4)\nprint( list1+list2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3, 2, 6, 5]\n```\n:::\n:::\n\n\n:::\n\n## Dictionaries\n\nRemember that dictionaries (a.k.a. dicts) are like lists in that they are [data structures](https://docs.python.org/3/tutorial/datastructures.html) containing multiple elements. A key difference between [dictionaries](https://docs.python.org/3/tutorial/datastructures.html#dictionaries) and [lists](https://docs.python.org/3/tutorial/introduction.html#lists) is that while elements in lists are ordered, dicts are unordered. This means that whereas for lists we use integers as indexes to access elements, in dictonaries we use 'keys' (which can multiple different types; strings, integers, etc.). Consequently, an important concept for dicts is that of key-value pairs. \n\n### Creating an Atlas\n\nReplace `???` in the following code block to make the code work as instructed in the comments. If you need some hints and reminders, revisit the [Dictionaries Lesson](./Dicts.qmd).\n\nRun the code and check you understand what the data structure that is being created (the data for each city are latitude, longitude and airport code)\n\n```{pyodide-python}\ncities = {\n    'San Francisco': [37.77, -122.43, 'SFO'],\n    'London': [51.51, -0.08, 'LDN'],\n    'Paris': [48.86,2.29, 'PAR'],\n    'Beijing': [39.92,116.40 ,'BEI'],\n}\n```\n\n\n\n**a)** Add a record to the dictionary for Chennai ([data here](https://en.wikipedia.org/wiki/Chennai))\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\ncities['Chennai'] = ???\n```\n\n#### Answer\n\n::: {#ce644af2 .cell execution_count=20}\n``` {.python .cell-code}\ncities['Chennai'] = [13.08, 80.27,'MAA']\n```\n:::\n\n\n:::\n\n**b)** In *one* line of code, print out the airport code for Chennai\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nprint(\"The airport code for Chennai is \" ???)\n```\n\n#### Answer\n\n::: {#4bb7d73b .cell execution_count=21}\n``` {.python .cell-code}\nprint(\"The airport code for Chennai is \" + cities[\"Chennai\"][2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe airport code for Chennai is MAA\n```\n:::\n:::\n\n\n:::\n\n**c)** Check you understand the difference between the following two blocks of code by running them, checking the output and editing them (e.g. try the code again, but replacing *Berlin* with *London*)\n\n::: {#c5f851fb .cell execution_count=22}\n``` {.python .cell-code}\ntry:\n    print(cities['Berlin'])\nexcept KeyError:\n    print(\"Couldn't find key.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCouldn't find key.\n```\n:::\n:::\n\n\n::: {#4c435c5e .cell execution_count=23}\n``` {.python .cell-code}\nprint(cities.get('Berlin'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\nSo `dict.get()` does not generate a `KeyError`, it returns `None` (or any other value we want; e.g. `cities[get('Berlin','New City')]`). Depending on how you *expect* or *want* your code to behave either approach is valid. Think of it this way: is a missing key a 'problem' that needs to be resolved, or just a situation that you expect to encounter.\n\n:::\n\n**d)** Adapting the code below, print out the city name and airport code for *every* city in our Atlas.\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nfor k, v in cities.items():\n    print(\"The city of \" + ??? + \" has an airport code of \" + ??? )\n```\n\n#### Answer\n\n::: {#60a5d820 .cell execution_count=24}\n``` {.python .cell-code}\nfor k, v in cities.items():\n    # Technically the `str` isn't needed here, but it would be wise to \n    # allow for something other than a string to be returned...\n    print(\"The city of \" + str(k) + \" has an airport code of \" + str(v[2]) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe city of San Francisco has an airport code of SFO\nThe city of London has an airport code of LDN\nThe city of Paris has an airport code of PAR\nThe city of Beijing has an airport code of BEI\nThe city of Chennai has an airport code of MAA\n```\n:::\n:::\n\n\n:::\n\n## Loops\n\nRecall from the previous lessons that loops are a way to *iterate* (or repeat) chunks of code. The two most common ways to iterate a set of commands are the `while` loop and the `for` loop. \n\n### Working with Loops\nThe questions below use `for` loops. Replace `???` in the following code block to make the code work as instructed in the comments. If you need some hints and reminders, revisit the previous lessons.\n\n**a)** Print out every city on a separate line using a for loop:\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nfor c in ???:\n    print(???)\n```\n\n#### Answer\n\n::: {#e1abc486 .cell execution_count=25}\n``` {.python .cell-code}\nfor c in cities.keys():\n    print(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSan Francisco\nLondon\nParis\nBeijing\nChennai\n```\n:::\n:::\n\n\n:::\n\n**b)** Print out the name and latitude of every city in the cities dictionary using a for loop\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\nfor ??? in cities.???:\n    print(??? + \" is at latitude \" + str(???))\n```\n\n#### Answer\n\n::: {#7dabdbbb .cell execution_count=26}\n``` {.python .cell-code}\nfor city, attrs in cities.items():\n    print(city + \" is at latitude \" + str(attrs[0]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSan Francisco is at latitude 37.77\nLondon is at latitude 51.51\nParis is at latitude 48.86\nBeijing is at latitude 39.92\nChennai is at latitude 13.08\n```\n:::\n:::\n\n\nYou could also do this using `cities.keys()` and then looking it up like this: `cities[city][0]` but in this case that's a little less clear.\n\n:::\n\n**c)** Now print using a loop this new data structure:\n\n::: {.panel-tabset}\n\n#### Question\n\n```{pyodide-python}\ncitiesB = [\n    {'name':     'San Francisco',\n     'position': [37.77, -122.43],\n     'airport':  'SFO'},\n    {'name':     'London',\n     'position': [51.51, -0.08],\n     'airport':  'LDN'},\n    {'name':     'Paris',\n     'position': [48.86, 2.29],\n     'airport':  'PAR'},\n    {'name':     'Beijing',\n     'position': [39.92, 116.40],\n     'airport':  'BEI'}\n]\n\nfor ??? in citiesB.???:\n    print(??? + \" is at latitude \" + str(???))\n```\n\n#### Answer\n\n::: {#e68f7b52 .cell execution_count=27}\n``` {.python .cell-code}\ncitiesB = [\n    {'name':     'San Francisco',\n     'position': [37.77, -122.43],\n     'airport':  'SFO'},\n    {'name':     'London',\n     'position': [51.51, -0.08],\n     'airport':  'LDN'},\n    {'name':     'Paris',\n     'position': [48.86, 2.29],\n     'airport':  'PAR'},\n    {'name':     'Beijing',\n     'position': [39.92, 116.40],\n     'airport':  'BEI'}\n]\n\nfor city in citiesB:\n    print(city['name'] + \" is at latitude \" + str(city['position'][0]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSan Francisco is at latitude 37.77\nLondon is at latitude 51.51\nParis is at latitude 48.86\nBeijing is at latitude 39.92\n```\n:::\n:::\n\n\n:::\n\nNice work. Hopefully these questions have helped you compound your understanding. Onwards!\n\n### Credits!\n\n#### Contributors:\nThe following individuals have contributed to these teaching materials: \n- [James Millington](https://github.com/jamesdamillington)\n- [Jon Reades](https://github.com/jreades)\n- [Michele Ferretti](https://github.com/miccferr)\n- [Zahratu Shabrina](https://github.com/zarashabrina)\n\n#### License\nThe content and structure of this teaching project itself is licensed under the [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 license](https://creativecommons.org/licenses/by-nc-sa/4.0/), and the contributing source code is licensed under [The MIT License](https://opensource.org/licenses/mit-license.php).\n\n#### Acknowledgements:\nSupported by the [Royal Geographical Society](https://www.rgs.org/HomePage.htm) (with the Institute of British Geographers) with a Ray Y Gildea Jr Award.\n\n#### Potential Dependencies:\nThis lesson may depend on the following libraries: None\n\n",
    "supporting": [
      "Recap_2_files"
    ],
    "filters": [],
    "includes": {}
  }
}