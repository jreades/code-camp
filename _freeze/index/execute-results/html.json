{
  "hash": "6df5516312bda9aa41032dd134e3354a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Welcome\nlightbox:\n  match: auto\n  effect: fade\n  desc-position: right\n  loop: false\n---\n\n\nWell hi there! Are you a Computer Scientist? If so, this site _probably_ isn't for you.\n\nThis site is for everyone _else_---especially our [future MSc Urban Spatial Science](https://www.ucl.ac.uk/bartlett/casa/study/msc-urban-spatial-science) students---looking to learn some basic Python, together with a bit about the other tools that we think people should know, before the start of term.\n\n## What will you learn?\n\nSo what can you expect to learn? By the end of the course, we hope that you will have a basic understanding of:\n\n1. The range of tools that we use to _do_ urban spatial science, a sense of _why_ we use them, and _how_ they connect with tools used by practicing researchers and programmers. \n2. The fundamental concepts of programming used in Python so that you can 'read' Python code and begin to recognise how to do things using Python.\n3. How programs and libraries are structured so that your code remains manageable and, above all, legible.\n4. How your newly-acquired coding skills can help you be _usefully_ lazy because that, ultimately, is what computers do: they make tedious, repetitive problems 'go away', though they often create or reveal much more complex, novel problems in turn.\n\nCode Camp is all about building blocks: helping you to learn the fundamentals so that when classes start you (hopefully) feel like you already have the lay of the land. We can't make learning to code _easy_ any more than we can make learning to speak French or Chinese (or English!) easy, but if you work your way through these lessons it will be _easier_ to hit the ground running in Week 1.\n\n## How will you learn?\n\nWe've tried to break everything down into manageable 'units' of learning that you can follow at your own speed in the run-up to the start of term. We'd _strongly_ recommend that you don't try to cram Code Camp into the last week before classes start; instead, you should aim to complete two or three lessons a week (and allow time to go back and test yourself!) so that you complete it over the course of four to eight weeks (1-2 months).\n\nEach lesson will contain a mix of explanation and code that can be run interactively in a variety of ways (see [Setting Up](./setup/index.qmd)). Some code will run first-time (you just copy+paste), some code will require you to 'fill in the blanks' (though the blanks, in this case, are marked by `??`), and some code will be deliberately broken so that you have to _debug_ it and work out what's wrong^[Fun fact: the term 'debugging' was coined by the rather impressive Grace Hopper, who found an _actual_ bug in the computer she was working with that was causing programs to fail.].\n\nSo rather than throw you in at the deep end with examples taken from computer science classes (e.g. 'This is _just_ like the C construct...'), we've tried to give you _real world_ examples whenever possible in the hopes that it will seem a little less abstract and a little more relevant to _your_ needs. Of course, the early examples are also very basic so the payoff might not be obvious right away, but trust us: if you stick with it you will learn how to speak a new language that gives you superpowers for dealing with data!^[Unfortunately, no other superpowers are likely to be uncovered.]\n\n## Lessons\n\nThe lessons are organised to build from the general and basic, to the specific and advanced. You need to learn about variables and operators before you can learn about functions and classes. But along the way we also try to introduce _other_ ideas and tools (such as working with the Terminal and how to write Markdown) that will support your coding skills. While there are some important differences, a lot of what makes a _good_ programmer is the same as what makes a good _anything_: persistence, attention to detail, and communicating clearly and succinctly.\n\n::: {#cell-lesson-plan .cell tbl-cap='Lesson Plan' tbl-colwidths='[8,16,66,10]' execution_count=1}\n\n::: {#lesson-plan .cell-output .cell-output-display .cell-output-markdown execution_count=1}\nLesson    Time Needed    Title & topic                                          Link\n--------  -------------  -----------------------------------------------------  -------------------------------------\n0         00:10:00       Introduction: Doing Urban Spatial Science              [Lesson](./lessons/Introduction.qmd)\n1         00:25:00       Background: *Why* We Do What We Do                     [Lesson](./lessons/Background.qmd)\n2         00:45:00       The Basics: Variables, Operators & Precedence          [Lesson](./lessons/The_Basics.qmd)\n3         00:40:00       Exceptions: What to Do When Things Go Wrong            [Lesson](./lessons/Exceptions.qmd)\n4         00:20:00       Writing Code: A Matter of Style                        [Lesson](./lessons/Writing_Code.qmd)\n5         01:15:00       Boolean Logic: Comparisons, Conditions & George Boole  [Lesson](./lessons/Boolean_Logic.qmd)\n6         01:35:00       Recap 1                                                [Lesson](./lessons/Recap_1.qmd)\n7         01:00:00       Lists: Making a List (and Checking it Twice)           [Lesson](./lessons/Lists.qmd)\n8         00:40:00       Dicts: Look it up in the Dictionary                    [Lesson](./lessons/Dicts.qmd)\n9         00:50:00       Loops: Let's Iterate This                              [Lesson](./lessons/Loops.qmd)\n10        00:50:00       Recap 2                                                [Lesson](./lessons/Recap_2.qmd)\n11        01:25:00       Functions: Automate All the Things                     [Lesson](./lessons/Functions.qmd)\n12        00:40:00       Packages: Giving Yourself a Present                    [Lesson](./lessons/Packages.qmd)\n13        00:55:00       Classes: How to Objectify Things in Python             [Lesson](./lessons/Classes.qmd)\n14        00:35:00       The Terminal: No More Buttons to Press                 [Lesson](./lessons/The_Terminal.qmd)\n:::\n:::\n\n\n## More Help\n\nIt's entirely possible that Code Camp doesn't suit you: you want assessments, you want a more general introduction to Python, etc. Whatever, Code Camp is there to help you, and if it's not helping then don't worry about completing it.\n\n*Instead*, what we'd suggest is that you look for alternatives that *do* suit! There are lots of 'introduction to Python' online classes out there: [Kaggle](https://www.kaggle.com/learn/intro-to-programming), [Codcademy](https://try.codecademy.com/learn-python-3), [Codefinity](https://codefinity.com/), [Learn Python](https://www.learnpython.org/), [Coursera](https://www.coursera.org/learn/python-programming-intro), [Microsoft](https://learn.microsoft.com/en-us/training/modules/intro-to-python/), [DataCamp](https://www.datacamp.com/courses/intro-to-python-for-data-science), [Udacity](https://www.udacity.com/course/introduction-to-python--ud1110), [Software Carpentry](https://swcarpentry.github.io/python-novice-inflammation/)... and lots more! We're not going to recommend a specific online module -- you'll have to see for yourself which style suits you best -- but this hopefully makes the point that there's no excuse for *not* learning some basic Python before the start of your class. \n\nAnd the real takeaway here should be this: the more you do now, the easier it'll be later. *Just* like learning a new language. Good luck!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}